{"version":3,"sources":["../node_modules/alea/alea.js","../node_modules/simplex-noise/simplex-noise.js","../node_modules/cwise-parser/node_modules/esprima/esprima.js","../node_modules/cwise-parser/index.js","../node_modules/cwise/lib/cwise-esprima.js","../node_modules/ndarray-fill/index.js","../node_modules/typescript-collections/dist/lib/util.js","../node_modules/typescript-collections/dist/lib/arrays.js","../node_modules/typescript-collections/dist/lib/Dictionary.js","../node_modules/typescript-collections/dist/lib/Set.js","../node_modules/typescript-collections/dist/lib/Bag.js","../node_modules/typescript-collections/dist/lib/LinkedList.js","../node_modules/typescript-collections/dist/lib/Queue.js","../node_modules/typescript-collections/dist/lib/BSTreeKV.js","../node_modules/typescript-collections/dist/lib/BSTree.js","../node_modules/typescript-collections/dist/lib/Heap.js","../node_modules/typescript-collections/dist/lib/LinkedDictionary.js","../node_modules/typescript-collections/dist/lib/MultiDictionary.js","../node_modules/typescript-collections/dist/lib/FactoryDictionary.js","../node_modules/typescript-collections/dist/lib/PriorityQueue.js","../node_modules/typescript-collections/dist/lib/Stack.js","../node_modules/typescript-collections/dist/lib/MultiRootTree.js","../node_modules/typescript-collections/dist/lib/index.js","../node_modules/simple-statistics/dist/simple-statistics.min.js","simulation/worldgen.worker.ts"],"names":["root","factory","define","amd","exports","esprima","Token","TokenName","FnExprTokens","Syntax","PropertyKind","Messages","Regex","SyntaxTreeDelegate","source","strict","index","lineNumber","lineStart","length","delegate","lookahead","state","extra","assert","condition","message","Error","isDecimalDigit","ch","isHexDigit","indexOf","isOctalDigit","isWhiteSpace","isLineTerminator","isIdentifierStart","NonAsciiIdentifierStart","test","String","fromCharCode","isIdentifierPart","NonAsciiIdentifierPart","isStrictModeReservedWord","id","isRestrictedWord","addComment","type","value","start","end","loc","comment","lastCommentStart","range","comments","push","attachComment","leadingComments","trailingComments","skipSingleLineComment","offset","charCodeAt","slice","skipMultiLineComment","UnexpectedToken","skipComment","scanHexEscape","prefix","i","len","code","toLowerCase","getEscapedIdentifier","substr","scanIdentifier","getIdentifier","Identifier","isKeyword","Keyword","NullLiteral","BooleanLiteral","scanPunctuator","code2","ch2","ch3","ch4","ch1","tokenize","openParenToken","tokens","openCurlyToken","Punctuator","scanNumericLiteral","number","scanHexLiteral","NumericLiteral","parseInt","isImplicitOctalLiteral","scanOctalLiteral","parseFloat","scanRegExp","body","flags","scanRegExpBody","str","classMarker","terminated","UnterminatedRegExp","scanRegExpFlags","restore","testRegExp","pattern","RegExp","e","InvalidRegExp","RegularExpression","literal","collectRegex","pos","regex","token","pop","advance","EOF","scanStringLiteral","quote","unescaped","startLineNumber","startLineStart","octal","StringLiteral","advanceSlash","prevToken","checkToken","collectToken","lex","peek","line","Position","column","SourceLocation","startLine","startColumn","peekLineTerminator","found","throwError","messageFormat","error","args","Array","prototype","call","arguments","msg","replace","whole","description","throwErrorTolerant","apply","errors","throwUnexpected","UnexpectedEOS","UnexpectedNumber","UnexpectedString","UnexpectedIdentifier","isFutureReservedWord","UnexpectedReserved","StrictReservedWord","expect","expectKeyword","keyword","match","matchKeyword","consumeSemicolon","oldIndex","oldLineNumber","oldLineStart","oldLookahead","isLeftHandSide","expr","MemberExpression","parsePropertyFunction","param","first","previousStrict","startToken","parseFunctionSourceElements","name","StrictParamName","markEnd","createFunctionExpression","parseObjectPropertyKey","StrictOctalLiteral","createLiteral","createIdentifier","parseObjectProperty","key","parseAssignmentExpression","createProperty","parseVariableIdentifier","parsePrimaryExpression","parseGroupExpression","parseExpression","parseArrayInitialiser","elements","createArrayExpression","parseObjectInitialiser","properties","property","kind","map","toString","Data","Get","Set","Object","hasOwnProperty","StrictDuplicateProperty","AccessorDataProperty","AccessorGetSet","createObjectExpression","parseFunctionExpression","stricted","firstRestricted","tmp","params","StrictFunctionName","parseParams","createThisExpression","parseArguments","parseNonComputedProperty","isIdentifierName","parseNonComputedMember","parseComputedMember","parseNewExpression","callee","parseLeftHandSideExpression","allowIn","createMemberExpression","createNewExpression","parsePostfixExpression","parseLeftHandSideExpressionAllowCall","previousAllowIn","createCallExpression","StrictLHSPostfix","InvalidLHSInAssignment","createPostfixExpression","parseUnaryExpression","StrictLHSPrefix","createUnaryExpression","operator","argument","StrictDelete","binaryPrecedence","prec","parseConditionalExpression","consequent","alternate","parseBinaryExpression","marker","markers","stack","right","left","createBinaryExpression","createConditionalExpression","node","op","StrictLHSAssignment","createAssignmentExpression","createSequenceExpression","expressions","parseBlock","block","parseStatementList","list","statement","parseSourceElement","createBlockStatement","parseVariableDeclaration","init","StrictVarName","createVariableDeclarator","parseVariableDeclarationList","parseForStatement","update","oldInIteration","declarations","parseForVariableDeclaration","createVariableDeclaration","InvalidLHSInForIn","inIteration","parseStatement","createForStatement","createForInStatement","parseSwitchCase","createSwitchCase","parseTryStatement","handlers","finalizer","StrictCatchVariable","createCatchClause","NoCatchOrFinally","createTryStatement","labeledBody","createEmptyStatement","parseExpressionStatement","createExpressionStatement","parseBreakStatement","label","inSwitch","IllegalBreak","createBreakStatement","labelSet","UnknownLabel","parseContinueStatement","IllegalContinue","createContinueStatement","createDebuggerStatement","createDoWhileStatement","parseFunctionDeclaration","parseIfStatement","createIfStatement","inFunctionBody","IllegalReturn","createReturnStatement","parseSwitchStatement","discriminant","cases","clause","oldInSwitch","defaultFound","createSwitchStatement","MultipleDefaultsInSwitch","parseThrowStatement","NewlineAfterThrow","createThrowStatement","parseWhileStatement","createWhileStatement","parseWithStatement","object","StrictModeWith","createWithStatement","Redeclaration","createLabeledStatement","sourceElement","oldLabelSet","oldInFunctionBody","sourceElements","expression","Literal","paramSet","StrictParamDupe","createFunctionDeclaration","parseConstLetDeclaration","parseProgram","parseSourceElements","createProgram","filterTokenLocation","entry","lastChild","Program","bottomRightStack","undefined","postProcess","processComment","ArrayExpression","AssignmentExpression","LogicalExpression","BinaryExpression","BlockStatement","BreakStatement","CallExpression","CatchClause","ConditionalExpression","ContinueStatement","DebuggerStatement","DoWhileStatement","EmptyStatement","ExpressionStatement","ForStatement","ForInStatement","defaults","FunctionDeclaration","FunctionExpression","IfStatement","LabeledStatement","accessor","NewExpression","ObjectExpression","UpdateExpression","Property","ReturnStatement","SequenceExpression","SwitchCase","SwitchStatement","ThisExpression","ThrowStatement","guardedHandlers","TryStatement","UnaryExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","version","options","tolerant","lexError","parse","program","types","create","freeze"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA,IAAA,GA7GA,SAAA,EAAA,GACA,iBAAA,QACA,OAAA,QAAA,IACA,mBAAA,GAAA,EAAA,IACA,EAAA,GAEA,EAAA,KAAA,IANA,CAQA,KAAA,WAEA,aAWA,OANA,EAAA,YAAA,SAAA,GACA,IAAA,EAAA,IAAA,EAEA,OADA,EAAA,YAAA,GACA,GAGA,EAEA,SAAA,IACA,OAAA,SAAA,GAEA,IAAA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,GAAA,EAAA,SACA,EAAA,EAAA,IAAA,OAEA,IAAA,EAqDA,WACA,IAAA,EAAA,WAEA,EAAA,SAAA,GACA,EAAA,EAAA,WACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAEA,IAAA,EAAA,oBADA,GAAA,EAAA,WAAA,IAGA,GADA,EAAA,IAAA,EAGA,GADA,GAAA,KACA,EAEA,GAAA,YADA,GAAA,GAGA,OAAA,wBAAA,IAAA,IAIA,OADA,EAAA,QAAA,WACA,EAxEA,GACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,KACA,GAAA,EAAA,EAAA,KACA,IACA,GAAA,IAEA,GAAA,EAAA,EAAA,KACA,IACA,GAAA,IAEA,GAAA,EAAA,EAAA,KACA,IACA,GAAA,GAGA,EAAA,KAEA,IAAA,EAAA,WACA,IAAA,EAAA,QAAA,EAAA,uBAAA,EAGA,OAFA,EAAA,EACA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,IAuBA,OArBA,EAAA,OAAA,WACA,OAAA,WAAA,KAEA,EAAA,QAAA,WACA,OAAA,IACA,wBAAA,QAAA,IAAA,IAEA,EAAA,QAAA,WACA,EAAA,KAAA,EAGA,EAAA,YAAA,WACA,MAAA,CAAA,EAAA,EAAA,EAAA,IAEA,EAAA,YAAA,SAAA,GACA,GAAA,EAAA,IAAA,EACA,GAAA,EAAA,IAAA,EACA,GAAA,EAAA,IAAA,EACA,GAAA,EAAA,IAAA,GAGA,EA1DA,CA4DA,MAAA,UAAA,MAAA,KAAA;;;ACqYA,IAAA,GA5bA,WACA,aAEA,IAAA,EAAA,IAAA,KAAA,KAAA,GAAA,GACA,GAAA,EAAA,KAAA,KAAA,IAAA,EAEA,EAAA,EAAA,EACA,GAAA,KAAA,KAAA,GAAA,GAAA,EACA,GAAA,EAAA,KAAA,KAAA,IAAA,GAEA,SAAA,EAAA,GACA,IAAA,EAEA,EADA,mBAAA,EACA,EAEA,EA6WA,WAEA,IAAA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,GA4BA,EAAA,WACA,SAAA,GACA,EAAA,EAAA,WACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAEA,IAAA,EAAA,oBADA,GAAA,EAAA,WAAA,IAGA,GADA,EAAA,IAAA,EAGA,GADA,GAAA,KACA,EAEA,GAAA,YADA,GAAA,GAGA,OAAA,wBAAA,IAAA,KAdA,IACA,EA3BA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KAEA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,KACA,GAAA,EAAA,UAAA,KACA,IACA,GAAA,IAEA,GAAA,EAAA,UAAA,KACA,IACA,GAAA,IAEA,GAAA,EAAA,UAAA,KACA,IACA,GAAA,GAIA,OADA,EAAA,KACA,WACA,IAAA,EAAA,QAAA,EAAA,uBAAA,EAGA,OAFA,EAAA,EACA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,IA3YA,CAAA,GAEA,KAAA,OAEA,KAAA,EAAA,EAAA,GACA,KAAA,KAAA,IAAA,WAAA,KACA,KAAA,UAAA,IAAA,WAAA,KACA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,IACA,KAAA,KAAA,GAAA,KAAA,EAAA,IAAA,GACA,KAAA,UAAA,GAAA,KAAA,KAAA,GAAA,GAmVA,SAAA,EAAA,GACA,IAAA,EACA,EAAA,IAAA,WAAA,KACA,IAAA,EAAA,EAAA,EAAA,IAAA,IACA,EAAA,GAAA,EAEA,IAAA,EAAA,EAAA,EAAA,IAAA,IAAA,CACA,IAAA,EAAA,KAAA,KAAA,IAAA,IACA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAEA,OAAA,EA3VA,EAAA,UAAA,CACA,MAAA,IAAA,aAAA,CAAA,EAAA,EAAA,GACA,EAAA,EAAA,EACA,GAAA,EAAA,GAEA,GAAA,EAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,EAEA,EAAA,GAAA,GACA,EAAA,GAAA,EACA,EAAA,EAAA,EAEA,GAAA,EAAA,EACA,EAAA,GAAA,EACA,GAAA,GAAA,IACA,MAAA,IAAA,aiBA,EAAA,EAjBA,EAAA,KAAA,UACA,EAAA,KAAA,KACA,EAAA,KAAA,MACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,GAAA,EAAA,GAAA,EACA,EAAA,KAAA,MAAA,EAAA,GACA,EAAA,KAAA,MAAA,EAAA,GACA,GAAA,EAAA,GAAA,EAGA,EAAA,GAFA,EAAA,GAGA,EAAA,GAFA,EAAA,GAMA,EAAA,GACA,EAAA,EACA,EAAA,IAGA,EAAA,EACA,EAAA,GAKA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAEA,EAAA,IAAA,EACA,EAAA,IAAA,EAEA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,GADA,GAAA,GACA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAEA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,GADA,GAAA,GACA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAEA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,GADA,GAAA,GACA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAIA,OAAA,IAAA,EAAA,EAAA,IAGA,QAAA,SAAA,EAAA,EAAA,GACA,IAGA,EAAA,EAAA,EAAA,EAeA,EAAA,EAAA,EACA,EAAA,EAAA,EAnBA,EAAA,KAAA,UACA,EAAA,KAAA,KACA,EAAA,KAAA,MAGA,GAAA,EAAA,EAAA,IAnHA,EAAA,GAoHA,EAAA,KAAA,MAAA,EAAA,GACA,EAAA,KAAA,MAAA,EAAA,GACA,EAAA,KAAA,MAAA,EAAA,GACA,GAAA,EAAA,EAAA,GAAA,EAIA,EAAA,GAHA,EAAA,GAIA,EAAA,GAHA,EAAA,GAIA,EAAA,GAHA,EAAA,GAQA,GAAA,EACA,GAAA,GACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAEA,GAAA,GACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,IAGA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAIA,EAAA,GACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAEA,EAAA,GACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,IAGA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAOA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAEA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EAEA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,MACA,CACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,GADA,GAAA,GACA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAEA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,MACA,CACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,GADA,GAAA,GACA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAEA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,MACA,CACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,GADA,GAAA,GACA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAEA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,MACA,CACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,GADA,GAAA,GACA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAIA,OAAA,IAAA,EAAA,EAAA,EAAA,IAGA,QAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAGA,EAAA,EAAA,EAAA,EAAA,EAqCA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EA1CA,EAAA,KAAA,KACA,EAAA,KAAA,MAIA,GAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,KAAA,MAAA,EAAA,GACA,EAAA,KAAA,MAAA,EAAA,GACA,EAAA,KAAA,MAAA,EAAA,GACA,EAAA,KAAA,MAAA,EAAA,GACA,GAAA,EAAA,EAAA,EAAA,GAAA,EAKA,EAAA,GAJA,EAAA,GAKA,EAAA,GAJA,EAAA,GAKA,EAAA,GAJA,EAAA,GAKA,EAAA,GAJA,EAAA,GAUA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,IACA,IACA,EAAA,EAAA,IACA,IACA,EAAA,EAAA,IACA,IACA,EAAA,EAAA,IACA,IACA,EAAA,EAAA,IACA,IACA,EAAA,EAAA,IACA,IAwBA,IAAA,EAAA,GAfA,EAAA,GAAA,EAAA,EAAA,GAeA,EACA,EAAA,GAfA,EAAA,GAAA,EAAA,EAAA,GAeA,EACA,EAAA,GAfA,EAAA,GAAA,EAAA,EAAA,GAeA,EACA,EAAA,GAfA,EAAA,GAAA,EAAA,EAAA,GAeA,EACA,EAAA,GAdA,EAAA,GAAA,EAAA,EAAA,GAcA,EAAA,EACA,EAAA,GAdA,EAAA,GAAA,EAAA,EAAA,GAcA,EAAA,EACA,EAAA,GAdA,EAAA,GAAA,EAAA,EAAA,GAcA,EAAA,EACA,EAAA,GAdA,EAAA,GAAA,EAAA,EAAA,GAcA,EAAA,EACA,EAAA,GAbA,EAAA,GAAA,EAAA,EAAA,GAaA,EAAA,EACA,EAAA,GAbA,EAAA,GAAA,EAAA,EAAA,GAaA,EAAA,EACA,EAAA,GAbA,EAAA,GAAA,EAAA,EAAA,GAaA,EAAA,EACA,EAAA,GAbA,EAAA,GAAA,EAAA,EAAA,GAaA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,EAEA,GAAA,IAAA,EACA,GAAA,IAAA,EACA,GAAA,IAAA,EACA,GAAA,IAAA,EAEA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,EAAA,MACA,CACA,IAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,GAAA,EAEA,GADA,IAAA,IACA,IAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAEA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,EAAA,MACA,CACA,IAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,GAAA,EAEA,GADA,IAAA,IACA,IAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAEA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,EAAA,MACA,CACA,IAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,GAAA,EAEA,GADA,IAAA,IACA,IAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAEA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,EAAA,MACA,CACA,IAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,GAAA,EAEA,GADA,IAAA,IACA,IAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAEA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GACA,GAAA,GAAA,EAAA,EAAA,MACA,CACA,IAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,GAAA,EAEA,GADA,IAAA,IACA,IAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,IAGA,OAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAkBA,EAAA,uBAAA,OAuDA,IAAA,GAAA,EAAA,KAAA,EAAA,WAAA,OAAA,IAEA,oBAAA,QAAA,QAAA,aAAA,EAEA,oBAAA,SAAA,OAAA,aAAA,GAEA,oBAAA,SACA,OAAA,QAAA,GAxbA;;;AC8pHA,IAAA,GA/oHC,SAAUA,EAAMC,GACb,aAMsB,mBAAXC,GAAyBA,EAAOC,IAChC,EAAA,CAAC,WAAYF,GACM,oBAAZG,QACNA,EAAAA,SAECJ,EAAAA,EAAKK,QAAU,IAZ/B,CAcC,KAAM,SAAUD,GACd,aAEIE,IAAAA,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAqIKC,SAAAA,EAAOC,EAAWC,GAEnB,IAACD,EACK,MAAA,IAAIE,MAAM,WAAaD,GAI5BE,SAAAA,EAAeC,GACZA,OAAAA,GAAM,IAAMA,GAAM,GAGrBC,SAAAA,EAAWD,GACT,MAAA,yBAAyBE,QAAQF,IAAO,EAG1CG,SAAAA,EAAaH,GACX,MAAA,WAAWE,QAAQF,IAAO,EAM5BI,SAAAA,EAAaJ,GACVA,OAAO,KAAPA,GAAwB,IAAPA,GAAwB,KAAPA,GAAwB,KAAPA,GAAwB,MAAPA,GACvEA,GAAM,MAAU,CAAC,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,MAAQ,OAAQE,QAAQF,IAAO,EAKxKK,SAAAA,EAAiBL,GACdA,OAAO,KAAPA,GAAwB,KAAPA,GAAwB,OAAPA,GAA0B,OAAPA,EAKxDM,SAAAA,EAAkBN,GACfA,OAAO,KAAPA,GAAwB,KAAPA,GACd,GAAA,IAAQA,GAAM,IACd,GAAA,IAAQA,GAAM,KACb,KAAA,GACA,GAAA,KAASjB,EAAMwB,wBAAwBC,KAAKC,OAAOC,aAAaV,IAGvEW,SAAAA,EAAiBX,GACdA,OAAO,KAAPA,GAAwB,KAAPA,GACd,GAAA,IAAQA,GAAM,IACd,GAAA,IAAQA,GAAM,KACd,GAAA,IAAQA,GAAM,IACb,KAAA,GACA,GAAA,KAASjB,EAAM6B,uBAAuBJ,KAAKC,OAAOC,aAAaV,IAmBtEa,SAAAA,EAAyBC,GACtBA,OAAAA,GACH,IAAA,aACA,IAAA,YACA,IAAA,UACA,IAAA,UACA,IAAA,YACA,IAAA,SACA,IAAA,SACA,IAAA,QACA,IAAA,MACM,OAAA,EACX,QACW,OAAA,GAINC,SAAAA,EAAiBD,GACfA,MAAO,SAAPA,GAAwB,cAAPA,EA2CnBE,SAAAA,EAAWC,EAAMC,EAAOC,EAAOC,EAAKC,GACrCC,IAAAA,EAEG,EAAiB,iBAAVH,EAAoB,oCAM9B1B,EAAM8B,kBAAoBJ,IAGxBI,EAAAA,iBAAmBJ,EAEf,EAAA,CACAF,KAAAA,EACCC,MAAAA,GAEPxB,EAAM8B,QACEA,EAAAA,MAAQ,CAACL,EAAOC,IAExB1B,EAAM2B,MACEA,EAAAA,IAAMA,GAEZI,EAAAA,SAASC,KAAKJ,GAChB5B,EAAMiC,gBACAC,EAAAA,gBAAgBF,KAAKJ,GACrBO,EAAAA,iBAAiBH,KAAKJ,KAI3BQ,SAAAA,EAAsBC,GACvBZ,IAAAA,EAAOE,EAAKrB,EAAIsB,EAUbnC,IARCA,EAAAA,EAAQ4C,EACV,EAAA,CACK,MAAA,CACG3C,KAAAA,EACED,OAAAA,EAAQE,EAAY0C,IAI7B5C,EAAQG,GAGPe,GAFCpB,EAAAA,EAAO+C,WAAW7C,KACrBA,EACEkB,EAAiBL,GAcjB,OAbIN,EAAM+B,WACIxC,EAAAA,EAAOgD,MAAMd,EAAQY,EAAQ5C,EAAQ,GAC3CiC,EAAAA,IAAM,CACAhC,KAAAA,EACED,OAAAA,EAAQE,EAAY,GAErB,EAAA,OAAQiC,EAASH,EAAOhC,EAAQ,EAAGkC,IAEvC,KAAPrB,GAA0C,KAA7Bf,EAAO+C,WAAW7C,MAC7BA,IAEJC,OACUD,EAAAA,GAKhBO,EAAM+B,WACIxC,EAAAA,EAAOgD,MAAMd,EAAQY,EAAQ5C,GACnCiC,EAAAA,IAAM,CACAhC,KAAAA,EACED,OAAAA,EAAQE,GAET,EAAA,OAAQiC,EAASH,EAAOhC,EAAOkC,IAIzCa,SAAAA,IACDf,IAAAA,EAAOE,EAAKrB,EAAIsB,EAYbnC,IAVHO,EAAM+B,WACEtC,EAAAA,EAAQ,EACV,EAAA,CACK,MAAA,CACGC,KAAAA,EACED,OAAAA,EAAQE,EAAY,KAKjCF,EAAQG,GAEPe,GAAAA,EADCpB,EAAAA,EAAO+C,WAAW7C,IAER,KAAPa,GAAgD,KAAjCf,EAAO+C,WAAW7C,EAAQ,MACvCA,IAEJC,EAEUD,IADVA,EAEEA,GAASG,GACE,EAAA,GAAIR,EAASqD,gBAAiB,gBAE1C,GAAW,KAAPnC,EAAa,CAEhBf,GAAiC,KAAjCA,EAAO+C,WAAW7C,EAAQ,GAW1B,QAVEA,IACAA,OACEO,EAAM+B,WACIxC,EAAAA,EAAOgD,MAAMd,EAAQ,EAAGhC,EAAQ,GACtCiC,EAAAA,IAAM,CACAhC,KAAAA,EACED,OAAAA,EAAQE,GAET,EAAA,QAASiC,EAASH,EAAOhC,EAAOkC,OAIjDlC,QAEAA,EAIC,EAAA,GAAIL,EAASqD,gBAAiB,WAGpCC,SAAAA,IACDpC,IAAAA,EAAImB,EAGDhC,IADEA,EAAU,IAAVA,EACFA,EAAQG,GAGPc,GAAAA,EAFCnB,EAAAA,EAAO+C,WAAW7C,MAGjBA,OACC,GAAIkB,EAAiBL,KACtBb,EACS,KAAPa,GAA4C,KAA7Bf,EAAO+C,WAAW7C,MAC/BA,IAEJC,EACUD,EAAAA,EACJ,GAAA,OACL,GAAW,KAAPa,EAEHA,GAAO,MADNf,EAAAA,EAAO+C,WAAW7C,EAAQ,MAEzBA,IACAA,EACoB,EAAA,GACd,GAAA,MACL,CAAA,GAAW,KAAPa,EAKP,QAJEb,IACAA,EACF+C,SAID,GAAIf,GAAgB,KAAPnB,EAAa,CAExBf,GAAiC,KAAjCA,EAAO+C,WAAW7C,EAAQ,IAAkD,KAAjCF,EAAO+C,WAAW7C,EAAQ,GAKtE,MAHS,GAAA,EACa,EAAA,OAIvB,CAAA,GAAW,KAAPa,EAWP,MAVIf,GAAuC,QAAvCA,EAAOgD,MAAM9C,EAAQ,EAAGA,EAAQ,GAOhC,QANEA,IACAA,IACAA,IACAA,EACoB,EAAA,IAU7BkD,SAAAA,EAAcC,GACfC,IAAAA,EAAGC,EAAKxC,EAAIyC,EAAO,EAGlBF,IADED,EAAW,MAAXA,EAAkB,EAAI,EACxBC,EAAI,EAAGA,EAAIC,IAAOD,EAAG,CAClBpD,KAAAA,EAAQG,GAAUW,EAAWhB,EAAOE,KAI7B,MAAA,GAHFF,EAAAA,EAAOE,KACLsD,EAAO,GAAPA,EAAY,mBAAmBvC,QAAQF,EAAG0C,eAKlDjC,OAAAA,OAAOC,aAAa+B,GAGtBE,SAAAA,IACD3C,IAAAA,EAAIc,EAkBD3B,IAhBFF,EAAAA,EAAO+C,WAAW7C,KAClBsB,EAAAA,OAAOC,aAAaV,GAGd,KAAPA,IACiC,MAA7Bf,EAAO+C,WAAW7C,IACP,EAAA,GAAIL,EAASqD,gBAAiB,aAE3ChD,GACGkD,EAAAA,EAAc,OACD,OAAPrC,GAAgBM,EAAkBN,EAAGgC,WAAW,KAC5C,EAAA,GAAIlD,EAASqD,gBAAiB,WAExCnC,EAAAA,GAGFb,EAAQG,GAENqB,EADA1B,EAAAA,EAAO+C,WAAW7C,OAIrBA,EACIsB,GAAAA,OAAOC,aAAaV,GAGf,KAAPA,IACKc,EAAAA,EAAG8B,OAAO,EAAG9B,EAAGxB,OAAS,GACG,MAA7BL,EAAO+C,WAAW7C,IACP,EAAA,GAAIL,EAASqD,gBAAiB,aAE3ChD,GACGkD,EAAAA,EAAc,OACD,OAAPrC,GAAgBW,EAAiBX,EAAGgC,WAAW,KAC3C,EAAA,GAAIlD,EAASqD,gBAAiB,WAEvCnC,GAAAA,GAIPc,OAAAA,EAwBF+B,SAAAA,IACD1B,IAAAA,EAAOL,EAqBJ,OAnBC3B,EAAAA,EAmBD,CACG8B,KAbQ,KAJZhC,EAA6B,KAA7BA,EAAO+C,WAAW7C,GAAmBwD,IA3BtCG,WACD3B,IAAAA,EAAOnB,EAGJb,IADCA,EAAAA,IACDA,EAAQG,GAAQ,CAEfU,GAAO,MADNf,EAAAA,EAAO+C,WAAW7C,IAIZwD,OADCxB,EAAAA,EACDwB,IAEPhC,IAAAA,EAAiBX,GAGjB,QAFEb,EAMHF,OAAAA,EAAOgD,MAAMd,EAAOhC,GASyC2D,IAI7DxD,OACIb,EAAMsE,WApTZC,SAAUlC,GACX5B,GAAAA,GAAU2B,EAAyBC,GAC5B,OAAA,EAOHA,OAAAA,EAAGxB,QACN,KAAA,EACOwB,MAAO,OAAPA,GAAwB,OAAPA,GAAwB,OAAPA,EACzC,KAAA,EACOA,MAAO,QAAPA,GAAyB,QAAPA,GAAyB,QAAPA,GAChC,QAAPA,GAAyB,QAAPA,EACtB,KAAA,EACOA,MAAO,SAAPA,GAA0B,SAAPA,GAA0B,SAAPA,GAClC,SAAPA,GAA0B,SAAPA,GAA0B,SAAPA,EAC1C,KAAA,EACOA,MAAO,UAAPA,GAA2B,UAAPA,GAA2B,UAAPA,GACpC,UAAPA,GAA2B,UAAPA,GAA2B,UAAPA,GACjC,UAAPA,GAA2B,UAAPA,EACxB,KAAA,EACOA,MAAO,WAAPA,GAA4B,WAAPA,GAA4B,WAAPA,GACtC,WAAPA,GAA4B,WAAPA,GAA4B,WAAPA,EAC9C,KAAA,EACOA,MAAO,YAAPA,GAA6B,YAAPA,GAA6B,YAAPA,EACnD,KAAA,EACOA,MAAO,aAAPA,GAA8B,aAAPA,GAA8B,aAAPA,EACrD,KAAA,GACOA,MAAO,eAAPA,EACZ,QACW,OAAA,GAqRAkC,CAAUlC,GACVrC,EAAMwE,QACC,SAAPnC,EACArC,EAAMyE,YACC,SAAPpC,GAAwB,UAAPA,EACjBrC,EAAM0E,eAEN1E,EAAMsE,WAKNjC,MAAAA,EACK1B,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,GAOJiE,SAAAA,IACDjC,IAEAkC,EAEAC,EACAC,EACAC,EANArC,EAAQhC,EACRsD,EAAOxD,EAAO+C,WAAW7C,GAEzBsE,EAAMxE,EAAOE,GAKTsD,OAAAA,GAGH,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,IACA,KAAA,IACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,IASM,QARLtD,EACEO,EAAMgE,WACO,KAATjB,EACMkB,EAAAA,eAAiBjE,EAAMkE,OAAOtE,OACpB,MAATmD,IACDoB,EAAAA,eAAiBnE,EAAMkE,OAAOtE,SAGrC,CACGb,KAAAA,EAAMqF,WACLrD,MAAAA,OAAOC,aAAa+B,GACfrD,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,GAGb,QAIQkE,GAAU,MAHNpE,EAAAA,EAAO+C,WAAW7C,EAAQ,IAItBsD,OAAAA,GACH,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,IACA,KAAA,GACA,KAAA,GACA,KAAA,GAEM,OADE,GAAA,EACF,CACGhE,KAAAA,EAAMqF,WACLrD,MAAAA,OAAOC,aAAa+B,GAAQhC,OAAOC,aAAa2C,GAC3CjE,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,GAGR,KAAA,GACA,KAAA,GAOM,OANE,GAAA,EAGwB,KAA7BF,EAAO+C,WAAW7C,MAChBA,EAEC,CACGV,KAAAA,EAAMqF,WACL7E,MAAAA,EAAOgD,MAAMd,EAAOhC,GACfC,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,IAUjBqE,MAAQ,UAFNvE,EAAAA,EAAO2D,OAAOzD,EAAO,KAGd,GAAA,EACF,CACGV,KAAAA,EAAMqF,WACLN,MAAAA,EACKpE,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,IAQD,SAFNqE,EAAAA,EAAIZ,OAAO,EAAG,KAES,QAARW,GAAyB,QAARA,GACzB,GAAA,EACF,CACG9E,KAAAA,EAAMqF,WACLP,MAAAA,EACKnE,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,IAORsE,KAFCF,EAAAA,EAAIX,OAAO,EAAG,IAEH,IAAO,SAAS1C,QAAQuD,IAAQ,GAAe,OAARH,GAC3C,GAAA,EACF,CACG7E,KAAAA,EAAMqF,WACLR,MAAAA,EACKlE,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,IAKT,eAAee,QAAQuD,IAAQ,KAC7BtE,EACK,CACGV,KAAAA,EAAMqF,WACLL,MAAAA,EACKrE,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,SAIF,EAAA,GAAIL,EAASqD,gBAAiB,WA2EpC4B,SAAAA,IACDC,IAAAA,EAAQ7C,EAAOnB,EAQfA,GALGD,EAAAA,GADFd,EAAAA,EAAOE,IACa6C,WAAW,KAAe,MAAPhC,EACxC,sEAEIb,EAAAA,EACC,EAAA,GACE,MAAPa,EAAY,CAMRgE,GALK/E,EAAAA,EAAOE,KACXF,EAAAA,EAAOE,GAIG,MAAX6E,EAAgB,CACZhE,GAAO,MAAPA,GAAqB,MAAPA,EAEPiE,QADL9E,EAvFT8E,SAAe9C,GAGbhC,IAFH6E,IAAAA,EAAS,GAEN7E,EAAQG,GACNW,EAAWhB,EAAOE,KAGbF,GAAAA,EAAOE,KAWd,OARe,IAAlB6E,EAAO1E,QACI,EAAA,GAAIR,EAASqD,gBAAiB,WAGzC7B,EAAkBrB,EAAO+C,WAAW7C,KACzB,EAAA,GAAIL,EAASqD,gBAAiB,WAGtC,CACG1D,KAAAA,EAAMyF,eACLC,MAAAA,SAAS,KAAOH,EAAQ,IACnB5E,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,GAgEU8E,CAAe9C,GAEtBhB,GAAAA,EAAaH,IAtCpBoE,WACD7B,IAAAA,EAAGvC,EAIFuC,IAAAA,EAAIpD,EAAQ,EAAGoD,EAAIjD,IAAUiD,EAAG,CAE7BvC,GAAO,OADNf,EAAAA,EAAOsD,KACa,MAAPvC,EACP,OAAA,EAEP,IAACG,EAAaH,GACP,OAAA,EAIR,OAAA,EAwBSoE,GACOC,OAhElBA,SAAiBlD,GAEfhC,IADH6E,IAAAA,EAAS,IAAM/E,EAAOE,KACnBA,EAAQG,GACNa,EAAalB,EAAOE,KAGfF,GAAAA,EAAOE,KAOd,OAJHmB,EAAkBrB,EAAO+C,WAAW7C,KAAWY,EAAed,EAAO+C,WAAW7C,MACrE,EAAA,GAAIL,EAASqD,gBAAiB,WAGtC,CACG1D,KAAAA,EAAMyF,eACLC,MAAAA,SAASH,EAAQ,GACjB,OAAA,EACK5E,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,GA4CckF,CAAiBlD,GAK7BpB,KAAAA,EAAed,EAAO+C,WAAW7C,KAC1BF,GAAAA,EAAOE,KAEhBF,EAAAA,EAAOE,GAGZa,GAAO,MAAPA,EAAY,CAELD,IADGd,GAAAA,EAAOE,KACVY,EAAed,EAAO+C,WAAW7C,KAC1BF,GAAAA,EAAOE,KAEhBF,EAAAA,EAAOE,GAGZa,GAAO,MAAPA,GAAqB,MAAPA,EAOVD,GANMd,GAAAA,EAAOE,KAGN,OADNF,EAAAA,EAAOE,KACa,MAAPa,IACJf,GAAAA,EAAOE,MAEjBY,EAAed,EAAO+C,WAAW7C,IAC1BY,KAAAA,EAAed,EAAO+C,WAAW7C,KAC1BF,GAAAA,EAAOE,UAGV,EAAA,GAAIL,EAASqD,gBAAiB,WAQ1C,OAJH7B,EAAkBrB,EAAO+C,WAAW7C,KACzB,EAAA,GAAIL,EAASqD,gBAAiB,WAGtC,CACG1D,KAAAA,EAAMyF,eACLI,MAAAA,WAAWN,GACN5E,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,GA0NJoF,SAAAA,IACDpD,IAAAA,EAAOqD,EAAMC,EAAgBvD,EAU7BxB,OARQ,EAAA,KACZ0C,IACQjD,EAAAA,EAEDuF,EAnGFA,WACD1E,IAAAA,EAAI2E,EAAKC,EAAaC,EAQnB1F,IALAa,EAAO,OADTf,EAAAA,EAAOE,IACO,sDACbF,EAAAA,EAAOE,KAEC,GAAA,EACD,GAAA,EACNA,EAAQG,GAGPU,GADGA,GADFf,EAAAA,EAAOE,KAED,OAAPa,EAGIK,GAFCpB,EAAAA,EAAOE,MAEY6C,WAAW,KACpB,EAAA,GAAIlD,EAASgG,oBAErB9E,GAAAA,OACJ,GAAIK,EAAiBL,EAAGgC,WAAW,IAC3B,EAAA,GAAIlD,EAASgG,yBACrB,GAAIF,EACI,MAAP5E,IACc,GAAA,OAEf,CACCA,GAAO,MAAPA,EAAY,CACC,GAAA,EACb,MACc,MAAPA,IACO,GAAA,GAWnB,OANF6E,GACU,EAAA,GAAI/F,EAASgG,oBAKrB,CACIN,MAFJG,EAAI/B,OAAO,EAAG+B,EAAIrF,OAAS,GAGrBqF,QAAAA,GAwDND,GACCK,EArDHA,WACD/E,IAAAA,EAAI2E,EAAKF,EAAOO,EAIb7F,IAFD,EAAA,GACE,EAAA,GACDA,EAAQG,GAENqB,GADA1B,EAAAA,EAAOE,IACa6C,WAAW,KAKhChC,KADFb,EACS,OAAPa,GAAeb,EAAQG,EAEnBU,GAAO,OADNf,EAAAA,EAAOE,IACI,CAIRa,GAFMb,IADRA,EAEGkD,EAAAA,EAAc,KAGVsC,IADI3E,GAAAA,EACJ2E,GAAO,MAAOK,EAAU7F,IAAS6F,EAC3B/F,GAAAA,EAAO+F,QAGVA,EAAAA,EACC,GAAA,IACF,GAAA,MAEQ,EAAA,GAAIlG,EAASqD,gBAAiB,gBAE1C,GAAA,KACY,EAAA,GAAIrD,EAASqD,gBAAiB,gBAG5CnC,GAAAA,EACFA,GAAAA,EAIR,MAAA,CACIyE,MAAAA,EACEE,QAAAA,GAYLI,GACAE,EA/GHA,SAAWC,EAAST,GACrBvD,IAAAA,EACA,IACQ,EAAA,IAAIiE,OAAOD,EAAST,GAC9B,MAAOW,GACM,EAAA,GAAItG,EAASuG,eAErBnE,OAAAA,EAwGC+D,CAAWT,EAAKtD,MAAOuD,EAAMvD,OAEjCxB,EAAMgE,SACC,CACGjF,KAAAA,EAAM6G,kBACLpE,MAAAA,EACK9B,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,GAIN,CACMqF,QAAAA,EAAKe,QAAUd,EAAMc,QACvBrE,MAAAA,EACAC,MAAAA,EACFhC,IAAAA,GAIJqG,SAAAA,IACDC,IAAAA,EAAKpE,EAAKqE,EAAOC,EAsCdD,OApCPtD,IAEMjD,EAAAA,EACA,EAAA,CACK,MAAA,CACGC,KAAAA,EACED,OAAAA,EAAQE,IAIhBkF,EAAAA,IACJnD,EAAAA,IAAM,CACAhC,KAAAA,EACED,OAAAA,EAAQE,GAIfK,EAAMgE,WAEHhE,EAAMkE,OAAOtE,OAAS,IACdI,EAAAA,EAAMkE,OAAOlE,EAAMkE,OAAOtE,OAAS,IACjCkC,MAAM,KAAOiE,GAAsB,eAAfE,EAAM1E,OACZ,MAAhB0E,EAAMzE,OAAiC,OAAhByE,EAAMzE,OACvB0C,EAAAA,OAAOgC,OAKnBhC,EAAAA,OAAOlC,KAAK,CACR,KAAA,oBACCgE,MAAAA,EAAMH,QACN,MAAA,CAACE,EAAKtG,GACRkC,IAAAA,KAINqE,EAyEFG,SAAAA,IACD7F,IAAAA,EAIAb,OAFJiD,IAEIjD,GAASG,EACF,CACGb,KAAAA,EAAMqH,IACA1G,WAAAA,EACDC,UAAAA,EACJF,MAAAA,EACFA,IAAAA,GAMTmB,EAFCrB,EAAAA,EAAO+C,WAAW7C,IAGZ0D,IAIA,KAAP7C,GAAsB,KAAPA,GAAsB,KAAPA,EACvBoD,IAIA,KAAPpD,GAAsB,KAAPA,EA7Xd+F,WACDpB,IAAUqB,EAAO7E,EAAOnB,EAAIyC,EAAMwD,EAAWjB,EAAwBkB,EAAiBC,EAAtFxB,EAAM,GAAgDyB,GAAQ,EAW3DjH,IAVWC,EAAAA,EACDC,EAAAA,EAGT2G,EAAU,OADV/G,EAAAA,EAAOE,KACqB,MAAV6G,EACtB,2CAEI7G,EAAAA,IACNA,EAEKA,EAAQG,GAAQ,CAGfU,IAFCf,EAAAA,EAAOE,QAED6G,EAAO,CACN,EAAA,GACR,MACG,GAAW,OAAPhG,EAEH,IADCf,EAAAA,EAAOE,OACAkB,EAAiBL,EAAGgC,WAAW,MA4DrC5C,EACU,OAARY,GAAkC,OAAlBf,EAAOE,MACrBA,EAEMA,EAAAA,OA/DJa,OAAAA,GACH,IAAA,IACA,IAAA,IACSb,EAAAA,GACEkD,EAAAA,EAAcrC,IAEfiG,GAAAA,GAECjB,EAAAA,EACDhF,GAAAA,GAEX,MACC,IAAA,IACM,GAAA,KACP,MACC,IAAA,IACM,GAAA,KACP,MACC,IAAA,IACM,GAAA,KACP,MACC,IAAA,IACM,GAAA,KACP,MACC,IAAA,IACM,GAAA,KACP,MACC,IAAA,IACM,GAAA,KACP,MAEJ,QACQG,EAAaH,IAIA,KAHN,EAAA,WAAWE,QAAQF,MAId,GAAA,GAGRb,EAAQG,GAAUa,EAAalB,EAAOE,MAC9B,GAAA,EACDsD,EAAO,EAAPA,EAAW,WAAWvC,QAAQjB,EAAOE,MAIxC,OAAOe,QAAQF,IAAO,GAClBb,EAAQG,GACRa,EAAalB,EAAOE,MACjBsD,EAAO,EAAPA,EAAW,WAAWvC,QAAQjB,EAAOE,QAG7CsB,GAAAA,OAAOC,aAAa+B,IAEpBzC,GAAAA,MAWhB,CAAA,GAAIK,EAAiBL,EAAGgC,WAAW,IACtC,MAEOhC,GAAAA,GAQR,MAJO,KAAVgG,GACW,EAAA,GAAIlH,EAASqD,gBAAiB,WAGtC,CACG1D,KAAAA,EAAM4H,cACL1B,MAAAA,EACAyB,MAAAA,EACUF,gBAAAA,EACDC,eAAAA,EACJ/G,WAAAA,EACDC,UAAAA,EACJ8B,MAAAA,EACFhC,IAAAA,GAoRE4G,GAMA,KAAP/F,EACID,EAAed,EAAO+C,WAAW7C,EAAQ,IAClC4E,IAEJX,IAGPrD,EAAeC,GACR+D,IAIPrE,EAAMgE,UAAmB,KAAP1D,EA7GjBsG,WACDC,IAAAA,EACAC,EAIA,KADQ9G,EAAAA,EAAMkE,OAAOlE,EAAMkE,OAAOtE,OAAS,IAGpCkG,OAAAA,IAEPe,GAAmB,eAAnBA,EAAUtF,KAAuB,CAC7BsF,GAAoB,MAApBA,EAAUrF,MACHkC,OAAAA,IAEPmD,GAAoB,MAApBA,EAAUrF,MAENsF,QADS9G,EAAAA,EAAMkE,OAAOlE,EAAMiE,eAAiB,KAErB,YAApB6C,EAAWvF,MACW,OAArBuF,EAAWtF,OACU,UAArBsF,EAAWtF,OACU,QAArBsF,EAAWtF,OACU,SAArBsF,EAAWtF,MAGbkC,IAFIoC,IAIXe,GAAoB,MAApBA,EAAUrF,MAAe,CAGrBxB,GAAAA,EAAMkE,OAAOlE,EAAMmE,eAAiB,IACgB,YAAhDnE,EAAMkE,OAAOlE,EAAMmE,eAAiB,GAAG5C,MAGvC,KADSvB,EAAAA,EAAMkE,OAAOlE,EAAMmE,eAAiB,IAEtCT,OAAAA,QAER,CAAA,IAAI1D,EAAMkE,OAAOlE,EAAMmE,eAAiB,IACS,YAAhDnE,EAAMkE,OAAOlE,EAAMmE,eAAiB,GAAG5C,KAOpCmC,OAAAA,IAJH,KADS1D,EAAAA,EAAMkE,OAAOlE,EAAMmE,eAAiB,IAEtC2B,OAAAA,IAOX7G,OAAAA,EAAauB,QAAQsG,EAAWtF,QAAU,EAEnCkC,IAGJoC,IAEJA,OAAAA,IAEPe,MAAmB,YAAnBA,EAAUtF,MAA0C,SAApBsF,EAAUrF,MACnCsE,IAEJpC,IAkDIkD,GAGJlD,IAGFqD,SAAAA,IACDpF,IAAAA,EAAKsE,EAAczE,EA0BhByE,OAxBPvD,IACM,EAAA,CACK,MAAA,CACGhD,KAAAA,EACED,OAAAA,EAAQE,IAIhBwG,EAAAA,IACJzE,EAAAA,IAAM,CACAhC,KAAAA,EACED,OAAAA,EAAQE,GAGhBsG,EAAM1E,OAASxC,EAAMqH,MACb7G,EAAAA,EAAOgD,MAAM0D,EAAMxE,MAAOwE,EAAMvE,KAClCwC,EAAAA,OAAOlC,KAAK,CACRhD,KAAAA,EAAUiH,EAAM1E,MACfC,MAAAA,EACA,MAAA,CAACyE,EAAMxE,MAAOwE,EAAMvE,KACtBC,IAAAA,KAINsE,EAGFe,SAAAA,IACDf,IAAAA,EAaGA,OAVCA,GADAnG,EAAAA,GACM4B,IACDuE,EAAAA,EAAMvG,WACPuG,EAAAA,EAAMtG,UAEL,OAAwB,IAAjBK,EAAMkE,OAA0B6C,IAAiBZ,IAE7DF,EAAAA,EAAMvE,IACDuE,EAAAA,EAAMvG,WACPuG,EAAAA,EAAMtG,UAEXsG,EAGFgB,SAAAA,IACDlB,IAAAA,EAAKmB,EAAMzF,EAEThC,EAAAA,EACCC,EAAAA,EACCC,EAAAA,EACK,OAAwB,IAAjBK,EAAMkE,OAA0B6C,IAAiBZ,IAC7DJ,EAAAA,EACKmB,EAAAA,EACDzF,EAAAA,EAGP0F,SAAAA,EAASD,EAAME,GACfF,KAAAA,KAAOA,EACPE,KAAAA,OAASA,EAGTC,SAAAA,EAAeC,EAAWC,EAAaL,EAAME,GAC7C3F,KAAAA,MAAQ,IAAI0F,EAASG,EAAWC,GAChC7F,KAAAA,IAAM,IAAIyF,EAASD,EAAME,GA8ZzBI,SAAAA,IACDzB,IAAAA,EAAKmB,EAAMzF,EAAOgG,EAWfA,OATDhI,EAAAA,EACCC,EAAAA,EACCC,EAAAA,EACR+C,IACQhD,EAAAA,IAAewH,EACfnB,EAAAA,EACKmB,EAAAA,EACDzF,EAAAA,EAELgG,EAKFC,SAAAA,EAAWzB,EAAO0B,GACnBC,IAAAA,EACAC,EAAOC,MAAMC,UAAUxF,MAAMyF,KAAKC,UAAW,GAC7CC,EAAMP,EAAcQ,QAChB,SACA,SAAUC,EAAO3I,GAENoI,OADApI,EAAAA,EAAQoI,EAAKjI,OAAQ,sCACrBiI,EAAKpI,KAiBlBmI,KAb0B,iBAArB3B,EAAMvG,aACL,EAAA,IAAIU,MAAM,QAAU6F,EAAMvG,WAAa,KAAOwI,IAChDzI,MAAQwG,EAAMxE,MACd/B,EAAAA,WAAauG,EAAMvG,WACnB0H,EAAAA,OAASnB,EAAMxE,MAAQ9B,EAAY,KAEjC,EAAA,IAAIS,MAAM,QAAUV,EAAa,KAAOwI,IAC1CzI,MAAQA,EACRC,EAAAA,WAAaA,EACb0H,EAAAA,OAAS3H,EAAQE,EAAY,GAGjC0I,EAAAA,YAAcH,EACdN,EAGDU,SAAAA,IACD,IACWC,EAAAA,MAAM,KAAMN,WACzB,MAAOvC,GACD1F,IAAAA,EAAMwI,OAGA9C,MAAAA,EAFA8C,EAAAA,OAAOxG,KAAK0D,IAUrB+C,SAAAA,EAAgBxC,GAiBjBA,GAhBAA,EAAM1E,OAASxC,EAAMqH,KACVH,EAAAA,EAAO7G,EAASsJ,eAG3BzC,EAAM1E,OAASxC,EAAMyF,gBACVyB,EAAAA,EAAO7G,EAASuJ,kBAG3B1C,EAAM1E,OAASxC,EAAM4H,eACVV,EAAAA,EAAO7G,EAASwJ,kBAG3B3C,EAAM1E,OAASxC,EAAMsE,YACV4C,EAAAA,EAAO7G,EAASyJ,sBAG3B5C,EAAM1E,OAASxC,EAAMwE,QAAS,CAC1BuF,GA5lDHA,SAAqB1H,GAClBA,OAAAA,GACH,IAAA,QACA,IAAA,OACA,IAAA,SACA,IAAA,UACA,IAAA,SACA,IAAA,QACM,OAAA,EACX,QACW,OAAA,GAklDH0H,CAAqB7C,EAAMzE,OAChByE,EAAAA,EAAO7G,EAAS2J,yBACxB,GAAIvJ,GAAU2B,EAAyB8E,EAAMzE,OAEhD,YADmByE,EAAAA,EAAO7G,EAAS4J,oBAG5B/C,EAAAA,EAAO7G,EAASqD,gBAAiBwD,EAAMzE,OAI3CyE,EAAAA,EAAO7G,EAASqD,gBAAiBwD,EAAMzE,OAM7CyH,SAAAA,EAAOzH,GACRyE,IAAAA,EAAQe,IACRf,EAAM1E,OAASxC,EAAMqF,YAAc6B,EAAMzE,QAAUA,GACnCyE,EAAAA,GAOfiD,SAAAA,EAAcC,GACflD,IAAAA,EAAQe,IACRf,EAAM1E,OAASxC,EAAMwE,SAAW0C,EAAMzE,QAAU2H,GAChClD,EAAAA,GAMfmD,SAAAA,EAAM5H,GACJ1B,OAAAA,EAAUyB,OAASxC,EAAMqF,YAActE,EAAU0B,QAAUA,EAK7D6H,SAAAA,EAAaF,GACXrJ,OAAAA,EAAUyB,OAASxC,EAAMwE,SAAWzD,EAAU0B,QAAU2H,EA0B1DG,SAAAA,KACDpC,IAAAA,EAAMqC,EAAW9J,EAAO+J,EAAgB9J,EACxC+J,EAAe9J,EAAW+J,EAAe5J,EAGzCP,GAA6B,KAA7BA,EAAO+C,WAAW7C,IAAmB2J,EAAM,KAC3CpC,QADAzH,CAOAG,GAFGA,EAAAA,EACPgD,IACIhD,IAAewH,EAKf,OAJQqC,EAAAA,EACKC,EAAAA,EACDC,EAAAA,OACAC,EAAAA,GAIZ5J,EAAUyB,OAASxC,EAAMqH,KAAQgD,EAAM,MACvBtJ,EAAAA,IAMf6J,SAAAA,GAAeC,GACbA,OAAAA,EAAKrI,OAASrC,EAAOmE,YAAcuG,EAAKrI,OAASrC,EAAO2K,iBA+B1DC,SAAAA,GAAsBC,EAAOC,GAC9BC,IAAAA,EAAgBnF,EAAMoF,EASnBrK,OAPUL,EAAAA,EACJM,EAAAA,EACNqK,EAAAA,KACHH,GAASxK,GAAU6B,EAAiB0I,EAAM,GAAGK,OAC1BJ,EAAAA,EAAO5K,EAASiL,iBAE9BJ,EAAAA,EACFpK,EAASyK,QAAQzK,EAAS0K,yBAAyB,KAAMR,EAAO,GAAIjF,GAAOoF,GAG7EM,SAAAA,KACDvE,IAAAA,EAAOiE,EAQPjE,OANSnG,EAAAA,GACLkH,EAAAA,KAKEzF,OAASxC,EAAM4H,eAAiBV,EAAM1E,OAASxC,EAAMyF,gBACvDhF,GAAUyG,EAAMS,OACGT,EAAAA,EAAO7G,EAASqL,oBAEhC5K,EAASyK,QAAQzK,EAAS6K,cAAczE,GAAQiE,IAGpDrK,EAASyK,QAAQzK,EAAS8K,iBAAiB1E,EAAMzE,OAAQ0I,GAG3DU,SAAAA,KACD3E,IAAAA,EAAO4E,EAAKzJ,EAAII,EAAOuI,EAAOG,EAK9BjE,OAFSnG,EAAAA,GADLA,EAAAA,GAGEyB,OAASxC,EAAMsE,YAEhBmH,EAAAA,KAIe,QAAhBvE,EAAMzE,OAAoB4H,EAAM,KAOhB,QAAhBnD,EAAMzE,OAAoB4H,EAAM,MAe7B,EAAA,KACC0B,EAAAA,KACDjL,EAASyK,QAAQzK,EAASkL,eAAe,OAAQ3J,EAAII,GAAQ0I,KAhB1DM,EAAAA,KACC,EAAA,MACC1K,EAAAA,GACEyB,OAASxC,EAAMsE,YACd,EAAA,KACY4C,EAAAA,EAAO7G,EAASqD,gBAAiBwD,EAAMzE,OAClDsI,EAAAA,GAAsB,MAEtB,EAAA,CAAEkB,MACH,EAAA,KACClB,EAAAA,GAAsBC,EAAO9D,IAElCpG,EAASyK,QAAQzK,EAASkL,eAAe,MAAOF,EAAKrJ,GAAQ0I,KAnB9DM,EAAAA,KACC,EAAA,KACA,EAAA,KACCV,EAAAA,GAAsB,IACvBjK,EAASyK,QAAQzK,EAASkL,eAAe,MAAOF,EAAKrJ,GAAQ0I,KAqBxEjE,EAAM1E,OAASxC,EAAMqH,KAAOH,EAAM1E,OAASxC,EAAMqF,YAG3CoG,EAAAA,KACC,EAAA,KACCM,EAAAA,KACDjL,EAASyK,QAAQzK,EAASkL,eAAe,OAAQF,EAAKrJ,GAAQ0I,SALrDjE,EAAAA,GA2EfgF,SAAAA,KACD1J,IAAAA,EAAM0E,EAAO2D,EAAMM,EAEnBd,GAAAA,EAAM,KACC8B,OAnBNA,WACDtB,IAAAA,EAQGA,OANA,EAAA,KAEAuB,EAAAA,KAEA,EAAA,KAEAvB,EAUIsB,GAGP9B,GAAAA,EAAM,KACCgC,OApLNA,WACDC,IAAenB,EAAfmB,EAAW,GAKR,IAHMvL,EAAAA,EACN,EAAA,MAECsJ,EAAM,MACNA,EAAM,MACNpC,IACShF,EAAAA,KAAK,QAELA,EAAAA,KAAK8I,MAET1B,EAAM,MACA,EAAA,MAOZvJ,OAFPmH,IAEOnH,EAASyK,QAAQzK,EAASyL,sBAAsBD,GAAWnB,GA+JvDkB,GAGPhC,GAAAA,EAAM,KACCmC,OA9ENA,WACDC,IAAiBC,EAAUrB,EAAMS,EAAKa,EAAmCxB,EAAzEsB,EAAa,GAA+BG,EAAM,GAAIC,EAAW7K,OAM9D,IAJMjB,EAAAA,EAEN,EAAA,MAECsJ,EAAM,MAICqC,GAHAb,EAAAA,MAEEC,IAAItJ,OAASrC,EAAOmE,WACtBoI,EAASZ,IAAIT,KAEbwB,EAASH,EAASZ,IAAIrJ,OAEzBiK,EAAkB,SAAlBA,EAASC,KAAmBvM,EAAa0M,KAA0B,QAAlBJ,EAASC,KAAkBvM,EAAa2M,IAAM3M,EAAa4M,IAE9G,EAAA,IAAM3B,EACR4B,OAAOjE,UAAUkE,eAAejE,KAAK2D,EAAKd,IACtCc,EAAId,KAAS1L,EAAa0M,KACtBrM,GAAUkM,IAASvM,EAAa0M,KACb,EAAA,GAAIzM,EAAS8M,yBACzBR,IAASvM,EAAa0M,MACV,EAAA,GAAIzM,EAAS+M,sBAGhCT,IAASvM,EAAa0M,KACH,EAAA,GAAIzM,EAAS+M,sBACzBR,EAAId,GAAOa,GACC,EAAA,GAAItM,EAASgN,gBAGpCvB,EAAAA,IAAQa,GAERb,EAAAA,GAAOa,EAGJ1J,EAAAA,KAAKyJ,GAEXrC,EAAM,MACA,EAAA,KAMRvJ,OAFA,EAAA,KAEAA,EAASyK,QAAQzK,EAASwM,uBAAuBb,GAAatB,GAgC1DqB,GAMPhK,GAHGzB,EAAAA,EAAUyB,KACJzB,EAAAA,EAETyB,IAASxC,EAAMsE,WACPxD,EAAAA,EAAS8K,iBAAiB3D,IAAMxF,YACrC,GAAID,IAASxC,EAAM4H,eAAiBpF,IAASxC,EAAMyF,eAClDhF,GAAUM,EAAU4G,OACD5G,EAAAA,EAAWV,EAASqL,oBAEpC5K,EAAAA,EAAS6K,cAAc1D,UAC3B,GAAIzF,IAASxC,EAAMwE,QAAS,CAC3B8F,GAAAA,EAAa,YACNiD,OAkuCVA,WACDrG,IAAAA,EAAkBsG,EAAUC,EAAiBrM,EAASsM,EAAkB3H,EAAMmF,EAAgBC,EAAvF9I,EAAK,KAA+CsL,EAAS,GAE3D5M,EAAAA,EACC,EAAA,YAETsJ,EAAM,OACCtJ,EAAAA,EACHkL,EAAAA,KACDxL,EACI6B,EAAiB4E,EAAMzE,QACJyE,EAAAA,EAAO7G,EAASuN,oBAGnCtL,EAAiB4E,EAAMzE,QACLyE,EAAAA,EACR7G,EAAAA,EAASuN,oBACZxL,EAAyB8E,EAAMzE,SACpByE,EAAAA,EACR7G,EAAAA,EAAS4J,qBAKzB4D,EAAAA,GAAYJ,GACTC,EAAAA,EAAIC,OACFD,EAAAA,EAAIF,SACGE,EAAAA,EAAID,gBAClBC,EAAItM,UACMsM,EAAAA,EAAItM,SAGDX,EAAAA,EACV2K,EAAAA,KACH3K,GAAUgN,GACCA,EAAAA,EAAiBrM,GAE5BX,GAAU+M,GACSA,EAAAA,EAAUpM,GAI1BN,OAFEoK,EAAAA,EAEFpK,EAASyK,QAAQzK,EAAS0K,yBAAyBnJ,EAAIsL,EAAQ,GAAI5H,GAAOoF,GA5wClEoC,GAEPjD,EAAa,SACbrC,IACOnH,EAAAA,EAASgN,wBAEA7F,EAAAA,UAEbzF,IAASxC,EAAM0E,iBACduD,EAAAA,KACFxF,MAAyB,SAAhByE,EAAMzE,MACd3B,EAAAA,EAAS6K,cAAczE,IACvB1E,IAASxC,EAAMyE,cACdwD,EAAAA,KACFxF,MAAQ,KACP3B,EAAAA,EAAS6K,cAAczE,IACvBmD,EAAM,MAAQA,EAAM,OAEhBvJ,OADiB,IAAjBG,EAAMkE,OACNrE,EAAS6K,cAAc5E,KAEvBjG,EAAS6K,cAAc7F,KAElCoC,KAEgBD,EAAAA,KAGbnH,OAAAA,EAASyK,QAAQV,EAAMM,GAKzB4C,SAAAA,KACDjF,IAAAA,EAAO,GAIP,GAFG,EAAA,MAEFuB,EAAM,KACA3J,KAAAA,EAAQG,IACNoC,EAAAA,KAAK8I,OACN1B,EAAM,OAGH,EAAA,KAMRvB,OAFA,EAAA,KAEAA,EAGFkF,SAAAA,KACD9G,IAAAA,EAAOiE,EASJrK,OAPMC,EAAAA,EA3gCRkN,SAAiB/G,GACfA,OAAAA,EAAM1E,OAASxC,EAAMsE,YACxB4C,EAAM1E,OAASxC,EAAMwE,SACrB0C,EAAM1E,OAASxC,EAAM0E,gBACrBwC,EAAM1E,OAASxC,EAAMyE,YA0gCpBwJ,CAFGhG,EAAAA,MAGYf,EAAAA,GAGbpG,EAASyK,QAAQzK,EAAS8K,iBAAiB1E,EAAMzE,OAAQ0I,GAG3D+C,SAAAA,KAGEF,OAFA,EAAA,KAEAA,KAGFG,SAAAA,KACDtD,IAAAA,EAQGA,OANA,EAAA,KAEAuB,EAAAA,KAEA,EAAA,KAEAvB,EAGFuD,SAAAA,KACDC,IAAAA,EAAQvF,EAAMqC,EAOXrK,OALMC,EAAAA,EACC,EAAA,OACLuN,EAiCJA,WACDzD,IAAAA,EAAM6B,EAAUvB,EACbnK,EAAAA,EAAMuN,QAAS,qDAETxN,EAAAA,EAENuJ,EAAAA,EAAa,OAAS8D,KAAuBlC,KAE7C7B,KAAAA,EAAM,MAAQA,EAAM,MACnBA,EAAM,MACK8D,EAAAA,KACJrN,EAAAA,EAAS0N,uBAAuB,IAAK3D,EAAM6B,KAEvCwB,EAAAA,KACJpN,EAAAA,EAAS0N,uBAAuB,IAAK3D,EAAM6B,IAE7CnB,EAAAA,QAAQV,EAAMM,GAEpBN,OAAAA,EAnDEyD,GACFjE,EAAAA,EAAM,KAAO0D,KAAmB,GAEhCjN,EAASyK,QAAQzK,EAAS2N,oBAAoBJ,EAAQvF,GAAOqC,GAqD/DuD,SAAAA,KACD7D,IAAAA,EAAM3D,EAAOiE,EAAapK,EAoBvB8J,OAlBA8D,EArDFA,WACD9D,IAAAA,EAAM/B,EAAM4D,EAAUvB,EAAYyD,EAAkB5N,EAAMuN,QAMrD,IAJIxN,EAAAA,EACPwN,EAAAA,SAAU,EACTjE,EAAAA,EAAa,OAAS8D,KAAuBlC,OAE3C,CACD7B,GAAAA,EAAM,KACK6D,EAAAA,KACJpN,EAAAA,EAAS0N,uBAAuB,IAAK3D,EAAM6B,QAC/C,GAAIrC,EAAM,KACN0D,EAAAA,KACAjN,EAAAA,EAAS+N,qBAAqBhE,EAAM/B,OACxC,CAAA,IAAIuB,EAAM,KAIb,MAHW8D,EAAAA,KACJrN,EAAAA,EAAS0N,uBAAuB,IAAK3D,EAAM6B,GAI7CnB,EAAAA,QAAQV,EAAMM,GAIpBN,OAFD0D,EAAAA,QAAUK,EAET/D,EA6BA8D,GAEH5N,EAAUyB,OAASxC,EAAMqF,cACpBgF,EAAM,QAASA,EAAM,OAAW5B,MAE7BhI,GAAUoK,EAAKrI,OAASrC,EAAOmE,YAAchC,EAAiBuI,EAAKQ,OAChD,EAAA,GAAIhL,EAASyO,kBAG/BlE,GAAeC,IACG,EAAA,GAAIxK,EAAS0O,wBAG5B9G,EAAAA,IACDnH,EAAAA,EAASyK,QAAQzK,EAASkO,wBAAwB9H,EAAMzE,MAAOoI,GAAOM,KAI9EN,EAKFoE,SAAAA,KACD/H,IAAAA,EAAO2D,EAAMM,EAsCVN,OApCH9J,EAAUyB,OAASxC,EAAMqF,YAActE,EAAUyB,OAASxC,EAAMwE,QACzDkK,EAAAA,KACArE,EAAM,OAASA,EAAM,OACftJ,EAAAA,EACLkH,EAAAA,IACDgH,EAAAA,KAEHxO,GAAUoK,EAAKrI,OAASrC,EAAOmE,YAAchC,EAAiBuI,EAAKQ,OAChD,EAAA,GAAIhL,EAAS6O,iBAG/BtE,GAAeC,IACG,EAAA,GAAIxK,EAAS0O,wBAG7BjO,EAAAA,EAASqO,sBAAsBjI,EAAMzE,MAAOoI,GAC5C/J,EAAAA,EAASyK,QAAQV,EAAMM,IACvBd,EAAM,MAAQA,EAAM,MAAQA,EAAM,MAAQA,EAAM,MAC1CtJ,EAAAA,EACLkH,EAAAA,IACDgH,EAAAA,KACAnO,EAAAA,EAASqO,sBAAsBjI,EAAMzE,MAAOoI,GAC5C/J,EAAAA,EAASyK,QAAQV,EAAMM,IACvBb,EAAa,WAAaA,EAAa,SAAWA,EAAa,WACzDvJ,EAAAA,EACLkH,EAAAA,IACDgH,EAAAA,KACAnO,EAAAA,EAASqO,sBAAsBjI,EAAMzE,MAAOoI,GAC5C/J,EAAAA,EAASyK,QAAQV,EAAMM,GAC1B1K,GAA4B,WAAlBoK,EAAKuE,UAAyBvE,EAAKwE,SAAS7M,OAASrC,EAAOmE,YACnD,EAAA,GAAIjE,EAASiP,eAG7BZ,EAAAA,KAGJ7D,EAGF0E,SAAAA,GAAiBrI,EAAOqH,GACzBiB,IAAAA,EAAO,EAEPtI,GAAAA,EAAM1E,OAASxC,EAAMqF,YAAc6B,EAAM1E,OAASxC,EAAMwE,QACjD,OAAA,EAGH0C,OAAAA,EAAMzE,OACT,IAAA,KACM,EAAA,EACP,MAEC,IAAA,KACM,EAAA,EACP,MAEC,IAAA,IACM,EAAA,EACP,MAEC,IAAA,IACM,EAAA,EACP,MAEC,IAAA,IACM,EAAA,EACP,MAEC,IAAA,KACA,IAAA,KACA,IAAA,MACA,IAAA,MACM,EAAA,EACP,MAEC,IAAA,IACA,IAAA,IACA,IAAA,KACA,IAAA,KACA,IAAA,aACM,EAAA,EACP,MAEC,IAAA,KACM8L,EAAAA,EAAU,EAAI,EACrB,MAEC,IAAA,KACA,IAAA,KACA,IAAA,MACM,EAAA,EACP,MAEC,IAAA,IACA,IAAA,IACM,EAAA,EACP,MAEC,IAAA,IACA,IAAA,IACA,IAAA,IACM,EAAA,GAOJiB,OAAAA,EAsEFC,SAAAA,KACD5E,IAAAA,EAAM+D,EAAiBc,EAAYC,EAAWxE,EAmB3CN,OAjBM9J,EAAAA,EAEN6O,EAhEFA,WACDC,IAAAA,EAAQC,EAASjF,EAAM3D,EAAOsI,EAAMO,EAAOC,EAAOZ,EAAUa,EAAMnM,EAOlE0L,GALKzO,EAAAA,EACFkO,EAAAA,KAIM,KADNM,EAAAA,GADCxO,EAAAA,EACuBC,EAAMuN,UAE1B0B,OAAAA,EAUJ,IARDT,EAAAA,KAAOA,EACbvH,IAEU,EAAA,CAAC4H,EAAQ9O,GAGX,EAAA,CAACkP,EAAM/I,EAFP+H,EAAAA,OAIAO,EAAOD,GAAiBxO,EAAWC,EAAMuN,UAAY,GAAG,CAGpDwB,KAAAA,EAAMlP,OAAS,GAAO2O,GAAQO,EAAMA,EAAMlP,OAAS,GAAG2O,MAClDO,EAAAA,EAAM5I,MACH4I,EAAAA,EAAM5I,MAAM1E,MAChBsN,EAAAA,EAAM5I,MACNrG,EAAAA,EAASoP,uBAAuBd,EAAUa,EAAMD,GAC/C7I,EAAAA,MACC2I,EAAAA,EAAQA,EAAQjP,OAAS,GACzB0K,EAAAA,QAAQV,EAAMgF,GACjB5M,EAAAA,KAAK4H,IAIP5C,EAAAA,KACFuH,KAAOA,EACPvM,EAAAA,KAAKiE,GACHjE,EAAAA,KAAKlC,GACNkO,EAAAA,KACDhM,EAAAA,KAAK4H,GAOR/G,IAFAiM,EAAAA,EADHA,EAAAA,EAAMlP,OAAS,GAEXsG,EAAAA,MACDrD,EAAI,GACAhD,EAAAA,EAASoP,uBAAuBH,EAAMjM,EAAI,GAAGrB,MAAOsN,EAAMjM,EAAI,GAAI+G,GACpE,GAAA,EACIiF,EAAAA,EAAQ3I,MACRoE,EAAAA,QAAQV,EAAMgF,GAGpBhF,OAAAA,EAWA+E,GAEHvF,EAAM,OACNpC,IACkBjH,EAAAA,EAAMuN,QAClBA,EAAAA,SAAU,EACHxC,EAAAA,KACPwC,EAAAA,QAAUK,EACT,EAAA,KACK7C,EAAAA,KAELjL,EAAAA,EAASqP,4BAA4BtF,EAAM6E,EAAYC,GACrDpE,EAAAA,QAAQV,EAAMM,IAGpBN,EAKFkB,SAAAA,KACD7E,IAAAA,EAAO+I,EAAMD,EAAOI,EAAMjF,EApnB1BkF,EA2oBGD,OArBCrP,EAAAA,EACKA,EAAAA,EAENkP,EAAAA,EAAOR,KAvnBV1O,EAAUyB,OAASxC,EAAMqF,YAIf,OADTtE,EAAAA,EAAU0B,QAEJ,OAAP4N,GACO,OAAPA,GACO,OAAPA,GACO,OAAPA,GACO,OAAPA,GACO,QAAPA,GACO,QAAPA,GACO,SAAPA,GACO,OAAPA,GACO,OAAPA,GACO,OAAPA,IA4mBKzF,GAAeqF,IACG,EAAA,GAAI5P,EAAS0O,wBAIhCtO,GAAUwP,EAAKzN,OAASrC,EAAOmE,YAAchC,EAAiB2N,EAAK5E,OAChDnE,EAAAA,EAAO7G,EAASiQ,qBAG/BrI,EAAAA,IACA8D,EAAAA,KACDjL,EAAAA,EAASyK,QAAQzK,EAASyP,2BAA2BrJ,EAAMzE,MAAOwN,EAAMD,GAAQ7E,IAGpFiF,EAKFhE,SAAAA,KACDvB,IAAAA,EAAMM,EAAapK,EAInBsJ,GAFG0B,EAAAA,KAEH1B,EAAM,KAAM,CAGL3J,IAFAI,EAAAA,EAAS0P,yBAAyB,CAAE3F,IAEpCnK,EAAQG,GACNwJ,EAAM,MAGXpC,IACKwI,EAAAA,YAAYxN,KAAK8I,MAGjBR,EAAAA,QAAQV,EAAMM,GAGpBN,OAAAA,EAuBF6F,SAAAA,KACDC,IAAAA,EAAOxF,EASJrK,OAPMC,EAAAA,EACN,EAAA,KAEC6P,EAxBHA,WAIElQ,IAHHmQ,IACAC,EADAD,EAAO,GAGJnQ,EAAQG,IACPwJ,EAAM,WAIe,KADb0G,EAAAA,OAIP9N,EAAAA,KAAK6N,GAGPD,OAAAA,EASCD,GAED,EAAA,KAEA9P,EAASyK,QAAQzK,EAASkQ,qBAAqBL,GAAQxF,GAKzDc,SAAAA,KACD/E,IAAAA,EAAOiE,EASJrK,OAPMC,EAAAA,GACLkH,EAAAA,KAEEzF,OAASxC,EAAMsE,YACL4C,EAAAA,GAGbpG,EAASyK,QAAQzK,EAAS8K,iBAAiB1E,EAAMzE,OAAQ0I,GAG3D8F,SAAAA,GAAyBtE,GAC1BuE,IAAa7O,EAAI8I,EAAjB+F,EAAO,KAkBJpQ,OAhBMC,EAAAA,EACRkL,EAAAA,KAGDxL,GAAU6B,EAAiBD,EAAGgJ,OACX,EAAA,GAAIhL,EAAS8Q,eAGvB,UAATxE,GACO,EAAA,KACAZ,EAAAA,MACA1B,EAAM,OACbpC,IACO8D,EAAAA,MAGJjL,EAASyK,QAAQzK,EAASsQ,yBAAyB/O,EAAI6O,GAAO/F,GAGhEkG,SAAAA,GAA6B1E,GAC9BkE,IAAAA,EAAO,GAER,EAAA,CAEK,GADC5N,EAAAA,KAAKgO,GAAyBtE,KAC9BtC,EAAM,KACP,MAEJpC,UACKvH,EAAQG,GAEVgQ,OAAAA,EAqIFS,SAAAA,KACDJ,IAAAA,EAAMnP,EAAMwP,EAAQtB,EAAMD,EAAOjK,EAAMyL,EAVvCtK,EAAOuK,EAActG,EAUkCyD,EAAkB5N,EAAMuN,QAkE3E,OAhEDxM,EAAAA,EAAOwP,EAAS,KAET,EAAA,OAEP,EAAA,KAEHlH,EAAM,KACNpC,KAEIqC,EAAa,QAAUA,EAAa,QAC9BiE,EAAAA,SAAU,EApBXxN,EAAAA,EACLkH,EAAAA,IACOoJ,EAAAA,KAmBAK,EAjBR5Q,EAASyK,QAAQzK,EAAS6Q,0BAA0BF,EAAcvK,EAAMzE,OAAQ0I,GAkBzEoD,EAAAA,QAAUK,EAEiB,IAA7BsC,EAAKO,aAAa5Q,QAAgByJ,EAAa,QAC/CrC,IACOiJ,EAAAA,EACC9E,EAAAA,KACD,EAAA,QAGLmC,EAAAA,SAAU,EACTnC,EAAAA,KACDmC,EAAAA,QAAUK,EAEZtE,EAAa,QAERM,GAAesG,IACG,EAAA,GAAI7Q,EAASuR,mBAGpC3J,IACOiJ,EAAAA,EACC9E,EAAAA,KACD,EAAA,YAIK,IAAT6D,GACA,EAAA,WAIK,IAATA,IAEF5F,EAAM,OACA+B,EAAAA,MAEJ,EAAA,KAEF/B,EAAM,OACE+B,EAAAA,OAIV,EAAA,KAEUpL,EAAAA,EAAM6Q,YACjBA,EAAAA,aAAc,EAEbC,EAAAA,KAEDD,EAAAA,YAAcL,OAEI,IAATvB,EACPnP,EAASiR,mBAAmBb,EAAMnP,EAAMwP,EAAQxL,GAChDjF,EAASkR,qBAAqB/B,EAAMD,EAAOjK,GAwJ9CkM,SAAAA,KACDlQ,IAAAA,EAAuB+O,EAAW3F,EAA5BuE,EAAa,GAYhBhP,IAVMK,EAAAA,EACTuJ,EAAa,YACbrC,IACO,EAAA,OAEO,EAAA,QACPmE,EAAAA,MAEJ,EAAA,KAEA1L,EAAQG,KACPwJ,EAAM,MAAQC,EAAa,YAAcA,EAAa,UAG9CwH,EAAAA,KACD7O,EAAAA,KAAK6N,GAGbhQ,OAAAA,EAASyK,QAAQzK,EAASoR,iBAAiBnQ,EAAM2N,GAAavE,GA0FhEgH,SAAAA,KACDxB,IAAAA,EAtBA3F,EAAOjF,EAAMoF,EAsBNiH,EAAW,GAAIC,EAAY,KAmB/BvR,OAjBO,EAAA,OAEN4P,EAAAA,KAEJpG,EAAa,UACJrH,EAAAA,MA3BAlC,EAAAA,EACC,EAAA,SAEP,EAAA,KACHsJ,EAAM,MACUtJ,EAAAA,GAGZkL,EAAAA,KAEJxL,GAAU6B,EAAiB0I,EAAMK,OACd,EAAA,GAAIhL,EAASiS,qBAG7B,EAAA,KACA5B,EAAAA,KACA5P,EAASyK,QAAQzK,EAASyR,kBAAkBvH,EAAOjF,GAAOoF,KAc7Db,EAAa,aACbrC,IACYyI,EAAAA,MAGQ,IAApB0B,EAASvR,QAAiBwR,GACf,EAAA,GAAIhS,EAASmS,kBAGrB1R,EAAS2R,mBAAmB9B,EAAO,GAAIyB,EAAUC,GAenDP,SAAAA,KACDtP,IACAqI,EACA6H,EACA5G,EACAX,EArfAsG,EAoSApC,EA5NAtJ,EAAMhE,EAAMyP,EAyaZhP,EAAOzB,EAAUyB,KAUjBA,GAJAA,IAASxC,EAAMqH,KACCtG,EAAAA,GAGhByB,IAASxC,EAAMqF,YAAkC,MAApBtE,EAAU0B,MAChCiO,OAAAA,KAKPlO,GAFSzB,EAAAA,EAETyB,IAASxC,EAAMqF,WACPtE,OAAAA,EAAU0B,OACb,IAAA,IACM3B,OAAAA,EAASyK,SApejB,EAAA,KACAzK,EAAS6R,wBAmeuCxH,GAC9C,IAAA,IACMrK,OAAAA,EAASyK,QAhenBqH,WACD/H,IAAAA,EAAOuB,KAEJtL,OADPyJ,KACOzJ,EAAS+R,0BAA0BhI,GA6dV+H,GAA4BzH,GAMxD3I,GAAAA,IAASxC,EAAMwE,QACPzD,OAAAA,EAAU0B,OACb,IAAA,QACM3B,OAAAA,EAASyK,QAxRnBuH,WACDC,IAAcjH,EAAdiH,EAAQ,KAKRvS,OAHU,EAAA,SAGmB,KAA7BA,EAAO+C,WAAW7C,IAClBuH,IAEMjH,EAAM6Q,aAAe7Q,EAAMgS,UAClB,EAAA,GAAI3S,EAAS4S,cAGrBnS,EAASoS,qBAAqB,OAGrCzK,KACMzH,EAAM6Q,aAAe7Q,EAAMgS,UAClB,EAAA,GAAI3S,EAAS4S,cAGrBnS,EAASoS,qBAAqB,QAGrCnS,EAAUyB,OAASxC,EAAMsE,aAGnB,EAAA,KAFE2H,EAAAA,MAEUZ,KACb4B,OAAOjE,UAAUkE,eAAejE,KAAKjI,EAAMmS,SAAUrH,IAC3C,EAAA,GAAIzL,EAAS+S,aAAcL,EAAM1H,OAIpDd,KAEc,OAAVwI,GAAoB/R,EAAM6Q,aAAe7Q,EAAMgS,UACpC,EAAA,GAAI3S,EAAS4S,cAGrBnS,EAASoS,qBAAqBH,IAiPLD,GAAuB3H,GAC9C,IAAA,WACMrK,OAAAA,EAASyK,QAtUnB8H,WACDN,IAAcjH,EAAdiH,EAAQ,KAKRvS,OAHU,EAAA,YAGmB,KAA7BA,EAAO+C,WAAW7C,IAClBuH,IAEKjH,EAAM6Q,aACI,EAAA,GAAIxR,EAASiT,iBAGrBxS,EAASyS,wBAAwB,OAGxC9K,KACKzH,EAAM6Q,aACI,EAAA,GAAIxR,EAASiT,iBAGrBxS,EAASyS,wBAAwB,QAGxCxS,EAAUyB,OAASxC,EAAMsE,aAGnB,EAAA,KAFE2H,EAAAA,MAEUZ,KACb4B,OAAOjE,UAAUkE,eAAejE,KAAKjI,EAAMmS,SAAUrH,IAC3C,EAAA,GAAIzL,EAAS+S,aAAcL,EAAM1H,OAIpDd,KAEc,OAAVwI,GAAmB/R,EAAM6Q,aACd,EAAA,GAAIxR,EAASiT,iBAGrBxS,EAASyS,wBAAwBR,IA+RRM,GAA0BlI,GACjD,IAAA,WACMrK,OAAAA,EAASyK,SA5CV,EAAA,YAEdhB,KAEOzJ,EAAS0S,2BAwC0CrI,GACjD,IAAA,KACMrK,OAAAA,EAASyK,SA3cV,EAAA,MAEGvK,EAAAA,EAAM6Q,YACjBA,EAAAA,aAAc,EAEbC,EAAAA,KAEDD,EAAAA,YAAcL,EAEN,EAAA,SAEP,EAAA,KAEApF,EAAAA,KAEA,EAAA,KAEH/B,EAAM,MACNpC,IAGGnH,EAAS2S,uBAAuB1N,EAAMhE,IAsbYoJ,GAChD,IAAA,MACMrK,OAAAA,EAASyK,QAAQ+F,KAAqBnG,GAC5C,IAAA,WACMrK,OAAAA,EAASyK,QAAQmI,KAA4BvI,GACnD,IAAA,KACMrK,OAAAA,EAASyK,QA7enBoI,WACD5R,IAAAA,EAAM2N,EAAYC,EAmBf7O,OAjBO,EAAA,MAEP,EAAA,KAEAsL,EAAAA,KAEA,EAAA,KAEM0F,EAAAA,KAETxH,EAAa,SACbrC,IACY6J,EAAAA,MAEA,EAAA,KAGThR,EAAS8S,kBAAkB7R,EAAM2N,EAAYC,GAydpBgE,GAAoBxI,GAC3C,IAAA,SACMrK,OAAAA,EAASyK,SAzPpB8D,EAAW,KAED,EAAA,UAETrO,EAAM6S,gBACY,EAAA,GAAIxT,EAASyT,eAIH,KAA7BtT,EAAO+C,WAAW7C,IACdmB,EAAkBrB,EAAO+C,WAAW7C,EAAQ,KACjC0L,EAAAA,KACX7B,KACOzJ,EAASiT,sBAAsB1E,IAI1C5G,IACO3H,EAASiT,sBAAsB,OAGrC1J,EAAM,MACFA,EAAM,MAAQtJ,EAAUyB,OAASxC,EAAMqH,MAC7B+E,EAAAA,MAInB7B,KAEOzJ,EAASiT,sBAAsB1E,KA4NkBlE,GAC/C,IAAA,SACMrK,OAAAA,EAASyK,QAzKnByI,WACDC,IAAAA,EAAcC,EAAOC,EAAQC,EAAaC,EAc1ChK,GAZU,EAAA,UAEP,EAAA,KAEQ+B,EAAAA,KAER,EAAA,KAEA,EAAA,KAEC,EAAA,GAEJ/B,EAAM,KAECvJ,OADPmH,IACOnH,EAASwT,sBAAsBL,EAAcC,GAOjDxT,IAJOM,EAAAA,EAAMgS,SACdA,EAAAA,UAAW,EACF,GAAA,EAERtS,EAAQG,IACPwJ,EAAM,MAIU,QADX4H,EAAAA,MACElQ,OACHsS,GACW,EAAA,GAAIhU,EAASkU,0BAEb,GAAA,GAEbtR,EAAAA,KAAKkR,GAORrT,OAJDkS,EAAAA,SAAWoB,EAEV,EAAA,KAEAtT,EAASwT,sBAAsBL,EAAcC,GA+HpBF,GAAwB7I,GAC/C,IAAA,QACMrK,OAAAA,EAASyK,QA5HnBiJ,WACDnF,IAAAA,EAYGvO,OAVO,EAAA,SAEV2H,KACW,EAAA,GAAIpI,EAASoU,mBAGjBrI,EAAAA,KAEX7B,KAEOzJ,EAAS4T,qBAAqBrF,GA+GLmF,GAAuBrJ,GAC9C,IAAA,MACMrK,OAAAA,EAASyK,QAAQ4G,KAAqBhH,GAC5C,IAAA,MACMrK,OAAAA,EAASyK,SAniBV,EAAA,OAEC8F,EAAAA,KAEf9G,KAEOzJ,EAAS6Q,0BAA0BF,EAAc,QA6hBEtG,GACjD,IAAA,QACMrK,OAAAA,EAASyK,QArcnBoJ,WACD5S,IAAAA,EAAMgE,EAAMyL,EAiBT1Q,OAfO,EAAA,SAEP,EAAA,KAEAsL,EAAAA,KAEA,EAAA,KAEUpL,EAAAA,EAAM6Q,YACjBA,EAAAA,aAAc,EAEbC,EAAAA,KAEDD,EAAAA,YAAcL,EAEb1Q,EAAS8T,qBAAqB7S,EAAMgE,GAmbX4O,GAAuBxJ,GAC9C,IAAA,OACMrK,OAAAA,EAASyK,QAnOnBsJ,WACDC,IAAAA,EAAQ/O,EAkBLjF,OAhBHL,IAEAkD,IACmB,EAAA,GAAItD,EAAS0U,iBAGtB,EAAA,QAEP,EAAA,KAEE3I,EAAAA,KAEF,EAAA,KAEA0F,EAAAA,KAEAhR,EAASkU,oBAAoBF,EAAQ/O,GAgNZ8O,GAAsB1J,GASjDN,OAHEuB,EAAAA,MAGG5J,OAASrC,EAAOmE,YAAe+F,EAAM,MAC3CpC,IAEM,EAAA,IAAM4C,EAAKQ,KACb4B,OAAOjE,UAAUkE,eAAejE,KAAKjI,EAAMmS,SAAUrH,IAC1C,EAAA,GAAIzL,EAAS4U,cAAe,QAASpK,EAAKQ,MAGnD8H,EAAAA,SAASrH,IAAO,EACRgG,EAAAA,YACP9Q,EAAMmS,SAASrH,GACfhL,EAASyK,QAAQzK,EAASoU,uBAAuBrK,EAAM6H,GAAcvH,KAGhFZ,KAEOzJ,EAASyK,QAAQzK,EAAS+R,0BAA0BhI,GAAOM,IAK7DC,SAAAA,KACD+J,IAAAA,EAAoCjO,EAAkBuG,EACtD2H,EAAa5D,EAAgB4C,EAAaiB,EAAmBlK,EAD9CmK,EAAiB,GAM7B5U,IAHMK,EAAAA,EACN,EAAA,KAEAL,EAAQG,GACPE,EAAUyB,OAASxC,EAAM4H,gBAGrB7G,EAAAA,EAEQgQ,EAAAA,KACD9N,EAAAA,KAAKkS,GAChBA,EAAcI,WAAW/S,OAASrC,EAAOqV,UAK3B,eADNhV,EAAOgD,MAAM0D,EAAMxE,MAAQ,EAAGwE,EAAMvE,IAAM,IAEzC,GAAA,EACL8K,GACmBA,EAAAA,EAAiBpN,EAASqL,sBAG5C+B,GAAmBvG,EAAMS,QACRT,EAAAA,GAevBxG,IAVOM,EAAAA,EAAMmS,SACHnS,EAAAA,EAAM6Q,YACT7Q,EAAAA,EAAMgS,SACAhS,EAAAA,EAAM6S,eAEpBV,EAAAA,SAAW,GACXtB,EAAAA,aAAc,EACdmB,EAAAA,UAAW,EACXa,EAAAA,gBAAiB,EAEhBnT,EAAQG,IACPwJ,EAAM,WAImB,KADb0G,EAAAA,OAID9N,EAAAA,KAAKkS,GAUjBrU,OAPA,EAAA,KAEDqS,EAAAA,SAAWiC,EACXvD,EAAAA,YAAcL,EACdwB,EAAAA,SAAWoB,EACXP,EAAAA,eAAiBwB,EAEhBvU,EAASyK,QAAQzK,EAASkQ,qBAAqBsE,GAAiBnK,GAGlE0C,SAAAA,GAAYJ,GACbzC,IAAAA,EAAoB9D,EAAOsG,EAAUiI,EAAU3J,EAAK1K,EAA7CuM,EAAS,GAGhB,GAFG,EAAA,MAEFtD,EAAM,KAEA3J,IADI,EAAA,GACJA,EAAQG,IACHE,EAAAA,EACAkL,EAAAA,KACF,EAAA,IAAM/E,EAAMzE,MACdhC,GACI6B,EAAiB4E,EAAMzE,SACZyE,EAAAA,EACD7G,EAAAA,EAASiL,iBAEnB2B,OAAOjE,UAAUkE,eAAejE,KAAKwM,EAAU3J,KACpC5E,EAAAA,EACD7G,EAAAA,EAASqV,kBAEfjI,IACJnL,EAAiB4E,EAAMzE,QACLyE,EAAAA,EACR7G,EAAAA,EAASiL,iBACZlJ,EAAyB8E,EAAMzE,QACpByE,EAAAA,EACR7G,EAAAA,EAAS4J,oBACZgD,OAAOjE,UAAUkE,eAAejE,KAAKwM,EAAU3J,KACpC5E,EAAAA,EACR7G,EAAAA,EAASqV,kBAGpBzS,EAAAA,KAAK+H,GACHc,EAAAA,IAAO,GACZzB,EAAM,OAGH,EAAA,KAMR,OAFA,EAAA,KAEA,CACKsD,OAAAA,EACEH,SAAAA,EACOC,gBAAAA,EACRrM,QAAAA,GAIRsS,SAAAA,KACDrR,IAAAA,EAAIsL,EAAa5H,EAAMmB,EAAOsG,EAAUE,EAAKD,EAAiBrM,EAAS8J,EAAgBC,EAuCpFrK,OArCMC,EAAAA,EAEC,EAAA,YACNA,EAAAA,EACHkL,EAAAA,KACDxL,EACI6B,EAAiB4E,EAAMzE,QACJyE,EAAAA,EAAO7G,EAASuN,oBAGnCtL,EAAiB4E,EAAMzE,QACLyE,EAAAA,EACR7G,EAAAA,EAASuN,oBACZxL,EAAyB8E,EAAMzE,SACpByE,EAAAA,EACR7G,EAAAA,EAAS4J,oBAKlByD,GADHG,EAAAA,GAAYJ,IACLE,OACFD,EAAAA,EAAIF,SACGE,EAAAA,EAAID,gBAClBC,EAAItM,UACMsM,EAAAA,EAAItM,SAGDX,EAAAA,EACV2K,EAAAA,KACH3K,GAAUgN,GACCA,EAAAA,EAAiBrM,GAE5BX,GAAU+M,GACSA,EAAAA,EAAUpM,GAExB8J,EAAAA,EAEFpK,EAASyK,QAAQzK,EAAS6U,0BAA0BtT,EAAIsL,EAAQ,GAAI5H,GAAOoF,GAkD7E4F,SAAAA,KACDhQ,GAAAA,EAAUyB,OAASxC,EAAMwE,QACjBzD,OAAAA,EAAU0B,OACb,IAAA,QACA,IAAA,MACMmT,OAxwBejJ,EAwwBU5L,EAAU0B,MArwBrC1B,EAAAA,EAEC4L,EAAAA,GAEC0E,EAAAA,GAA6B1E,GAE5CpC,KAEOzJ,EAASyK,QAAQzK,EAAS6Q,0BAA0BF,EAAc9E,GAAOxB,GA8vBvE,IAAA,WACMuI,OAAAA,KACX,QACW5B,OAAAA,KA5wBV8D,IAAyBjJ,EAC1B8E,EAActG,EA+wBdpK,GAAAA,EAAUyB,OAASxC,EAAMqH,IAClByK,OAAAA,KA2CN+D,SAAAA,KACD9P,IAAAA,EAAMoF,EAQHrK,OANP6C,IACAuE,IACanH,EAAAA,EACJ,GAAA,EAEF+U,EA/CFA,WAGEpV,IAFHyU,IAAAA,EAAoCjO,EAAkBuG,EAAvC6H,EAAiB,GAE7B5U,EAAQG,IACHE,EAAAA,GACEyB,OAASxC,EAAM4H,gBAITmJ,EAAAA,KACD9N,EAAAA,KAAKkS,GAChBA,EAAcI,WAAW/S,OAASrC,EAAOqV,UAK3B,eADNhV,EAAOgD,MAAM0D,EAAMxE,MAAQ,EAAGwE,EAAMvE,IAAM,IAEzC,GAAA,EACL8K,GACmBA,EAAAA,EAAiBpN,EAASqL,sBAG5C+B,GAAmBvG,EAAMS,QACRT,EAAAA,GAKvBxG,KAAAA,EAAQG,QAGkB,KAFbkQ,EAAAA,OAKD9N,EAAAA,KAAKkS,GAEjBG,OAAAA,EAWAQ,GACAhV,EAASyK,QAAQzK,EAASiV,cAAchQ,GAAOoF,GAGjD6K,SAAAA,KACDlS,IAAAA,EAAGmS,EAAO/O,EAAO/B,EAAS,GAEzBrB,IAAAA,EAAI,EAAGA,EAAI7C,EAAMkE,OAAOtE,SAAUiD,EAE3B,EAAA,CACEmS,MAFFhV,EAAAA,EAAMkE,OAAOrB,IAELtB,KACLyT,MAAAA,EAAMxT,OAEbxB,EAAM8B,QACAA,EAAAA,MAAQkT,EAAMlT,OAEpB9B,EAAM2B,MACAA,EAAAA,IAAMqT,EAAMrT,KAEfK,EAAAA,KAAKiE,GAGV/B,EAAAA,OAASA,GA75GP,EAAA,KAZJ,EAAA,CACY,eAAA,EACX,IAAA,EACO,WAAA,EACH,QAAA,EACI,YAAA,EACG,eAAA,EACJ,WAAA,EACG,cAAA,EACI,kBAAA,IAIPT,gBAAkB,UACxB1E,EAAAA,EAAMqH,KAAO,QACbrH,EAAAA,EAAMsE,YAAc,aACpBtE,EAAAA,EAAMwE,SAAW,UACjBxE,EAAAA,EAAMyE,aAAe,OACrBzE,EAAAA,EAAMyF,gBAAkB,UACxBzF,EAAAA,EAAMqF,YAAc,aACpBrF,EAAAA,EAAM4H,eAAiB,SACvB5H,EAAAA,EAAM6G,mBAAqB,oBAGtB,EAAA,CAAC,IAAK,IAAK,IAAK,KAAM,SAAU,aAAc,MAC7C,SAAU,OAAQ,SAAU,QAAS,OADtC,IAGM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,OACjD,KAAM,KAAM,KAAM,IAJnB,IAMM,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MAAO,IACxD,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,IAAK,IAAK,MAAO,KAAM,KACvD,KAAM,IAAK,IAAK,KAAM,OAE7B,EAAA,CACiB,qBAAA,uBACL,gBAAA,kBACD,eAAA,iBACE,iBAAA,mBACF,eAAA,iBACA,eAAA,iBACH,YAAA,cACU,sBAAA,wBACJ,kBAAA,oBACD,iBAAA,mBACC,kBAAA,oBACH,eAAA,iBACK,oBAAA,sBACP,aAAA,eACE,eAAA,iBACK,oBAAA,sBACD,mBAAA,qBACR,WAAA,aACC,YAAA,cACJ,QAAA,UACS,iBAAA,mBACC,kBAAA,oBACD,iBAAA,mBACH,cAAA,gBACG,iBAAA,mBACT,QAAA,UACC,SAAA,WACO,gBAAA,kBACG,mBAAA,qBACH,gBAAA,kBACL,WAAA,aACI,eAAA,iBACA,eAAA,iBACF,aAAA,eACG,gBAAA,kBACC,iBAAA,mBACG,oBAAA,sBACD,mBAAA,qBACJ,eAAA,iBACD,cAAA,iBAGJ,EAAA,CACL,KAAA,EACD,IAAA,EACA,IAAA,GAIE,EAAA,CACW,gBAAA,sBACC,iBAAA,oBACA,iBAAA,oBACI,qBAAA,wBACF,mBAAA,2BACL,cAAA,0BACI,kBAAA,8BACL,cAAA,6BACM,mBAAA,wCACI,uBAAA,uCACL,kBAAA,mCACM,yBAAA,mDACP,iBAAA,qCACL,aAAA,uBACC,cAAA,oCACE,gBAAA,6BACH,aAAA,0BACC,cAAA,2BACE,eAAA,oDACK,oBAAA,6DACN,cAAA,4DACE,gBAAA,iEACD,gBAAA,8DACI,mBAAA,4DACA,mBAAA,iDACN,aAAA,sDACW,wBAAA,uEACH,qBAAA,4EACN,eAAA,4EACK,oBAAA,gEACH,iBAAA,oFACD,gBAAA,mFACG,mBAAA,8CAIjB,EAAA,CACqB,wBAAA,IAAIH,OAAO,s5BACZ,uBAAA,IAAIA,OAAO,0lCAkrClB,EAAA,CAEX,KAAA,aAEU,eAAA,SAAU0J,GAClB8F,IAAAA,EAAW9S,EAEXgN,KAAAA,EAAK5N,OAASrC,EAAOgW,SACjB/F,EAAKrK,KAAKlF,OAAS,GADvBuP,CAuBGnP,IAjBHA,EAAMmC,iBAAiBvC,OAAS,EAC5BI,EAAMmC,iBAAiB,GAAGL,MAAM,IAAMqN,EAAKrN,MAAM,IAC9B9B,EAAAA,EAAMmC,iBACnBA,EAAAA,iBAAmB,IAEnBA,EAAAA,iBAAiBvC,OAAS,EAGhCI,EAAMmV,iBAAiBvV,OAAS,GAC5BI,EAAMmV,iBAAiBnV,EAAMmV,iBAAiBvV,OAAS,GAAGuC,kBAC1DnC,EAAMmV,iBAAiBnV,EAAMmV,iBAAiBvV,OAAS,GAAGuC,iBAAiB,GAAGL,MAAM,IAAMqN,EAAKrN,MAAM,KACtF9B,EAAAA,EAAMmV,iBAAiBnV,EAAMmV,iBAAiBvV,OAAS,GAAGuC,wBACtEnC,EAAMmV,iBAAiBnV,EAAMmV,iBAAiBvV,OAAS,GAAGuC,kBAKlEnC,EAAMmV,iBAAiBvV,OAAS,GAAKI,EAAMmV,iBAAiBnV,EAAMmV,iBAAiBvV,OAAS,GAAGkC,MAAM,IAAMqN,EAAKrN,MAAM,IAC7G9B,EAAAA,EAAMmV,iBAAiBjP,MAGnC+O,EACIA,EAAU/S,iBAAmB+S,EAAU/S,gBAAgB+S,EAAU/S,gBAAgBtC,OAAS,GAAGkC,MAAM,IAAMqN,EAAKrN,MAAM,KAC/GI,EAAAA,gBAAkB+S,EAAU/S,uBAC1B+S,EAAU/S,iBAEdlC,EAAMkC,gBAAgBtC,OAAS,GAAKI,EAAMkC,gBAAgBlC,EAAMkC,gBAAgBtC,OAAS,GAAGkC,MAAM,IAAMqN,EAAKrN,MAAM,KACrHI,EAAAA,gBAAkBlC,EAAMkC,gBACvBA,EAAAA,gBAAkB,IAIxBC,IACKA,EAAAA,iBAAmBA,GAGtBgT,EAAAA,iBAAiBnT,KAAKmN,KAGvB,QAAA,SAAUA,EAAMjF,GAiBdiF,OAhBHnP,EAAM8B,QACDA,EAAAA,MAAQ,CAACoI,EAAWzI,MAAOhC,IAEhCO,EAAM2B,MACDA,EAAAA,IAAM,IAAI0F,OACoB+N,IAA/BlL,EAAW1D,gBAAiC0D,EAAWxK,WAAawK,EAAW1D,gBAC/E0D,EAAWzI,YAAuC2T,IAA9BlL,EAAWzD,eAAgCyD,EAAWvK,UAAYuK,EAAWzD,gBACjG/G,EACAD,EAAQE,GAEP0V,KAAAA,YAAYlG,IAGjBnP,EAAMiC,eACDqT,KAAAA,eAAenG,GAEjBA,GAGE,YAAA,SAAUA,GAIZA,OAHHnP,EAAMT,SACDoC,EAAAA,IAAIpC,OAASS,EAAMT,QAErB4P,GAGY,sBAAA,SAAU9D,GACtB,MAAA,CACGnM,KAAAA,EAAOqW,gBACHlK,SAAAA,IAIU,2BAAA,SAAU8C,EAAUa,EAAMD,GAC3C,MAAA,CACG7P,KAAAA,EAAOsW,qBACHrH,SAAAA,EACJa,KAAAA,EACCD,MAAAA,IAIS,uBAAA,SAAUZ,EAAUa,EAAMD,GAGvC,MAAA,CACGxN,KAHe,OAAb4M,GAAkC,OAAbA,EAAqBjP,EAAOuW,kBACjDvW,EAAOwW,iBAGLvH,SAAAA,EACJa,KAAAA,EACCD,MAAAA,IAIO,qBAAA,SAAUjK,GACrB,MAAA,CACG5F,KAAAA,EAAOyW,eACP7Q,KAAAA,IAIQ,qBAAA,SAAUgN,GACrB,MAAA,CACG5S,KAAAA,EAAO0W,eACN9D,MAAAA,IAIO,qBAAA,SAAU1E,EAAQvF,GAC7B,MAAA,CACG3I,KAAAA,EAAO2W,eACLzI,OAAAA,EACKvF,UAAAA,IAIF,kBAAA,SAAUkC,EAAOjF,GACzB,MAAA,CACG5F,KAAAA,EAAO4W,YACN/L,MAAAA,EACDjF,KAAAA,IAIe,4BAAA,SAAUhE,EAAM2N,EAAYC,GAC9C,MAAA,CACGxP,KAAAA,EAAO6W,sBACPjV,KAAAA,EACM2N,WAAAA,EACDC,UAAAA,IAIM,wBAAA,SAAUoD,GACxB,MAAA,CACG5S,KAAAA,EAAO8W,kBACNlE,MAAAA,IAIU,wBAAA,WACd,MAAA,CACG5S,KAAAA,EAAO+W,oBAIG,uBAAA,SAAUnR,EAAMhE,GAC7B,MAAA,CACG5B,KAAAA,EAAOgX,iBACPpR,KAAAA,EACAhE,KAAAA,IAIQ,qBAAA,WACX,MAAA,CACG5B,KAAAA,EAAOiX,iBAIM,0BAAA,SAAU7B,GAC1B,MAAA,CACGpV,KAAAA,EAAOkX,oBACD9B,WAAAA,IAIA,mBAAA,SAAUrE,EAAMnP,EAAMwP,EAAQxL,GACvC,MAAA,CACG5F,KAAAA,EAAOmX,aACPpG,KAAAA,EACAnP,KAAAA,EACEwP,OAAAA,EACFxL,KAAAA,IAIQ,qBAAA,SAAUkK,EAAMD,EAAOjK,GAClC,MAAA,CACG5F,KAAAA,EAAOoX,eACPtH,KAAAA,EACCD,MAAAA,EACDjK,KAAAA,EACA,MAAA,IAIa,0BAAA,SAAU1D,EAAIsL,EAAQ6J,EAAUzR,GAChD,MAAA,CACG5F,KAAAA,EAAOsX,oBACTpV,GAAAA,EACIsL,OAAAA,EACE6J,SAAAA,EACJzR,KAAAA,EACA,KAAA,KACK,WAAA,EACC,YAAA,IAIM,yBAAA,SAAU1D,EAAIsL,EAAQ6J,EAAUzR,GAC/C,MAAA,CACG5F,KAAAA,EAAOuX,mBACTrV,GAAAA,EACIsL,OAAAA,EACE6J,SAAAA,EACJzR,KAAAA,EACA,KAAA,KACK,WAAA,EACC,YAAA,IAIF,iBAAA,SAAUsF,GACjB,MAAA,CACGlL,KAAAA,EAAOmE,WACP+G,KAAAA,IAIK,kBAAA,SAAUtJ,EAAM2N,EAAYC,GACpC,MAAA,CACGxP,KAAAA,EAAOwX,YACP5V,KAAAA,EACM2N,WAAAA,EACDC,UAAAA,IAIK,uBAAA,SAAUoD,EAAOhN,GAC9B,MAAA,CACG5F,KAAAA,EAAOyX,iBACN7E,MAAAA,EACDhN,KAAAA,IAIC,cAAA,SAAUmB,GACd,MAAA,CACG/G,KAAAA,EAAOqV,QACNtO,MAAAA,EAAMzE,MACRjC,IAAAA,EAAOgD,MAAM0D,EAAMxE,MAAOwE,EAAMvE,OAIrB,uBAAA,SAAUkV,EAAU/C,EAAQpI,GACzC,MAAA,CACGvM,KAAAA,EAAO2K,iBACH+M,SAAa,MAAbA,EACF/C,OAAAA,EACEpI,SAAAA,IAIG,oBAAA,SAAU2B,EAAQvF,GAC5B,MAAA,CACG3I,KAAAA,EAAO2X,cACLzJ,OAAAA,EACKvF,UAAAA,IAIG,uBAAA,SAAU2D,GACvB,MAAA,CACGtM,KAAAA,EAAO4X,iBACDtL,WAAAA,IAIK,wBAAA,SAAU2C,EAAUC,GAClC,MAAA,CACGlP,KAAAA,EAAO6X,iBACH5I,SAAAA,EACAC,SAAAA,EACF,QAAA,IAID,cAAA,SAAUtJ,GACd,MAAA,CACG5F,KAAAA,EAAOgW,QACPpQ,KAAAA,IAIE,eAAA,SAAU4G,EAAMb,EAAKrJ,GAC1B,MAAA,CACGtC,KAAAA,EAAO8X,SACRnM,IAAAA,EACErJ,MAAAA,EACDkK,KAAAA,IAIS,sBAAA,SAAU0C,GACtB,MAAA,CACGlP,KAAAA,EAAO+X,gBACH7I,SAAAA,IAIQ,yBAAA,SAAUoB,GACzB,MAAA,CACGtQ,KAAAA,EAAOgY,mBACA1H,YAAAA,IAIH,iBAAA,SAAU1O,EAAM2N,GACvB,MAAA,CACGvP,KAAAA,EAAOiY,WACPrW,KAAAA,EACM2N,WAAAA,IAIG,sBAAA,SAAUuE,EAAcC,GACpC,MAAA,CACG/T,KAAAA,EAAOkY,gBACCpE,aAAAA,EACPC,MAAAA,IAIO,qBAAA,WACX,MAAA,CACG/T,KAAAA,EAAOmY,iBAIC,qBAAA,SAAUjJ,GACrB,MAAA,CACGlP,KAAAA,EAAOoY,eACHlJ,SAAAA,IAIE,mBAAA,SAAUsB,EAAO6H,EAAiBpG,EAAUC,GACrD,MAAA,CACGlS,KAAAA,EAAOsY,aACN9H,MAAAA,EACU6H,gBAAAA,EACPpG,SAAAA,EACCC,UAAAA,IAII,sBAAA,SAAUjD,EAAUC,GACnCD,MAAa,OAAbA,GAAkC,OAAbA,EACd,CACGjP,KAAAA,EAAO6X,iBACH5I,SAAAA,EACAC,SAAAA,EACF,QAAA,GAGT,CACGlP,KAAAA,EAAOuY,gBACHtJ,SAAAA,EACAC,SAAAA,EACF,QAAA,IAIW,0BAAA,SAAUoC,EAAc9E,GACxC,MAAA,CACGxM,KAAAA,EAAOwY,oBACClH,aAAAA,EACR9E,KAAAA,IAIY,yBAAA,SAAUtK,EAAI6O,GAC7B,MAAA,CACG/Q,KAAAA,EAAOyY,mBACTvW,GAAAA,EACE6O,KAAAA,IAIQ,qBAAA,SAAUnP,EAAMgE,GAC3B,MAAA,CACG5F,KAAAA,EAAO0Y,eACP9W,KAAAA,EACAgE,KAAAA,IAIO,oBAAA,SAAU+O,EAAQ/O,GAC5B,MAAA,CACG5F,KAAAA,EAAO2Y,cACLhE,OAAAA,EACF/O,KAAAA,KA64DVgT,EAAAA,QAAU,QAEV9T,EAAAA,SApKCA,SAASjB,EAAMgV,GAChBnM,IAAAA,EAEA1H,EAEOnD,EAAAA,OACS,iBAATgC,GAAuBA,aAAgBhC,SACvC6K,EAAAA,EAAS7I,IAGTzD,EAAAA,EAEH,EAAA,EACMC,GAFLwD,EAAAA,GAEYnD,OAAS,EAAK,EAAI,EAC3B,EAAA,EACHL,EAAAA,EAAOK,OACJ,EAAA,KACJ,EAAA,CACK,SAAA,EACC,SAAA,GACM,gBAAA,EACH,aAAA,EACH,UAAA,EACQ,kBAAC,GAGf,EAAA,IAGEmY,EAAAA,GAAW,IAGb7T,QAAS,EACXA,EAAAA,OAAS,GACTF,EAAAA,UAAW,EAEXC,EAAAA,gBAAkB,EAClBE,EAAAA,gBAAkB,EAElBrC,EAAAA,MAAkC,kBAAlBiW,EAAQjW,OAAwBiW,EAAQjW,MACxDH,EAAAA,IAA8B,kBAAhBoW,EAAQpW,KAAsBoW,EAAQpW,IAE3B,kBAApBoW,EAAQnW,SAAyBmW,EAAQnW,UAC1CG,EAAAA,SAAW,IAEW,kBAArBgW,EAAQC,UAA0BD,EAAQC,WAC3CxP,EAAAA,OAAS,IAGf,IAEI1I,GADJmH,IACInH,EAAUyB,OAASxC,EAAMqH,IAClBpG,OAAAA,EAAMkE,OAIVpE,IADCkH,IACDlH,EAAUyB,OAASxC,EAAMqH,KACxB,IACQY,IACV,MAAOiR,GAEDjY,GAAAA,EAAMwI,OAAQ,CACRA,EAAAA,OAAOxG,KAAKiW,GAGlB,MAEMA,MAAAA,EAKlBlD,KACS/U,EAAAA,EAAMkE,YACe,IAAnBlE,EAAM+B,WACNA,EAAAA,SAAW/B,EAAM+B,eAEA,IAAjB/B,EAAMwI,SACNA,EAAAA,OAASxI,EAAMwI,QAE5B,MAAO9C,GACCA,MAAAA,EACA,QACE,EAAA,GAELxB,OAAAA,GAiFHgU,EAAAA,MA9ECA,SAAMnV,EAAMgV,GACbI,IAAAA,EAASvM,EAEF7K,EAAAA,OACS,iBAATgC,GAAuBA,aAAgBhC,SACvC6K,EAAAA,EAAS7I,IAGTzD,EAAAA,EAEH,EAAA,EACMC,GAFLwD,EAAAA,GAEYnD,OAAS,EAAK,EAAI,EAC3B,EAAA,EACHL,EAAAA,EAAOK,OACJ,EAAA,KACJ,EAAA,CACK,SAAA,EACC,SAAA,GACM,gBAAA,EACH,aAAA,EACH,UAAA,EACQ,kBAAC,GAGf,EAAA,QACe,IAAZmY,IACDjW,EAAAA,MAAkC,kBAAlBiW,EAAQjW,OAAwBiW,EAAQjW,MACxDH,EAAAA,IAA8B,kBAAhBoW,EAAQpW,KAAsBoW,EAAQpW,IACpDM,EAAAA,cAAkD,kBAA1B8V,EAAQ9V,eAAgC8V,EAAQ9V,cAE1EjC,EAAM2B,KAA0B,OAAnBoW,EAAQxY,aAAsC6V,IAAnB2C,EAAQxY,SAC1CA,EAAAA,OAASqM,EAASmM,EAAQxY,SAGN,kBAAnBwY,EAAQ7T,QAAwB6T,EAAQ7T,SACzCA,EAAAA,OAAS,IAEY,kBAApB6T,EAAQnW,SAAyBmW,EAAQnW,UAC1CG,EAAAA,SAAW,IAEW,kBAArBgW,EAAQC,UAA0BD,EAAQC,WAC3CxP,EAAAA,OAAS,IAEfxI,EAAMiC,gBACAH,EAAAA,OAAQ,EACRC,EAAAA,SAAW,GACXoT,EAAAA,iBAAmB,GACnBhT,EAAAA,iBAAmB,GACnBD,EAAAA,gBAAkB,KAI5B,IACU0S,EAAAA,UACoB,IAAnB5U,EAAM+B,WACLA,EAAAA,SAAW/B,EAAM+B,eAED,IAAjB/B,EAAMkE,SACb6Q,KACQ7Q,EAAAA,OAASlE,EAAMkE,aAEC,IAAjBlE,EAAMwI,SACLA,EAAAA,OAASxI,EAAMwI,QAE7B,MAAO9C,GACCA,MAAAA,EACA,QACE,EAAA,GAGLyS,OAAAA,GAYHjZ,EAAAA,OAAU,WACVkL,IAAAA,EAAMgO,EAAQ,GAMbhO,IAAAA,IAJwB,mBAAlB4B,OAAOqM,SACNrM,EAAAA,OAAOqM,OAAO,OAGbnZ,EACLA,EAAO+M,eAAe7B,KAChBA,EAAAA,GAAQlL,EAAOkL,IAQtBgO,MAJsB,mBAAlBpM,OAAOsM,QACPA,OAAAA,OAAOF,GAGXA,EAjBO;;;;;ACp+GtB,IAAA,EAAA,UAAA,GAhMA,EAAA,QAAA,WACA,EAAA,QAAA,QAEA,EAAA,EAEA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,KAAA,EACA,KAAA,OAAA,EACA,KAAA,OAAA,EACA,KAAA,MAAA,EAGA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,KAAA,EACA,KAAA,KAAA,EACA,KAAA,SAAA,EACA,KAAA,UAAA,EAGA,SAAA,EAAA,GACA,GAAA,SAAA,EACA,MAAA,IAAA,MAAA,oCAEA,MAAA,oBAAA,OACA,KAAA,YACA,IAAA,EACA,KAAA,EACA,oBAAA,MACA,KAAA,KAMA,SAAA,EAAA,GAGA,IAFA,IAAA,EAAA,EAAA,KAAA,GAAA,WAAA,OAAA,OACA,EAAA,IAAA,MAAA,EAAA,QACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,GAAA,EAAA,GAAA,KAEA,OAAA,EAGA,SAAA,EAAA,GAUA,IATA,IAAA,EAAA,CAAA,IAAA,EAAA,OAAA,KAAA,IACA,EAAA,EAAA,MAAA,EAAA,CAAA,OAAA,IAGA,EAAA,WAAA,IAAA,IAGA,EAAA,EAAA,GACA,EAAA,IAAA,MAAA,EAAA,QACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,GAAA,IAAA,EAAA,CAAA,EAAA,MAAA,EAAA,KAAA,KAAA,KAAA,GAAA,GAKA,IADA,IAAA,EAAA,IAAA,MAAA,EAAA,QACA,GAAA,EAAA,EAAA,EAAA,QAAA,EAAA,IAAA,EACA,EAAA,GAAA,EAAA,OAAA,GAIA,IAAA,EAAA,GACA,EAAA,GAkBA,SAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,GAAA,GAEA,EAAA,GAAA,EAcA,IALA,EAKA,EAAA,EACA,EAAA,EAsFA,OArEA,SAAA,EAAA,EAAA,GAEA,GADA,EAAA,OAAA,EACA,qBAAA,EAAA,KAEA,EAAA,UACA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,SAAA,IACA,mBAAA,EAAA,OAAA,KACA,EAAA,GApDA,EAoDA,EAAA,SAAA,KAnDA,EAAA,QAAA,EAAA,QAAA,MAAA,MACA,EAAA,KAAA,GACA,IAmDA,EAAA,EAAA,OAAA,OAEA,CAAA,GAAA,mBAAA,EAAA,KACA,MAAA,IAAA,MAAA,8CACA,GAAA,eAAA,EAAA,KAAA,CAEA,IAAA,EAAA,EAAA,KACA,EAAA,EAAA,QAAA,GACA,GAAA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EApCA,SAAA,GACA,MAAA,yBAAA,EAAA,OAAA,MACA,EAAA,OAAA,OAAA,EACA,MAAA,EAAA,OAAA,SACA,EAEA,EAAA,EAGA,qBAAA,EAAA,OAAA,KACA,EAAA,EAEA,EAwBA,CAAA,GACA,EAAA,IACA,EAAA,QAAA,GAEA,EAAA,IACA,EAAA,QAAA,KAEA,EAAA,MACA,EAAA,EAAA,EAAA,WACA,EAAA,IAGA,EAAA,EAnFA,SAAA,GACA,IAAA,EAAA,EAAA,EAAA,QAAA,MAAA,MAEA,OADA,EAAA,KAAA,GACA,EAgFA,CAAA,SAEA,GAAA,YAAA,EAAA,KACA,iBAAA,EAAA,OACA,EAAA,EA/DA,IA+DA,EAAA,MA/DA,QAAA,MAAA,OAAA,QAAA,MAAA,KAAA,SAiEA,CAAA,GAAA,kBAAA,EAAA,KACA,MAAA,IAAA,MAAA,+CAIA,IADA,IAAA,EAAA,OAAA,KAAA,GACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EACA,GAAA,WAAA,EAAA,GAAA,CAGA,IAAA,EAAA,EAAA,EAAA,IACA,GAAA,EACA,GAAA,aAAA,MACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,IAAA,iBAAA,EAAA,GAAA,MACA,EAAA,EAAA,GAAA,OAGA,iBAAA,EAAA,MACA,EAAA,EAAA,KApFA,IAhBA,EACA,EA2CA,CA6DA,EAAA,KAAA,GAAA,WAAA,OAAA,UAAA,GAGA,EAAA,GACA,EAAA,GAGA,IAAA,GA3FA,EA2FA,EAAA,KAAA,GAAA,WAAA,OAAA,KA1FA,EAAA,MAAA,EAAA,MAAA,GAAA,EAAA,MAAA,IAAA,KAAA,KA0FA,EAAA,EAAA,GAIA,OAAA,QAAA;;;;;;;;AClMA,aAEA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,kBAEA,EAAA,CAAA,OAAA,QACA,EAAA,CAAA,MAAA,OAAA,YAAA,WAAA,aAEA,SAAA,EAAA,GAEA,IAAA,IAAA,KAAA,EACA,EAAA,QAAA,GAAA,GACA,EAAA,QAAA,GAAA,GACA,QAAA,KAAA,4BAAA,EAAA,mCAGA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,IAAA,EAAA,EAAA,IACA,MAAA,IAAA,MAAA,4BAAA,EAAA,IAKA,OAAA,EAAA,CACA,KAAA,EAAA,KACA,IAAA,EAAA,EAAA,KAAA,cACA,KAAA,EAAA,EAAA,MACA,KAAA,EAAA,EAAA,MAAA,cACA,QAAA,EAAA,UACA,SAAA,EAAA,UAAA,EAAA,KAAA,MAAA,QACA,UAAA,EAAA,WAAA,KAIA,OAAA,QAAA;;AClCA,aAEA,IAAA,EAAA,QAAA,SAEA,EAAA,EAAA,CACA,KAAA,CAAA,QAAA,QAAA,UACA,KAAA,SAAA,EAAA,EAAA,GACA,EAAA,WAAA,EAAA,MAIA,OAAA,QAAA,SAAA,EAAA,GAEA,OADA,EAAA,EAAA,GACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,OAAA,UAAA,eAQA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,GACA,EAEA,IAAA,EACA,EAGA,EAQA,SAAA,EAAA,EAAA,GACA,OAAA,IAAA,EAOA,SAAA,EAAA,GACA,OAAA,OAAA,EACA,kBAEA,EAAA,GACA,uBAEA,EAAA,GACA,KAAA,EAGA,KAAA,EAAA,WAOA,SAAA,EAAA,EAAA,GAEA,QADA,IAAA,IAAA,EAAA,KACA,OAAA,EACA,MAAA,kBAEA,GAAA,EAAA,GACA,MAAA,uBAEA,GAAA,EAAA,GACA,OAAA,EAAA,WAGA,IAAA,EAAA,IACA,GAAA,EACA,IAAA,IAAA,KAAA,EACA,QAAA,IAAA,EAAA,KACA,EACA,GAAA,EAGA,GAAA,EAEA,EAAA,EAAA,EAAA,IAAA,EAAA,IAGA,OAAA,EAAA,IAQA,SAAA,EAAA,GACA,MAAA,mBAAA,EAOA,SAAA,EAAA,GACA,YAAA,IAAA,EAOA,SAAA,EAAA,GACA,MAAA,oBAAA,OAAA,UAAA,SAAA,KAAA,GAOA,SAAA,EAAA,GACA,OAAA,EAAA,KAAA,EAAA,GACA,SAAA,EAAA,GACA,OAAA,EAAA,EACA,EAEA,IAAA,EACA,GAGA,GAKA,SAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,IASA,SAAA,EAAA,GACA,OAAA,SAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,IArIA,QAAA,IAAA,SAAA,EAAA,GACA,OAAA,EAAA,KAAA,EAAA,IAiBA,QAAA,eAAA,EAQA,QAAA,cAAA,EAmBA,QAAA,gBAAA,EAgCA,QAAA,WAAA,EAQA,QAAA,WAAA,EAQA,QAAA,YAAA,EAQA,QAAA,SAAA,EAyBA,QAAA,uBAAA,EAUA,QAAA,gBAAA;;AC3IA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,UAWA,SAAA,EAAA,EAAA,EAAA,GAGA,IAFA,IAAA,EAAA,GAAA,EAAA,cACA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,GAAA,GACA,OAAA,EAGA,OAAA,EAaA,SAAA,EAAA,EAAA,EAAA,GAGA,IAFA,IAAA,EAAA,GAAA,EAAA,cAEA,EADA,EAAA,OACA,EAAA,GAAA,EAAA,IACA,GAAA,EAAA,EAAA,GAAA,GACA,OAAA,EAGA,OAAA,EAWA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,IAAA,EAWA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,GACA,QAAA,EAAA,KAGA,EAAA,OAAA,EAAA,IACA,GAaA,SAAA,EAAA,EAAA,EAAA,GAIA,IAHA,IAAA,EAAA,GAAA,EAAA,cACA,EAAA,EAAA,OACA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,IACA,IAGA,OAAA,EAcA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,GAAA,EAAA,cACA,GAAA,EAAA,SAAA,EAAA,OACA,OAAA,EAGA,IADA,IAAA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,IAAA,EAAA,EAAA,GAAA,EAAA,IACA,OAAA,EAGA,OAAA,EAQA,SAAA,EAAA,GACA,OAAA,EAAA,SAUA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAAA,GAAA,GAAA,EAAA,QAAA,EAAA,GAAA,GAAA,EAAA,OACA,OAAA,EAEA,IAAA,EAAA,EAAA,GAGA,OAFA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,GACA,EAGA,SAAA,EAAA,GACA,MAAA,IAAA,EAAA,WAAA,IAWA,SAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAEA,IAAA,IAAA,EADA,EAAA,IAEA,QA5IA,QAAA,QAAA,EAqBA,QAAA,YAAA,EAYA,QAAA,SAAA,EAiBA,QAAA,OAAA,EAsBA,QAAA,UAAA,EAyBA,QAAA,OAAA,EASA,QAAA,KAAA,EAiBA,QAAA,KAAA,EAIA,QAAA,SAAA,EAiBA,QAAA,QAAA;;ACvKA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,UACA,EAAA,WAmBA,SAAA,EAAA,GACA,KAAA,MAAA,GACA,KAAA,UAAA,EACA,KAAA,MAAA,GAAA,EAAA,gBAoJA,OA3IA,EAAA,UAAA,SAAA,SAAA,GACA,IAAA,EAAA,KAAA,MAAA,IAAA,KAAA,MAAA,IACA,IAAA,EAAA,YAAA,GAGA,OAAA,EAAA,OAYA,EAAA,UAAA,SAAA,SAAA,EAAA,GACA,IAAA,EAAA,YAAA,KAAA,EAAA,YAAA,GAAA,CAGA,IAAA,EACA,EAAA,IAAA,KAAA,MAAA,GACA,EAAA,KAAA,MAAA,GAYA,OAXA,EAAA,YAAA,IACA,KAAA,YACA,OAAA,GAGA,EAAA,EAAA,MAEA,KAAA,MAAA,GAAA,CACA,IAAA,EACA,MAAA,GAEA,IASA,EAAA,UAAA,OAAA,SAAA,GACA,IAAA,EAAA,IAAA,KAAA,MAAA,GACA,EAAA,KAAA,MAAA,GACA,IAAA,EAAA,YAAA,GAGA,cAFA,KAAA,MAAA,GACA,KAAA,YACA,EAAA,OAQA,EAAA,UAAA,KAAA,WACA,IAAA,EAAA,GACA,IAAA,IAAA,KAAA,KAAA,MACA,GAAA,EAAA,IAAA,KAAA,MAAA,GAAA,CACA,IAAA,EAAA,KAAA,MAAA,GACA,EAAA,KAAA,EAAA,KAGA,OAAA,GAMA,EAAA,UAAA,OAAA,WACA,IAAA,EAAA,GACA,IAAA,IAAA,KAAA,KAAA,MACA,GAAA,EAAA,IAAA,KAAA,MAAA,GAAA,CACA,IAAA,EAAA,KAAA,MAAA,GACA,EAAA,KAAA,EAAA,OAGA,OAAA,GASA,EAAA,UAAA,QAAA,SAAA,GACA,IAAA,IAAA,KAAA,KAAA,MACA,GAAA,EAAA,IAAA,KAAA,MAAA,GAAA,CACA,IAAA,EAAA,KAAA,MAAA,GAEA,IAAA,IADA,EAAA,EAAA,IAAA,EAAA,OAEA,SAYA,EAAA,UAAA,YAAA,SAAA,GACA,OAAA,EAAA,YAAA,KAAA,SAAA,KAMA,EAAA,UAAA,MAAA,WACA,KAAA,MAAA,GACA,KAAA,UAAA,GAMA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,WAMA,EAAA,UAAA,QAAA,WACA,OAAA,KAAA,WAAA,GAEA,EAAA,UAAA,SAAA,WACA,IAAA,EAAA,IAIA,OAHA,KAAA,QAAA,SAAA,EAAA,GACA,GAAA,OAAA,EAAA,MAAA,IAEA,EAAA,OAEA,EA1KA,GA4KA,QAAA,QAAA;;AC/KA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,YACA,EAAA,QAAA,gBACA,EAAA,WAmBA,SAAA,EAAA,GACA,KAAA,WAAA,IAAA,EAAA,QAAA,GA4IA,OApIA,EAAA,UAAA,SAAA,SAAA,GACA,OAAA,KAAA,WAAA,YAAA,IAOA,EAAA,UAAA,IAAA,SAAA,GACA,OAAA,KAAA,SAAA,KAAA,EAAA,YAAA,KAIA,KAAA,WAAA,SAAA,EAAA,IACA,IAQA,EAAA,UAAA,aAAA,SAAA,GACA,IAAA,EAAA,KACA,KAAA,QAAA,SAAA,GAIA,OAHA,EAAA,SAAA,IACA,EAAA,OAAA,IAEA,KAQA,EAAA,UAAA,MAAA,SAAA,GACA,IAAA,EAAA,KACA,EAAA,QAAA,SAAA,GAEA,OADA,EAAA,IAAA,IACA,KAQA,EAAA,UAAA,WAAA,SAAA,GACA,IAAA,EAAA,KACA,EAAA,QAAA,SAAA,GAEA,OADA,EAAA,OAAA,IACA,KAQA,EAAA,UAAA,WAAA,SAAA,GACA,GAAA,KAAA,OAAA,EAAA,OACA,OAAA,EAEA,IAAA,GAAA,EAQA,OAPA,KAAA,QAAA,SAAA,GACA,QAAA,EAAA,SAAA,KACA,GAAA,GACA,KAIA,GAMA,EAAA,UAAA,OAAA,SAAA,GACA,QAAA,KAAA,SAAA,KAIA,KAAA,WAAA,OAAA,IACA,IAUA,EAAA,UAAA,QAAA,SAAA,GACA,KAAA,WAAA,QAAA,SAAA,EAAA,GACA,OAAA,EAAA,MAOA,EAAA,UAAA,QAAA,WACA,OAAA,KAAA,WAAA,UAMA,EAAA,UAAA,QAAA,WACA,OAAA,KAAA,WAAA,WAMA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,WAAA,QAKA,EAAA,UAAA,MAAA,WACA,KAAA,WAAA,SAKA,EAAA,UAAA,SAAA,WACA,OAAA,EAAA,SAAA,KAAA,YAEA,EAhKA,GAkKA,QAAA,QAAA;;ACvKA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,gBACA,EAAA,QAAA,SACA,EAAA,WAoBA,SAAA,EAAA,GACA,KAAA,OAAA,GAAA,EAAA,gBACA,KAAA,WAAA,IAAA,EAAA,QAAA,KAAA,QACA,KAAA,UAAA,EAyJA,OAhJA,EAAA,UAAA,IAAA,SAAA,EAAA,GAEA,QADA,IAAA,IAAA,EAAA,GACA,EAAA,YAAA,IAAA,GAAA,EACA,OAAA,EAEA,GAAA,KAAA,SAAA,GAQA,KAAA,WAAA,SAAA,GAAA,QAAA,MARA,CACA,IAAA,EAAA,CACA,MAAA,EACA,OAAA,GAEA,KAAA,WAAA,SAAA,EAAA,GAMA,OADA,KAAA,WAAA,GACA,GAOA,EAAA,UAAA,MAAA,SAAA,GACA,OAAA,KAAA,SAAA,GAIA,KAAA,WAAA,SAAA,GAAA,OAHA,GAYA,EAAA,UAAA,SAAA,SAAA,GACA,OAAA,KAAA,WAAA,YAAA,IAWA,EAAA,UAAA,OAAA,SAAA,EAAA,GAEA,QADA,IAAA,IAAA,EAAA,GACA,EAAA,YAAA,IAAA,GAAA,EACA,OAAA,EAEA,GAAA,KAAA,SAAA,GAGA,CACA,IAAA,EAAA,KAAA,WAAA,SAAA,GAWA,OAVA,EAAA,EAAA,OACA,KAAA,WAAA,EAAA,OAGA,KAAA,WAAA,EAEA,EAAA,QAAA,EACA,EAAA,QAAA,GACA,KAAA,WAAA,OAAA,IAEA,EAdA,OAAA,GAsBA,EAAA,UAAA,QAAA,WAGA,IAFA,IAAA,EAAA,GAEA,EAAA,EAAA,EADA,KAAA,WAAA,SACA,EAAA,EAAA,OAAA,IAIA,IAHA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,MACA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,KAAA,GAGA,OAAA,GAMA,EAAA,UAAA,MAAA,WAGA,IAFA,IAAA,EAAA,IAAA,EAAA,QAAA,KAAA,QAEA,EAAA,EAAA,EADA,KAAA,WAAA,SACA,EAAA,EAAA,OAAA,IAAA,CACA,IACA,EADA,EAAA,GACA,MACA,EAAA,IAAA,GAEA,OAAA,GASA,EAAA,UAAA,QAAA,SAAA,GACA,KAAA,WAAA,QAAA,SAAA,EAAA,GAGA,IAFA,IAAA,EAAA,EAAA,MACA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,IAAA,IAAA,EAAA,GACA,OAAA,EAGA,OAAA,KAOA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,WAMA,EAAA,UAAA,QAAA,WACA,OAAA,IAAA,KAAA,WAKA,EAAA,UAAA,MAAA,WACA,KAAA,UAAA,EACA,KAAA,WAAA,SAEA,EAhLA,GAkLA,QAAA,QAAA;;ACvLA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,YACA,EAAA,WAOA,SAAA,IAMA,KAAA,UAAA,KAMA,KAAA,SAAA,KAMA,KAAA,UAAA,EA4VA,OAlVA,EAAA,UAAA,IAAA,SAAA,EAAA,GAIA,GAHA,EAAA,YAAA,KACA,EAAA,KAAA,WAEA,EAAA,GAAA,EAAA,KAAA,WAAA,EAAA,YAAA,GACA,OAAA,EAEA,IAAA,EAAA,KAAA,WAAA,GACA,GAAA,IAAA,KAAA,WAAA,OAAA,KAAA,SAEA,KAAA,UAAA,EACA,KAAA,SAAA,OAEA,GAAA,IAAA,KAAA,UAEA,KAAA,SAAA,KAAA,EACA,KAAA,SAAA,OAEA,GAAA,IAAA,EAEA,EAAA,KAAA,KAAA,UACA,KAAA,UAAA,MAEA,CACA,IAAA,EAAA,KAAA,YAAA,EAAA,GACA,GAAA,MAAA,EACA,OAAA,EAEA,EAAA,KAAA,EAAA,KACA,EAAA,KAAA,EAGA,OADA,KAAA,aACA,GAOA,EAAA,UAAA,MAAA,WACA,GAAA,OAAA,KAAA,UACA,OAAA,KAAA,UAAA,SASA,EAAA,UAAA,KAAA,WACA,GAAA,OAAA,KAAA,SACA,OAAA,KAAA,SAAA,SAUA,EAAA,UAAA,eAAA,SAAA,GACA,IAAA,EAAA,KAAA,YAAA,GACA,GAAA,OAAA,EAGA,OAAA,EAAA,SAsBA,EAAA,UAAA,QAAA,SAAA,EAAA,GACA,IAAA,EAAA,GAAA,EAAA,cACA,GAAA,EAAA,YAAA,GACA,OAAA,EAIA,IAFA,IAAA,EAAA,KAAA,UACA,EAAA,EACA,OAAA,GAAA,CACA,GAAA,EAAA,EAAA,QAAA,GACA,OAAA,EAEA,IACA,EAAA,EAAA,KAEA,OAAA,GAoBA,EAAA,UAAA,SAAA,SAAA,EAAA,GACA,OAAA,KAAA,QAAA,EAAA,IAAA,GAiBA,EAAA,UAAA,OAAA,SAAA,EAAA,GACA,IAAA,EAAA,GAAA,EAAA,cACA,GAAA,KAAA,UAAA,GAAA,EAAA,YAAA,GACA,OAAA,EAIA,IAFA,IAAA,EAAA,KACA,EAAA,KAAA,UACA,OAAA,GAAA,CACA,GAAA,EAAA,EAAA,QAAA,GAiBA,OAhBA,MAAA,GACA,KAAA,UAAA,EAAA,KACA,IAAA,KAAA,WACA,KAAA,SAAA,OAGA,IAAA,KAAA,UACA,KAAA,SAAA,EACA,EAAA,KAAA,EAAA,KACA,EAAA,KAAA,OAGA,EAAA,KAAA,EAAA,KACA,EAAA,KAAA,MAEA,KAAA,aACA,EAEA,EAAA,EACA,EAAA,EAAA,KAEA,OAAA,GAKA,EAAA,UAAA,MAAA,WACA,KAAA,UAAA,KACA,KAAA,SAAA,KACA,KAAA,UAAA,GAYA,EAAA,UAAA,OAAA,SAAA,EAAA,GACA,IAAA,EAAA,GAAA,EAAA,cACA,OAAA,aAAA,IAGA,KAAA,SAAA,EAAA,QAGA,KAAA,UAAA,KAAA,UAAA,EAAA,UAAA,KAKA,EAAA,UAAA,UAAA,SAAA,EAAA,EAAA,GACA,KAAA,OAAA,GAAA,OAAA,GAAA,CACA,IAAA,EAAA,EAAA,QAAA,EAAA,SACA,OAAA,EAEA,EAAA,EAAA,KACA,EAAA,EAAA,KAEA,OAAA,GAOA,EAAA,UAAA,qBAAA,SAAA,GACA,KAAA,EAAA,GAAA,GAAA,KAAA,WAAA,OAAA,KAAA,WAAA,OAAA,KAAA,UAAA,CAGA,IAAA,EACA,GAAA,IAAA,KAAA,UAEA,EAAA,KAAA,UAAA,QACA,KAAA,UAAA,KACA,KAAA,SAAA,SAEA,CACA,IAAA,EAAA,KAAA,YAAA,EAAA,GACA,OAAA,GACA,EAAA,KAAA,UAAA,QACA,KAAA,UAAA,KAAA,UAAA,MAEA,EAAA,OAAA,KAAA,WACA,EAAA,KAAA,SAAA,QACA,KAAA,SAAA,GAEA,OAAA,GAAA,OAAA,EAAA,OACA,EAAA,EAAA,KAAA,QACA,EAAA,KAAA,EAAA,KAAA,MAIA,OADA,KAAA,YACA,IAQA,EAAA,UAAA,QAAA,SAAA,GAEA,IADA,IAAA,EAAA,KAAA,UACA,OAAA,IACA,IAAA,EAAA,EAAA,UAGA,EAAA,EAAA,MAOA,EAAA,UAAA,QAAA,WAIA,IAHA,IAAA,EAAA,KACA,EAAA,KAAA,UACA,EAAA,KACA,OAAA,GACA,EAAA,EAAA,KACA,EAAA,KAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,KAAA,UACA,KAAA,UAAA,KAAA,SACA,KAAA,SAAA,GAQA,EAAA,UAAA,QAAA,WAGA,IAFA,IAAA,EAAA,GACA,EAAA,KAAA,UACA,OAAA,GACA,EAAA,KAAA,EAAA,SACA,EAAA,EAAA,KAEA,OAAA,GAMA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,WAMA,EAAA,UAAA,QAAA,WACA,OAAA,KAAA,WAAA,GAEA,EAAA,UAAA,SAAA,WACA,OAAA,EAAA,SAAA,KAAA,YAKA,EAAA,UAAA,YAAA,SAAA,GACA,GAAA,EAAA,GAAA,GAAA,KAAA,UACA,OAAA,KAEA,GAAA,IAAA,KAAA,UAAA,EACA,OAAA,KAAA,SAGA,IADA,IAAA,EAAA,KAAA,UACA,EAAA,EAAA,EAAA,GAAA,MAAA,EAAA,IACA,EAAA,EAAA,KAEA,OAAA,GAKA,EAAA,UAAA,WAAA,SAAA,GACA,MAAA,CACA,QAAA,EACA,KAAA,OAGA,EArXA,GAuXA,QAAA,QAAA;;AC3XA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,gBACA,EAAA,WAQA,SAAA,IACA,KAAA,KAAA,IAAA,EAAA,QA4FA,OArFA,EAAA,UAAA,QAAA,SAAA,GACA,OAAA,KAAA,KAAA,IAAA,IAOA,EAAA,UAAA,IAAA,SAAA,GACA,OAAA,KAAA,KAAA,IAAA,IAMA,EAAA,UAAA,QAAA,WACA,GAAA,IAAA,KAAA,KAAA,OAAA,CACA,IAAA,EAAA,KAAA,KAAA,QAEA,OADA,KAAA,KAAA,qBAAA,GACA,IAQA,EAAA,UAAA,KAAA,WACA,GAAA,IAAA,KAAA,KAAA,OACA,OAAA,KAAA,KAAA,SAQA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,KAAA,QAoBA,EAAA,UAAA,SAAA,SAAA,EAAA,GACA,OAAA,KAAA,KAAA,SAAA,EAAA,IAOA,EAAA,UAAA,QAAA,WACA,OAAA,KAAA,KAAA,QAAA,GAKA,EAAA,UAAA,MAAA,WACA,KAAA,KAAA,SASA,EAAA,UAAA,QAAA,SAAA,GACA,KAAA,KAAA,QAAA,IAEA,EArGA,GAuGA,QAAA,QAAA;;AC1GA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,WAWA,EAAA,WAoCA,SAAA,EAAA,GACA,KAAA,KAAA,KACA,KAAA,QAAA,GAAA,EAAA,eACA,KAAA,UAAA,EAuWA,OAhWA,EAAA,UAAA,IAAA,SAAA,GACA,OAAA,EAAA,YAAA,KAGA,OAAA,KAAA,WAAA,KAAA,WAAA,MACA,KAAA,aACA,KAOA,EAAA,UAAA,MAAA,WACA,KAAA,KAAA,KACA,KAAA,UAAA,GAMA,EAAA,UAAA,QAAA,WACA,OAAA,IAAA,KAAA,WAMA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,WAQA,EAAA,UAAA,SAAA,SAAA,GACA,OAAA,EAAA,YAAA,IAGA,OAAA,KAAA,WAAA,KAAA,KAAA,IAOA,EAAA,UAAA,OAAA,SAAA,GACA,IAAA,EAAA,KAAA,WAAA,KAAA,KAAA,GACA,GAAA,OAAA,EAGA,OAAA,EAAA,SAMA,EAAA,UAAA,OAAA,SAAA,GACA,IAAA,EAAA,KAAA,WAAA,KAAA,KAAA,GACA,OAAA,OAAA,IAGA,KAAA,WAAA,GACA,KAAA,aACA,IAQA,EAAA,UAAA,iBAAA,SAAA,GACA,KAAA,oBAAA,KAAA,KAAA,EAAA,CACA,MAAA,KAQA,EAAA,UAAA,kBAAA,SAAA,GACA,KAAA,qBAAA,KAAA,KAAA,EAAA,CACA,MAAA,KAQA,EAAA,UAAA,mBAAA,SAAA,GACA,KAAA,sBAAA,KAAA,KAAA,EAAA,CACA,MAAA,KASA,EAAA,UAAA,eAAA,SAAA,GACA,KAAA,kBAAA,KAAA,KAAA,IAOA,EAAA,UAAA,QAAA,WACA,IAAA,KAAA,WAAA,OAAA,KAAA,KAGA,OAAA,KAAA,WAAA,KAAA,MAAA,SAOA,EAAA,UAAA,QAAA,WACA,IAAA,KAAA,WAAA,OAAA,KAAA,KAGA,OAAA,KAAA,WAAA,KAAA,MAAA,SASA,EAAA,UAAA,QAAA,SAAA,GACA,KAAA,iBAAA,IAMA,EAAA,UAAA,QAAA,WACA,IAAA,EAAA,GAKA,OAJA,KAAA,iBAAA,SAAA,GAEA,OADA,EAAA,KAAA,IACA,IAEA,GAMA,EAAA,UAAA,OAAA,WACA,OAAA,KAAA,UAAA,KAAA,OAKA,EAAA,UAAA,WAAA,SAAA,EAAA,GAEA,IADA,IAAA,EAAA,EACA,OAAA,GAAA,IAAA,IACA,EAAA,KAAA,QAAA,EAAA,EAAA,UACA,EACA,EAAA,EAAA,OAEA,EAAA,IACA,EAAA,EAAA,SAGA,OAAA,GAKA,EAAA,UAAA,WAAA,SAAA,EAAA,GACA,OAAA,EAAA,OACA,KAAA,KAAA,EAEA,IAAA,EAAA,OAAA,OACA,EAAA,OAAA,OAAA,EAGA,EAAA,OAAA,QAAA,EAEA,OAAA,IACA,EAAA,OAAA,EAAA,SAMA,EAAA,UAAA,WAAA,SAAA,GACA,GAAA,OAAA,EAAA,OACA,KAAA,WAAA,EAAA,EAAA,cAEA,GAAA,OAAA,EAAA,QACA,KAAA,WAAA,EAAA,EAAA,YAEA,CACA,IAAA,EAAA,KAAA,WAAA,EAAA,SACA,EAAA,SAAA,IACA,KAAA,WAAA,EAAA,EAAA,SACA,EAAA,QAAA,EAAA,QACA,EAAA,QAAA,OAAA,GAEA,KAAA,WAAA,EAAA,GACA,EAAA,OAAA,EAAA,OACA,EAAA,OAAA,OAAA,IAMA,EAAA,UAAA,oBAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,EAAA,OAGA,KAAA,oBAAA,EAAA,OAAA,EAAA,GACA,EAAA,OAGA,EAAA,MAAA,IAAA,EAAA,EAAA,SACA,EAAA,MAGA,KAAA,oBAAA,EAAA,QAAA,EAAA,MAKA,EAAA,UAAA,kBAAA,SAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,QAKA,IAJA,OAAA,GACA,EAAA,QAAA,GAEA,EAAA,EAAA,WAAA,KACA,MAAA,GAAA,CACA,IAAA,IAAA,EAAA,EAAA,SACA,OAEA,OAAA,EAAA,QACA,EAAA,QAAA,EAAA,QAEA,OAAA,EAAA,SACA,EAAA,QAAA,EAAA,SAEA,EAAA,EAAA,WAAA,OAMA,EAAA,UAAA,qBAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,EAAA,OAGA,EAAA,MAAA,IAAA,EAAA,EAAA,SACA,EAAA,OAGA,KAAA,qBAAA,EAAA,OAAA,EAAA,GACA,EAAA,MAGA,KAAA,qBAAA,EAAA,QAAA,EAAA,MAKA,EAAA,UAAA,sBAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,EAAA,OAGA,KAAA,sBAAA,EAAA,OAAA,EAAA,GACA,EAAA,OAGA,KAAA,sBAAA,EAAA,QAAA,EAAA,GACA,EAAA,OAGA,EAAA,MAAA,IAAA,EAAA,EAAA,aAEA,EAAA,UAAA,WAAA,SAAA,GACA,KAAA,MAAA,GAAA,OAAA,EAAA,QACA,EAAA,EAAA,OAEA,OAAA,GAEA,EAAA,UAAA,WAAA,SAAA,GACA,KAAA,MAAA,GAAA,OAAA,EAAA,SACA,EAAA,EAAA,QAEA,OAAA,GAKA,EAAA,UAAA,UAAA,SAAA,GACA,OAAA,OAAA,GACA,EAEA,KAAA,IAAA,KAAA,UAAA,EAAA,QAAA,KAAA,UAAA,EAAA,UAAA,GAKA,EAAA,UAAA,WAAA,SAAA,GAGA,IAFA,IAAA,EAAA,KACA,EAAA,KAAA,KACA,OAAA,GAAA,CACA,IAAA,EAAA,KAAA,QAAA,EAAA,QAAA,EAAA,SACA,GAAA,IAAA,EACA,OAAA,KAEA,EAAA,GACA,EAAA,EACA,EAAA,EAAA,SAGA,EAAA,EACA,EAAA,EAAA,SAcA,OAXA,EAAA,OAAA,EACA,OAAA,EAEA,KAAA,KAAA,EAEA,KAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EACA,EAAA,OAAA,EAGA,EAAA,QAAA,EAEA,GAKA,EAAA,UAAA,WAAA,SAAA,GACA,MAAA,CACA,QAAA,EACA,OAAA,KACA,QAAA,KACA,OAAA,OAGA,EA9YA,GAgZA,QAAA,QAAA;;AC9ZA,aACA,IAAA,EAAA,MAAA,KAAA,WAAA,WACA,IAAA,EAAA,OAAA,gBACA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IACA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KACA,OAAA,SAAA,EAAA,GAEA,SAAA,IAAA,KAAA,YAAA,EADA,EAAA,EAAA,GAEA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAPA,GAUA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,cAgBA,EAAA,SAAA,GAEA,SAAA,IACA,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAEA,OAJA,EAAA,EAAA,GAIA,EALA,CAMA,EAAA,SACA,QAAA,QAAA;;ACnCA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,YACA,EAAA,WA4CA,SAAA,EAAA,GAMA,KAAA,KAAA,GACA,KAAA,QAAA,GAAA,EAAA,eAwKA,OA/JA,EAAA,UAAA,eAAA,SAAA,GACA,OAAA,EAAA,EAAA,GASA,EAAA,UAAA,gBAAA,SAAA,GACA,OAAA,EAAA,EAAA,GAQA,EAAA,UAAA,YAAA,SAAA,GACA,OAAA,KAAA,OAAA,EAAA,GAAA,IAUA,EAAA,UAAA,SAAA,SAAA,EAAA,GACA,OAAA,GAAA,KAAA,KAAA,OACA,GAAA,KAAA,KAAA,QACA,EAGA,EAIA,KAAA,QAAA,KAAA,KAAA,GAAA,KAAA,KAAA,KAAA,EACA,EAGA,GASA,EAAA,UAAA,OAAA,SAAA,GAEA,IADA,IAAA,EAAA,KAAA,YAAA,GACA,EAAA,GAAA,KAAA,QAAA,KAAA,KAAA,GAAA,KAAA,KAAA,IAAA,GACA,EAAA,KAAA,KAAA,KAAA,EAAA,GACA,EAAA,EACA,EAAA,KAAA,YAAA,IAQA,EAAA,UAAA,SAAA,SAAA,GAGA,IADA,IAAA,EAAA,KAAA,SAAA,KAAA,eAAA,GAAA,KAAA,gBAAA,IACA,GAAA,GAAA,KAAA,QAAA,KAAA,KAAA,GAAA,KAAA,KAAA,IAAA,GACA,EAAA,KAAA,KAAA,KAAA,EAAA,GACA,EAAA,EACA,EAAA,KAAA,SAAA,KAAA,eAAA,GAAA,KAAA,gBAAA,KAQA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,KAAA,OAAA,EACA,KAAA,KAAA,QAGA,GAQA,EAAA,UAAA,IAAA,SAAA,GACA,OAAA,EAAA,YAAA,KAGA,KAAA,KAAA,KAAA,GACA,KAAA,OAAA,KAAA,KAAA,OAAA,IACA,IAOA,EAAA,UAAA,WAAA,WACA,GAAA,KAAA,KAAA,OAAA,EAAA,CACA,IAAA,EAAA,KAAA,KAAA,GAMA,OALA,KAAA,KAAA,GAAA,KAAA,KAAA,KAAA,KAAA,OAAA,GACA,KAAA,KAAA,OAAA,KAAA,KAAA,OAAA,EAAA,GACA,KAAA,KAAA,OAAA,GACA,KAAA,SAAA,GAEA,IAUA,EAAA,UAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,gBAAA,KAAA,SACA,OAAA,EAAA,SAAA,KAAA,KAAA,EAAA,IAMA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,KAAA,QAOA,EAAA,UAAA,QAAA,WACA,OAAA,KAAA,KAAA,QAAA,GAKA,EAAA,UAAA,MAAA,WACA,KAAA,KAAA,OAAA,GASA,EAAA,UAAA,QAAA,SAAA,GACA,EAAA,QAAA,KAAA,KAAA,IAEA,EA3NA,GA6NA,QAAA,QAAA;;ACjOA,aACA,IAAA,EAAA,MAAA,KAAA,WAAA,WACA,IAAA,EAAA,OAAA,gBACA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IACA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KACA,OAAA,SAAA,EAAA,GAEA,SAAA,IAAA,KAAA,YAAA,EADA,EAAA,EAAA,GAEA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAPA,GAUA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,UAMA,EAAA,WACA,SAAA,EAAA,EAAA,GACA,KAAA,IAAA,EACA,KAAA,MAAA,EAMA,OAJA,EAAA,UAAA,OAAA,WACA,KAAA,KAAA,KAAA,KAAA,KACA,KAAA,KAAA,KAAA,KAAA,MAEA,EATA,GAeA,EAAA,WACA,SAAA,IACA,KAAA,IAAA,KACA,KAAA,MAAA,KAMA,OAJA,EAAA,UAAA,OAAA,WACA,KAAA,KAAA,KAAA,KAAA,KACA,KAAA,KAAA,KAAA,KAAA,MAEA,EATA,GAWA,SAAA,EAAA,GACA,OAAA,OAAA,EAAA,KAEA,IAAA,EAAA,SAAA,GAEA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,KAAA,IAAA,KAKA,OAJA,EAAA,KAAA,IAAA,EACA,EAAA,KAAA,IAAA,EACA,EAAA,KAAA,KAAA,EAAA,KACA,EAAA,KAAA,KAAA,EAAA,KACA,EAoKA,OA3KA,EAAA,EAAA,GAcA,EAAA,UAAA,aAAA,SAAA,GACA,IAAA,EAAA,KAAA,KAAA,KACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,KAAA,KACA,KAAA,KAAA,KAAA,GAKA,EAAA,UAAA,wBAAA,SAAA,GACA,IAAA,EAAA,YAAA,GAAA,CAGA,IAAA,EAAA,IAAA,KAAA,MAAA,GAEA,OADA,KAAA,MAAA,KAUA,EAAA,UAAA,SAAA,SAAA,GACA,IAAA,EAAA,KAAA,wBAAA,GACA,IAAA,EAAA,YAAA,GACA,OAAA,EAAA,OAaA,EAAA,UAAA,OAAA,SAAA,GACA,IAAA,EAAA,KAAA,wBAAA,GACA,IAAA,EAAA,YAAA,GAGA,OAFA,EAAA,UAAA,OAAA,KAAA,KAAA,GACA,EAAA,SACA,EAAA,OAQA,EAAA,UAAA,MAAA,WACA,EAAA,UAAA,MAAA,KAAA,MACA,KAAA,KAAA,KAAA,KAAA,KACA,KAAA,KAAA,KAAA,KAAA,MAOA,EAAA,UAAA,QAAA,SAAA,EAAA,GACA,IAAA,EAAA,IAAA,KAAA,MAAA,EAAA,KAEA,EAAA,KAAA,EAAA,KACA,EAAA,KAAA,EAAA,KAGA,KAAA,OAAA,EAAA,KAGA,EAAA,KAAA,KAAA,EACA,EAAA,KAAA,KAAA,EACA,KAAA,MAAA,GAAA,IAGA,KAAA,WAcA,EAAA,UAAA,SAAA,SAAA,EAAA,GACA,IAAA,EAAA,YAAA,KAAA,EAAA,YAAA,GAAA,CAGA,IAAA,EAAA,KAAA,wBAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,IAAA,KAAA,MAAA,GAGA,OAAA,EAAA,YAAA,IAKA,KAAA,aAAA,GACA,KAAA,MAAA,GAAA,QACA,KAAA,YANA,KAAA,QAAA,EAAA,GACA,EAAA,SAeA,EAAA,UAAA,KAAA,WACA,IAAA,EAAA,GAIA,OAHA,KAAA,QAAA,SAAA,EAAA,GACA,EAAA,KAAA,KAEA,GAQA,EAAA,UAAA,OAAA,WACA,IAAA,EAAA,GAIA,OAHA,KAAA,QAAA,SAAA,EAAA,GACA,EAAA,KAAA,KAEA,GAUA,EAAA,UAAA,QAAA,SAAA,GAEA,IADA,IAAA,EAAA,KAAA,KAAA,MACA,EAAA,IAAA,CAEA,IAAA,IADA,EAAA,EAAA,IAAA,EAAA,OAEA,OAEA,EAAA,EAAA,OAGA,EA5KA,CA6KA,EAAA,SACA,QAAA,QAAA;;AC9NA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,gBACA,EAAA,QAAA,YACA,EAAA,WAoCA,SAAA,EAAA,EAAA,EAAA,QACA,IAAA,IAAA,GAAA,GACA,KAAA,KAAA,IAAA,EAAA,QAAA,GACA,KAAA,QAAA,GAAA,EAAA,cACA,KAAA,eAAA,EAwHA,OA9GA,EAAA,UAAA,SAAA,SAAA,GACA,IAAA,EAAA,KAAA,KAAA,SAAA,GACA,OAAA,EAAA,YAAA,GACA,GAEA,EAAA,KAAA,IAUA,EAAA,UAAA,SAAA,SAAA,EAAA,GACA,GAAA,EAAA,YAAA,IAAA,EAAA,YAAA,GACA,OAAA,EAEA,IAAA,EAAA,KAAA,KAAA,SAAA,GACA,OAAA,EAAA,YAAA,IACA,KAAA,KAAA,SAAA,EAAA,CAAA,KACA,MAEA,KAAA,gBACA,EAAA,SAAA,EAAA,EAAA,KAAA,YAIA,EAAA,KAAA,IACA,IAaA,EAAA,UAAA,OAAA,SAAA,EAAA,GACA,GAAA,EAAA,YAAA,GAAA,CACA,IAAA,EAAA,KAAA,KAAA,OAAA,GACA,OAAA,EAAA,YAAA,GAEA,IAAA,EAAA,KAAA,KAAA,SAAA,GACA,QAAA,EAAA,YAAA,KAAA,EAAA,OAAA,EAAA,EAAA,KAAA,YACA,IAAA,EAAA,QACA,KAAA,KAAA,OAAA,IAEA,IAQA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,KAAA,QAMA,EAAA,UAAA,OAAA,WAGA,IAFA,IACA,EAAA,GACA,EAAA,EAAA,EAFA,KAAA,KAAA,SAEA,EAAA,EAAA,OAAA,IAEA,IADA,IACA,EAAA,EAAA,EADA,EAAA,GACA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,KAAA,GAGA,OAAA,GASA,EAAA,UAAA,YAAA,SAAA,GACA,OAAA,KAAA,KAAA,YAAA,IAKA,EAAA,UAAA,MAAA,WACA,KAAA,KAAA,SAMA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,KAAA,QAMA,EAAA,UAAA,QAAA,WACA,OAAA,KAAA,KAAA,WAEA,EAhKA,GAkKA,QAAA,QAAA;;ACvKA,aACA,IAAA,EAAA,MAAA,KAAA,WAAA,WACA,IAAA,EAAA,OAAA,gBACA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IACA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,KACA,OAAA,SAAA,EAAA,GAEA,SAAA,IAAA,KAAA,YAAA,EADA,EAAA,EAAA,GAEA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAPA,GAUA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,UACA,EAAA,SAAA,GA8BA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,KAAA,IAAA,KAEA,OADA,EAAA,uBAAA,EACA,EA+BA,OA/DA,EAAA,EAAA,GA2CA,EAAA,UAAA,WAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,UAAA,SAAA,KAAA,KAAA,GACA,OAAA,EAAA,YAAA,IACA,KAAA,SAAA,EAAA,GACA,GAEA,GAWA,EAAA,UAAA,SAAA,SAAA,GACA,OAAA,KAAA,WAAA,EAAA,KAAA,2BAEA,EAhEA,CAiEA,EAAA,SACA,QAAA,QAAA;;AChFA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,UACA,EAAA,WAyBA,SAAA,EAAA,GACA,KAAA,KAAA,IAAA,EAAA,QAAA,EAAA,uBAAA,IA8EA,OAvEA,EAAA,UAAA,QAAA,SAAA,GACA,OAAA,KAAA,KAAA,IAAA,IAOA,EAAA,UAAA,IAAA,SAAA,GACA,OAAA,KAAA,KAAA,IAAA,IAOA,EAAA,UAAA,QAAA,WACA,GAAA,IAAA,KAAA,KAAA,OAAA,CACA,IAAA,EAAA,KAAA,KAAA,OAEA,OADA,KAAA,KAAA,aACA,IAQA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,KAAA,QAQA,EAAA,UAAA,SAAA,SAAA,GACA,OAAA,KAAA,KAAA,SAAA,IAOA,EAAA,UAAA,QAAA,WACA,OAAA,KAAA,KAAA,WAMA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,KAAA,QAKA,EAAA,UAAA,MAAA,WACA,KAAA,KAAA,SASA,EAAA,UAAA,QAAA,SAAA,GACA,KAAA,KAAA,QAAA,IAEA,EAxGA,GA0GA,QAAA,QAAA;;AC9GA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,gBACA,EAAA,WAQA,SAAA,IACA,KAAA,KAAA,IAAA,EAAA,QAuFA,OAhFA,EAAA,UAAA,KAAA,SAAA,GACA,OAAA,KAAA,KAAA,IAAA,EAAA,IAOA,EAAA,UAAA,IAAA,SAAA,GACA,OAAA,KAAA,KAAA,IAAA,EAAA,IAOA,EAAA,UAAA,IAAA,WACA,OAAA,KAAA,KAAA,qBAAA,IAQA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,KAAA,SAMA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,KAAA,QAoBA,EAAA,UAAA,SAAA,SAAA,EAAA,GACA,OAAA,KAAA,KAAA,SAAA,EAAA,IAOA,EAAA,UAAA,QAAA,WACA,OAAA,KAAA,KAAA,WAKA,EAAA,UAAA,MAAA,WACA,KAAA,KAAA,SASA,EAAA,UAAA,QAAA,SAAA,GACA,KAAA,KAAA,QAAA,IAEA,EAhGA,GAkGA,QAAA,QAAA;;ACrGA,aAEA,IAAA,EADA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAEA,SAAA,GACA,EAAA,EAAA,OAAA,GAAA,SACA,EAAA,EAAA,MAAA,GAAA,QACA,EAAA,EAAA,cAAA,GAAA,gBACA,EAAA,EAAA,gBAAA,GAAA,kBAJA,CAKA,IAAA,EAAA,KACA,IAAA,EAAA,WACA,SAAA,EAAA,EAAA,QACA,IAAA,IAAA,EAAA,SACA,IAAA,IAAA,EAAA,IACA,KAAA,QAAA,EACA,KAAA,MAAA,EACA,KAAA,cACA,KAAA,YA8YA,OA5YA,EAAA,UAAA,YAAA,WACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,GACA,KAAA,0BAAA,KAGA,EAAA,UAAA,UAAA,WACA,IAAA,IAAA,KAAA,KAAA,MACA,GAAA,KAAA,MAAA,eAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,MAAA,GAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,GACA,KAAA,0BAAA,KAKA,EAAA,UAAA,0BAAA,SAAA,GACA,KAAA,MAAA,KACA,KAAA,MAAA,GAAA,KAGA,EAAA,UAAA,WAAA,WAEA,OADA,KAAA,QAAA,SAGA,EAAA,UAAA,SAAA,WACA,IAAA,EAAA,GACA,IAAA,IAAA,KAAA,KAAA,MACA,KAAA,MAAA,eAAA,KACA,EAAA,GAAA,KAAA,MAAA,GAAA,SAGA,OAAA,GAEA,EAAA,UAAA,UAAA,WACA,MAAA,CACA,QAAA,KAAA,aACA,MAAA,KAAA,aAGA,EAAA,UAAA,SAAA,WACA,OAAA,KAAA,aAEA,EAAA,UAAA,QAAA,WAGA,IAFA,IAAA,EAAA,KACA,EAAA,GACA,EAAA,EAAA,EAAA,KAAA,QAAA,OAAA,IAAA,CACA,IAAA,EAAA,KAAA,QAAA,GACA,EAAA,KAAA,CACA,GAAA,EACA,MAAA,EACA,WAAA,EACA,cAAA,IAEA,EAAA,EAAA,KAAA,MAAA,EAAA,GAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,cAAA,EAAA,EAAA,IAEA,OAAA,EACA,SAAA,EAAA,GACA,OAAA,EAAA,MAAA,GAIA,EAAA,MAAA,GAAA,OAHA,EAOA,SAAA,EAAA,EAAA,EAAA,EAAA,GAEA,QADA,IAAA,IAAA,EAAA,GACA,GAAA,GAAA,GAAA,EAAA,GAAA,CAGA,IAEA,IADA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,KAAA,CAAA,GAAA,EAAA,MAAA,EAAA,WAAA,IACA,EAAA,EAAA,EAAA,EAAA,GAEA,OAGA,EAAA,UAAA,eAAA,SAAA,EAAA,GACA,OAAA,KAAA,OAAA,EAAA,EAAA,EAAA,SAEA,EAAA,UAAA,cAAA,SAAA,EAAA,GACA,OAAA,KAAA,OAAA,EAAA,EAAA,EAAA,QAEA,EAAA,UAAA,aAAA,SAAA,EAAA,EAAA,GAEA,YADA,IAAA,IAAA,GAAA,GACA,EACA,KAAA,OAAA,EAAA,EAAA,EAAA,iBAGA,KAAA,OAAA,EAAA,EAAA,EAAA,gBAGA,EAAA,UAAA,qBAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,WAAA,GACA,EAAA,KAAA,WAAA,GACA,KAAA,iCAAA,EAAA,IAEA,EAAA,UAAA,iCAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,QAAA,GACA,KAAA,QAAA,GAAA,KAAA,QAAA,GACA,KAAA,QAAA,GAAA,GAEA,EAAA,UAAA,SAAA,SAAA,GACA,KAAA,aAAA,GACA,KAAA,sBAAA,GACA,KAAA,oBAAA,IAEA,EAAA,UAAA,iBAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,WAAA,GAIA,IAAA,IAAA,KAHA,GAAA,GACA,KAAA,iBAAA,EAAA,GAEA,KAAA,MACA,GAAA,KAAA,MAAA,eAAA,GAAA,CACA,IAAA,EAAA,KAAA,WAAA,EAAA,GACA,GAAA,GACA,KAAA,iBAAA,EAAA,EAAA,KAKA,EAAA,UAAA,gBAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,WAAA,GAIA,IAAA,IAAA,KAHA,GAAA,GACA,KAAA,iBAAA,EAAA,EAAA,GAEA,KAAA,MACA,GAAA,KAAA,MAAA,eAAA,GAAA,CACA,IAAA,EAAA,KAAA,WAAA,EAAA,GACA,GAAA,GACA,KAAA,iBAAA,EAAA,EAAA,EAAA,KAKA,EAAA,UAAA,eAAA,SAAA,EAAA,GACA,KAAA,gBAAA,EAAA,GACA,KAAA,MAAA,GAAA,IAEA,EAAA,UAAA,iBAAA,SAAA,EAAA,GACA,QAAA,IAAA,EACA,KAAA,gBAAA,QAGA,GAAA,EAAA,EAAA,CACA,IAAA,EAAA,KAAA,QAAA,OACA,KAAA,QAAA,OAAA,EAAA,EAAA,EAAA,EAAA,QAGA,KAAA,QAAA,OAAA,EAAA,EAAA,GAGA,KAAA,MAAA,GAAA,KAAA,MAAA,IAAA,IAEA,EAAA,UAAA,iBAAA,SAAA,EAAA,EAAA,GAGA,GAFA,KAAA,MAAA,GAAA,KAAA,MAAA,IAAA,GACA,KAAA,MAAA,GAAA,KAAA,MAAA,IAAA,QACA,IAAA,EACA,KAAA,gBAAA,EAAA,QAGA,GAAA,EAAA,EAAA,CACA,IAAA,EAAA,KAAA,MAAA,GAAA,OACA,KAAA,MAAA,GAAA,OAAA,EAAA,EAAA,EAAA,EAAA,QAGA,KAAA,MAAA,GAAA,OAAA,EAAA,EAAA,IAIA,EAAA,UAAA,OAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EACA,EAAA,KAAA,WAAA,GAMA,IAAA,IAAA,KAHA,KAAA,MAAA,IACA,EAEA,KAAA,MACA,GAAA,KAAA,MAAA,eAAA,GAAA,CACA,KAAA,WAAA,EAAA,GACA,MAIA,IAAA,EAAA,EACA,EAAA,KAAA,WAAA,GAMA,IAAA,IAAA,KAHA,KAAA,MAAA,IACA,EAEA,KAAA,MACA,GAAA,KAAA,MAAA,eAAA,GAAA,CACA,KAAA,WAAA,EAAA,GACA,MAIA,GAAA,GAAA,EACA,GAAA,GAAA,EAaA,OANA,KAAA,WAAA,GACA,EAAA,GACA,IAIA,GACA,KAAA,EAAA,OACA,KAAA,iBAAA,EAAA,GACA,MACA,KAAA,EAAA,MACA,KAAA,iBAAA,EAAA,EAAA,GACA,MACA,KAAA,EAAA,gBACA,KAAA,kBAAA,EAAA,GACA,MACA,KAAA,EAAA,cACA,KAAA,gBAAA,EAAA,QAQA,IAAA,IAAA,KADA,KAAA,WAAA,GACA,KAAA,MAAA,CACA,GAAA,KAAA,MAAA,eAAA,GAEA,IADA,EAAA,KAAA,WAAA,EAAA,KACA,EAAA,CACA,OAAA,GACA,KAAA,EAAA,OACA,KAAA,iBAAA,EAAA,EAAA,GACA,MACA,KAAA,EAAA,MACA,KAAA,iBAAA,EAAA,EAAA,EAAA,GACA,MACA,KAAA,EAAA,gBACA,KAAA,kBAAA,EAAA,GACA,MACA,KAAA,EAAA,cACA,KAAA,gBAAA,EAAA,GAGA,YAOA,GAAA,GAAA,EAAA,CAGA,IAAA,IAAA,KAAA,KAAA,MAAA,CACA,GAAA,KAAA,MAAA,eAAA,GAEA,IADA,EAAA,KAAA,WAAA,EAAA,KACA,EAAA,CAEA,KAAA,kBAAA,EAAA,GACA,OAIA,OAAA,GACA,KAAA,EAAA,OACA,KAAA,iBAAA,EAAA,GACA,MACA,KAAA,EAAA,MACA,KAAA,iBAAA,EAAA,EAAA,GACA,MACA,KAAA,EAAA,gBACA,KAAA,kBAAA,EAAA,GACA,MACA,KAAA,EAAA,cACA,KAAA,gBAAA,EAAA,QAIA,CAGA,IAAA,IAAA,KAAA,KAAA,MAAA,CACA,GAAA,KAAA,MAAA,eAAA,GAEA,IADA,EAAA,KAAA,WAAA,EAAA,KACA,EAAA,CACA,KAAA,kBAAA,EAAA,GACA,OAIA,IAAA,IAAA,KAAA,KAAA,MAAA,CAEA,IAAA,EADA,GAAA,KAAA,MAAA,eAAA,GAEA,IADA,EAAA,KAAA,WAAA,EAAA,KACA,EAAA,CACA,OAAA,GACA,KAAA,EAAA,OACA,KAAA,iBAAA,EAAA,EAAA,GACA,MACA,KAAA,EAAA,MACA,KAAA,iBAAA,EAAA,EAAA,EAAA,GACA,MACA,KAAA,EAAA,gBACA,KAAA,kBAAA,EAAA,GACA,MACA,KAAA,EAAA,cACA,KAAA,gBAAA,EAAA,GAGA,UAOA,EAAA,UAAA,kBAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAGA,OAFA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EACA,GAEA,EAAA,UAAA,aAAA,SAAA,GACA,IAAA,EAAA,KAAA,WAAA,GACA,GAAA,GACA,KAAA,WAAA,IAGA,EAAA,UAAA,sBAAA,SAAA,GAEA,IADA,IAAA,EAAA,GACA,EAAA,EAAA,EAAA,KAAA,MAAA,GAAA,OAAA,IAAA,CACA,IAAA,EAAA,KAAA,MAAA,GAAA,GACA,KAAA,sBAAA,GACA,EAAA,KAAA,GAEA,KAAA,WAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,KAAA,WAAA,EAAA,KAGA,EAAA,UAAA,oBAAA,SAAA,GACA,IAAA,IAAA,KAAA,KAAA,MACA,GAAA,KAAA,MAAA,eAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,MAAA,GAAA,OAAA,IAAA,CACA,KAAA,MAAA,GAAA,KACA,GACA,KAAA,kBAAA,EAAA,KAMA,EAAA,UAAA,WAAA,SAAA,UACA,KAAA,MAAA,IAEA,EAAA,UAAA,WAAA,SAAA,GACA,OAAA,KAAA,QAAA,QAAA,IAEA,EAAA,UAAA,WAAA,SAAA,EAAA,GACA,OAAA,KAAA,MAAA,GAAA,QAAA,IAEA,EAAA,UAAA,SAAA,SAAA,GACA,OAAA,KAAA,MAAA,IAEA,EAAA,UAAA,kBAAA,SAAA,EAAA,GACA,KAAA,MAAA,GAAA,QAAA,IAEA,EAAA,UAAA,gBAAA,SAAA,EAAA,GACA,KAAA,MAAA,GAAA,KAAA,IAEA,EAAA,UAAA,WAAA,SAAA,GACA,KAAA,QAAA,OAAA,EAAA,IAEA,EAAA,UAAA,kBAAA,SAAA,EAAA,GACA,KAAA,MAAA,GAAA,OAAA,EAAA,IAEA,EAAA,UAAA,kBAAA,SAAA,GACA,KAAA,QAAA,QAAA,IAEA,EAAA,UAAA,gBAAA,SAAA,GACA,KAAA,QAAA,KAAA,IAEA,EArZA,GAuZA,QAAA,QAAA;;AChaA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAOA,IAAA,EAAA,QAAA,YACA,QAAA,OAAA,EACA,IAAA,EAAA,QAAA,SACA,QAAA,IAAA,EAAA,QACA,IAAA,EAAA,QAAA,YACA,QAAA,OAAA,EAAA,QACA,IAAA,EAAA,QAAA,cACA,QAAA,SAAA,EAAA,QACA,IAAA,EAAA,QAAA,gBACA,QAAA,WAAA,EAAA,QACA,IAAA,EAAA,QAAA,UACA,QAAA,KAAA,EAAA,QACA,IAAA,EAAA,QAAA,sBACA,QAAA,iBAAA,EAAA,QACA,IAAA,EAAA,QAAA,gBACA,QAAA,WAAA,EAAA,QACA,IAAA,EAAA,QAAA,qBACA,QAAA,gBAAA,EAAA,QACA,IAAA,EAAA,QAAA,uBACA,QAAA,kBAAA,EAAA,QACA,IAAA,EAAA,QAAA,uBACA,QAAA,kBAAA,EAAA,QACA,IAAA,EAAA,QAAA,WACA,QAAA,MAAA,EAAA,QACA,IAAA,EAAA,QAAA,mBACA,QAAA,cAAA,EAAA,QACA,IAAA,EAAA,QAAA,SACA,QAAA,IAAA,EAAA,QACA,IAAA,EAAA,QAAA,WACA,QAAA,MAAA,EAAA,QACA,IAAA,EAAA,QAAA,mBACA,QAAA,cAAA,EAAA,QACA,IAAA,EAAA,QAAA,UACA,QAAA,KAAA;;;ACvCA,IAAA,GAFA,SAAA,EAAA,GAAA,iBAAA,SAAA,oBAAA,OAAA,EAAA,SAAA,mBAAA,GAAA,EAAA,IAAA,EAAA,CAAA,WAAA,GAAA,EAAA,EAAA,GAAA,IAAA,CAAA,KAAA,SAAA,GAAA,aAAA,SAAA,EAAA,GAAA,GAAA,IAAA,EAAA,OAAA,OAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,EAAA,EAAA,GAAA,KAAA,IAAA,IAAA,KAAA,IAAA,EAAA,IAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,SAAA,EAAA,GAAA,GAAA,IAAA,EAAA,OAAA,MAAA,IAAA,MAAA,yCAAA,OAAA,EAAA,GAAA,EAAA,OAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,IAAA,EAAA,EAAA,GAAA,GAAA,OAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,IAAA,EAAA,OAAA,MAAA,IAAA,MAAA,6CAAA,OAAA,EAAA,EAAA,GAAA,EAAA,OAAA,SAAA,EAAA,GAAA,GAAA,IAAA,EAAA,OAAA,OAAA,EAAA,IAAA,EAAA,EAAA,GAAA,OAAA,KAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,IAAA,EAAA,OAAA,MAAA,IAAA,MAAA,yCAAA,GAAA,IAAA,EAAA,OAAA,OAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,QAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,SAAA,EAAA,GAAA,GAAA,IAAA,EAAA,OAAA,MAAA,IAAA,MAAA,wCAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,IAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,IAAA,EAAA,OAAA,MAAA,IAAA,MAAA,wCAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,IAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,IAAA,EAAA,OAAA,MAAA,IAAA,MAAA,8CAAA,GAAA,EAAA,GAAA,EAAA,EAAA,MAAA,IAAA,MAAA,qCAAA,OAAA,IAAA,EAAA,EAAA,EAAA,OAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,KAAA,GAAA,GAAA,EAAA,OAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,GAAA,CAAA,GAAA,IAAA,EAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,IAAA,GAAA,EAAA,GAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,KAAA,KAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,KAAA,IAAA,EAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,IAAA,KAAA,IAAA,EAAA,KAAA,MAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,GAAA,IAAA,KAAA,EAAA,GAAA,GAAA,IAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAAA,IAAA,EAAA,EAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,QAAA,GAAA,MAAA,QAAA,GAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,CAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,KAAA,EAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,GAAA,EAAA,KAAA,GAAA,IAAA,IAAA,EAAA,CAAA,EAAA,EAAA,OAAA,GAAA,EAAA,QAAA,CAAA,IAAA,EAAA,KAAA,KAAA,EAAA,OAAA,EAAA,KAAA,MAAA,EAAA,OAAA,KAAA,EAAA,GAAA,GAAA,CAAA,IAAA,EAAA,KAAA,OAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,CAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,OAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,EAAA,EAAA,OAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,MAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,KAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,EAAA,EAAA,OAAA,GAAA,OAAA,EAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,OAAA,EAAA,EAAA,OAAA,IAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,GAAA,IAAA,EAAA,OAAA,EAAA,EAAA,OAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,OAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,GAAA,iBAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,KAAA,KAAA,IAAA,EAAA,GAAA,IAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,EAAA,GAAA,KAAA,OAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,MAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,QAAA,QAAA,GAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,IAAA,GAAA,EAAA,KAAA,IAAA,EAAA,EAAA,GAAA,KAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAAA,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,EAAA,EAAA,CAAA,IAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,KAAA,OAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,EAAA,EAAA,GAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA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A,MAAA,EAAA,CAAA,KAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,GAAA,IAAA,GAAA,KAAA,GAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,MAAA,KAAA,OAAA,EAAA,CAAA,KAAA,IAAA,IAAA,GAAA,KAAA,IAAA,IAAA,IAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IAAA,KAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,EAAA,CAAA,KAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,EAAA,CAAA,KAAA,IAAA,IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,GAAA,IAAA,GAAA,KAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,EAAA,CAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,EAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,EAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,IAAA,IAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,GAAA,KAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,IAAA,IAAA,KAAA,GAAA,IAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,GAAA,KAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,GAAA,KAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,GAAA,KAAA,GAAA,MAAA,GAAA,MAAA,IAAA,GAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,GAAA,KAAA,GAAA,MAAA,GAAA,MAAA,IAAA,KAAA,KAAA,MAAA,IAAA,GAAA,KAAA,OAAA,GAAA,CAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,KAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,IAAA,GAAA,CAAA,KAAA,KAAA,IAAA,IAAA,KAAA,MAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,MAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,MAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,KAAA,IAAA,MAAA,KAAA,KAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,KAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,MAAA,IAAA,KAAA,KAAA,MAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,GAAA,KAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,KAAA,OAAA,GAAA,CAAA,KAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,KAAA,KAAA,MAAA,IAAA,MAAA,KAA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","file":"worldgen.worker.d52b35d9.map","sourceRoot":"../src","sourcesContent":["(function (root, factory) {\n  if (typeof exports === 'object') {\n      module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n      define(factory);\n  } else {\n      root.Alea = factory();\n  }\n}(this, function () {\n\n  'use strict';\n\n  // From http://baagoe.com/en/RandomMusings/javascript/\n\n  // importState to sync generator states\n  Alea.importState = function(i){\n    var random = new Alea();\n    random.importState(i);\n    return random;\n  };\n\n  return Alea;\n\n  function Alea() {\n    return (function(args) {\n      // Johannes Baagøe <baagoe@baagoe.com>, 2010\n      var s0 = 0;\n      var s1 = 0;\n      var s2 = 0;\n      var c = 1;\n\n      if (args.length == 0) {\n        args = [+new Date];\n      }\n      var mash = Mash();\n      s0 = mash(' ');\n      s1 = mash(' ');\n      s2 = mash(' ');\n\n      for (var i = 0; i < args.length; i++) {\n        s0 -= mash(args[i]);\n        if (s0 < 0) {\n          s0 += 1;\n        }\n        s1 -= mash(args[i]);\n        if (s1 < 0) {\n          s1 += 1;\n        }\n        s2 -= mash(args[i]);\n        if (s2 < 0) {\n          s2 += 1;\n        }\n      }\n      mash = null;\n\n      var random = function() {\n        var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n        s0 = s1;\n        s1 = s2;\n        return s2 = t - (c = t | 0);\n      };\n      random.uint32 = function() {\n        return random() * 0x100000000; // 2^32\n      };\n      random.fract53 = function() {\n        return random() + \n          (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n      };\n      random.version = 'Alea 0.9';\n      random.args = args;\n\n      // my own additions to sync state between two generators\n      random.exportState = function(){\n        return [s0, s1, s2, c];\n      };\n      random.importState = function(i){\n        s0 = +i[0] || 0;\n        s1 = +i[1] || 0;\n        s2 = +i[2] || 0;\n        c = +i[3] || 0;\n      };\n \n      return random;\n\n    } (Array.prototype.slice.call(arguments)));\n  }\n\n  function Mash() {\n    var n = 0xefc8249d;\n\n    var mash = function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n\n    mash.version = 'Mash 0.9';\n    return mash;\n  }\n}));\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes Baagøe <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","/*\n  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\nthrowErrorTolerant: true,\nthrowError: true, generateStatement: true, peek: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseUnaryExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.esprima = {}));\n    }\n}(this, function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        FnExprTokens,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        SyntaxTreeDelegate,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        delegate,\n        lookahead,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8,\n        RegularExpression: 9\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n    TokenName[Token.RegularExpression] = 'RegularExpression';\n\n    // A function following one of those tokens is an expression.\n    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n                    'return', 'case', 'delete', 'throw', 'void',\n                    // assignment operators\n                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',\n                    '&=', '|=', '^=', ',',\n                    // binary/unary operators\n                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n                    '<=', '<', '>', '!=', '!=='];\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0\\u08A2-\\u08AC\\u08E4-\\u08FE\\u0900-\\u0963\\u0966-\\u096F\\u0971-\\u0977\\u0979-\\u097F\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1D00-\\u1DE6\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA697\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7B\\uAA80-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE26\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        /* istanbul ignore if */\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function isDecimalDigit(ch) {\n        return (ch >= 48 && ch <= 57);   // 0..9\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\n            (ch === 0x5C) ||                      // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\n            (ch >= 0x30 && ch <= 0x39) ||         // 0..9\n            (ch === 0x5C) ||                      // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        // 'const' is specialized as Keyword in V8.\n        // 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.\n        // Some others are from future reserved words.\n\n        switch (id.length) {\n        case 2:\n            return (id === 'if') || (id === 'in') || (id === 'do');\n        case 3:\n            return (id === 'var') || (id === 'for') || (id === 'new') ||\n                (id === 'try') || (id === 'let');\n        case 4:\n            return (id === 'this') || (id === 'else') || (id === 'case') ||\n                (id === 'void') || (id === 'with') || (id === 'enum');\n        case 5:\n            return (id === 'while') || (id === 'break') || (id === 'catch') ||\n                (id === 'throw') || (id === 'const') || (id === 'yield') ||\n                (id === 'class') || (id === 'super');\n        case 6:\n            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n                (id === 'switch') || (id === 'export') || (id === 'import');\n        case 7:\n            return (id === 'default') || (id === 'finally') || (id === 'extends');\n        case 8:\n            return (id === 'function') || (id === 'continue') || (id === 'debugger');\n        case 10:\n            return (id === 'instanceof');\n        default:\n            return false;\n        }\n    }\n\n    // 7.4 Comments\n\n    function addComment(type, value, start, end, loc) {\n        var comment, attacher;\n\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (state.lastCommentStart >= start) {\n            return;\n        }\n        state.lastCommentStart = start;\n\n        comment = {\n            type: type,\n            value: value\n        };\n        if (extra.range) {\n            comment.range = [start, end];\n        }\n        if (extra.loc) {\n            comment.loc = loc;\n        }\n        extra.comments.push(comment);\n        if (extra.attachComment) {\n            extra.leadingComments.push(comment);\n            extra.trailingComments.push(comment);\n        }\n    }\n\n    function skipSingleLineComment(offset) {\n        var start, loc, ch, comment;\n\n        start = index - offset;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart - offset\n            }\n        };\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            ++index;\n            if (isLineTerminator(ch)) {\n                if (extra.comments) {\n                    comment = source.slice(start + offset, index - 1);\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    addComment('Line', comment, start, index - 1, loc);\n                }\n                if (ch === 13 && source.charCodeAt(index) === 10) {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n                return;\n            }\n        }\n\n        if (extra.comments) {\n            comment = source.slice(start + offset, index);\n            loc.end = {\n                line: lineNumber,\n                column: index - lineStart\n            };\n            addComment('Line', comment, start, index, loc);\n        }\n    }\n\n    function skipMultiLineComment() {\n        var start, loc, ch, comment;\n\n        if (extra.comments) {\n            start = index - 2;\n            loc = {\n                start: {\n                    line: lineNumber,\n                    column: index - lineStart - 2\n                }\n            };\n        }\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (isLineTerminator(ch)) {\n                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {\n                    ++index;\n                }\n                ++lineNumber;\n                ++index;\n                lineStart = index;\n                if (index >= length) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            } else if (ch === 0x2A) {\n                // Block comment ends with '*/'.\n                if (source.charCodeAt(index + 1) === 0x2F) {\n                    ++index;\n                    ++index;\n                    if (extra.comments) {\n                        comment = source.slice(start + 2, index - 2);\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        addComment('Block', comment, start, index, loc);\n                    }\n                    return;\n                }\n                ++index;\n            } else {\n                ++index;\n            }\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function skipComment() {\n        var ch, start;\n\n        start = (index === 0);\n        while (index < length) {\n            ch = source.charCodeAt(index);\n\n            if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n                start = true;\n            } else if (ch === 0x2F) { // U+002F is '/'\n                ch = source.charCodeAt(index + 1);\n                if (ch === 0x2F) {\n                    ++index;\n                    ++index;\n                    skipSingleLineComment(2);\n                    start = true;\n                } else if (ch === 0x2A) {  // U+002A is '*'\n                    ++index;\n                    ++index;\n                    skipMultiLineComment();\n                } else {\n                    break;\n                }\n            } else if (start && ch === 0x2D) { // U+002D is '-'\n                // U+003E is '>'\n                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {\n                    // '-->' is a single-line comment\n                    index += 3;\n                    skipSingleLineComment(3);\n                } else {\n                    break;\n                }\n            } else if (ch === 0x3C) { // U+003C is '<'\n                if (source.slice(index + 1, index + 4) === '!--') {\n                    ++index; // `<`\n                    ++index; // `!`\n                    ++index; // `-`\n                    ++index; // `-`\n                    skipSingleLineComment(4);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = source[index++];\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function getEscapedIdentifier() {\n        var ch, id;\n\n        ch = source.charCodeAt(index++);\n        id = String.fromCharCode(ch);\n\n        // '\\u' (U+005C, U+0075) denotes an escaped character.\n        if (ch === 0x5C) {\n            if (source.charCodeAt(index) !== 0x75) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n            ++index;\n            ch = scanHexEscape('u');\n            if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n            id = ch;\n        }\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            ++index;\n            id += String.fromCharCode(ch);\n\n            // '\\u' (U+005C, U+0075) denotes an escaped character.\n            if (ch === 0x5C) {\n                id = id.substr(0, id.length - 1);\n                if (source.charCodeAt(index) !== 0x75) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n                ++index;\n                ch = scanHexEscape('u');\n                if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n                id += ch;\n            }\n        }\n\n        return id;\n    }\n\n    function getIdentifier() {\n        var start, ch;\n\n        start = index++;\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (ch === 0x5C) {\n                // Blackslash (U+005C) marks Unicode escape sequence.\n                index = start;\n                return getEscapedIdentifier();\n            }\n            if (isIdentifierPart(ch)) {\n                ++index;\n            } else {\n                break;\n            }\n        }\n\n        return source.slice(start, index);\n    }\n\n    function scanIdentifier() {\n        var start, id, type;\n\n        start = index;\n\n        // Backslash (U+005C) starts an escaped character.\n        id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            type = Token.Identifier;\n        } else if (isKeyword(id)) {\n            type = Token.Keyword;\n        } else if (id === 'null') {\n            type = Token.NullLiteral;\n        } else if (id === 'true' || id === 'false') {\n            type = Token.BooleanLiteral;\n        } else {\n            type = Token.Identifier;\n        }\n\n        return {\n            type: type,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            code = source.charCodeAt(index),\n            code2,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        switch (code) {\n\n        // Check for most common single-character punctuators.\n        case 0x2E:  // . dot\n        case 0x28:  // ( open bracket\n        case 0x29:  // ) close bracket\n        case 0x3B:  // ; semicolon\n        case 0x2C:  // , comma\n        case 0x7B:  // { open curly brace\n        case 0x7D:  // } close curly brace\n        case 0x5B:  // [\n        case 0x5D:  // ]\n        case 0x3A:  // :\n        case 0x3F:  // ?\n        case 0x7E:  // ~\n            ++index;\n            if (extra.tokenize) {\n                if (code === 0x28) {\n                    extra.openParenToken = extra.tokens.length;\n                } else if (code === 0x7B) {\n                    extra.openCurlyToken = extra.tokens.length;\n                }\n            }\n            return {\n                type: Token.Punctuator,\n                value: String.fromCharCode(code),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n\n        default:\n            code2 = source.charCodeAt(index + 1);\n\n            // '=' (U+003D) marks an assignment or comparison operator.\n            if (code2 === 0x3D) {\n                switch (code) {\n                case 0x2B:  // +\n                case 0x2D:  // -\n                case 0x2F:  // /\n                case 0x3C:  // <\n                case 0x3E:  // >\n                case 0x5E:  // ^\n                case 0x7C:  // |\n                case 0x25:  // %\n                case 0x26:  // &\n                case 0x2A:  // *\n                    index += 2;\n                    return {\n                        type: Token.Punctuator,\n                        value: String.fromCharCode(code) + String.fromCharCode(code2),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        start: start,\n                        end: index\n                    };\n\n                case 0x21: // !\n                case 0x3D: // =\n                    index += 2;\n\n                    // !== and ===\n                    if (source.charCodeAt(index) === 0x3D) {\n                        ++index;\n                    }\n                    return {\n                        type: Token.Punctuator,\n                        value: source.slice(start, index),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        start: start,\n                        end: index\n                    };\n                }\n            }\n        }\n\n        // 4-character punctuator: >>>=\n\n        ch4 = source.substr(index, 4);\n\n        if (ch4 === '>>>=') {\n            index += 4;\n            return {\n                type: Token.Punctuator,\n                value: ch4,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        ch3 = ch4.substr(0, 3);\n\n        if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: ch3,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        // Other 2-character punctuators: ++ -- << >> && ||\n        ch2 = ch3.substr(0, 2);\n\n        if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {\n            index += 2;\n            return {\n                type: Token.Punctuator,\n                value: ch2,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        // 1-character punctuators: < > = ! + - * % & | ^ /\n        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanHexLiteral(start) {\n        var number = '';\n\n        while (index < length) {\n            if (!isHexDigit(source[index])) {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (number.length === 0) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt('0x' + number, 16),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function scanOctalLiteral(start) {\n        var number = '0' + source[index++];\n        while (index < length) {\n            if (!isOctalDigit(source[index])) {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt(number, 8),\n            octal: true,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function isImplicitOctalLiteral() {\n        var i, ch;\n\n        // Implicit octal, unless there is a non-octal digit.\n        // (Annex B.1.1 on Numeric Literals)\n        for (i = index + 1; i < length; ++i) {\n            ch = source[i];\n            if (ch === '8' || ch === '9') {\n                return false;\n            }\n            if (!isOctalDigit(ch)) {\n                return true;\n            }\n        }\n\n        return true;\n    }\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = source[index++];\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    ++index;\n                    return scanHexLiteral(start);\n                }\n                if (isOctalDigit(ch)) {\n                    if (isImplicitOctalLiteral()) {\n                        return scanOctalLiteral(start);\n                    }\n                }\n            }\n\n            while (isDecimalDigit(source.charCodeAt(index))) {\n                number += source[index++];\n            }\n            ch = source[index];\n        }\n\n        if (ch === '.') {\n            number += source[index++];\n            while (isDecimalDigit(source.charCodeAt(index))) {\n                number += source[index++];\n            }\n            ch = source[index];\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += source[index++];\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += source[index++];\n            }\n            if (isDecimalDigit(source.charCodeAt(index))) {\n                while (isDecimalDigit(source.charCodeAt(index))) {\n                    number += source[index++];\n                }\n            } else {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false, startLineNumber, startLineStart;\n        startLineNumber = lineNumber;\n        startLineStart = lineStart;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n                    switch (ch) {\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\x0B';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    lineStart = index;\n                }\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            startLineNumber: startLineNumber,\n            startLineStart: startLineStart,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function testRegExp(pattern, flags) {\n        var value;\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n        return value;\n    }\n\n    function scanRegExpBody() {\n        var ch, str, classMarker, terminated, body;\n\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = source[index++];\n\n        classMarker = false;\n        terminated = false;\n        while (index < length) {\n            ch = source[index++];\n            str += ch;\n            if (ch === '\\\\') {\n                ch = source[index++];\n                // ECMA-262 7.8.5\n                if (isLineTerminator(ch.charCodeAt(0))) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n                str += ch;\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                throwError({}, Messages.UnterminatedRegExp);\n            } else if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        body = str.substr(1, str.length - 2);\n        return {\n            value: body,\n            literal: str\n        };\n    }\n\n    function scanRegExpFlags() {\n        var ch, str, flags, restore;\n\n        str = '';\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch.charCodeAt(0))) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        for (str += '\\\\u'; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                    throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');\n                } else {\n                    str += '\\\\';\n                    throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        return {\n            value: flags,\n            literal: str\n        };\n    }\n\n    function scanRegExp() {\n        var start, body, flags, pattern, value;\n\n        lookahead = null;\n        skipComment();\n        start = index;\n\n        body = scanRegExpBody();\n        flags = scanRegExpFlags();\n        value = testRegExp(body.value, flags.value);\n\n        if (extra.tokenize) {\n            return {\n                type: Token.RegularExpression,\n                value: value,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        return {\n            literal: body.literal + flags.literal,\n            value: value,\n            start: start,\n            end: index\n        };\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        /* istanbul ignore next */\n        if (!extra.tokenize) {\n            // Pop the previous token, which is likely '/' or '/='\n            if (extra.tokens.length > 0) {\n                token = extra.tokens[extra.tokens.length - 1];\n                if (token.range[0] === pos && token.type === 'Punctuator') {\n                    if (token.value === '/' || token.value === '/=') {\n                        extra.tokens.pop();\n                    }\n                }\n            }\n\n            extra.tokens.push({\n                type: 'RegularExpression',\n                value: regex.literal,\n                range: [pos, index],\n                loc: loc\n            });\n        }\n\n        return regex;\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advanceSlash() {\n        var prevToken,\n            checkToken;\n        // Using the following algorithm:\n        // https://github.com/mozilla/sweet.js/wiki/design\n        prevToken = extra.tokens[extra.tokens.length - 1];\n        if (!prevToken) {\n            // Nothing before that: it cannot be a division.\n            return collectRegex();\n        }\n        if (prevToken.type === 'Punctuator') {\n            if (prevToken.value === ']') {\n                return scanPunctuator();\n            }\n            if (prevToken.value === ')') {\n                checkToken = extra.tokens[extra.openParenToken - 1];\n                if (checkToken &&\n                        checkToken.type === 'Keyword' &&\n                        (checkToken.value === 'if' ||\n                         checkToken.value === 'while' ||\n                         checkToken.value === 'for' ||\n                         checkToken.value === 'with')) {\n                    return collectRegex();\n                }\n                return scanPunctuator();\n            }\n            if (prevToken.value === '}') {\n                // Dividing a function by anything makes little sense,\n                // but we have to check for that.\n                if (extra.tokens[extra.openCurlyToken - 3] &&\n                        extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {\n                    // Anonymous function.\n                    checkToken = extra.tokens[extra.openCurlyToken - 4];\n                    if (!checkToken) {\n                        return scanPunctuator();\n                    }\n                } else if (extra.tokens[extra.openCurlyToken - 4] &&\n                        extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {\n                    // Named function.\n                    checkToken = extra.tokens[extra.openCurlyToken - 5];\n                    if (!checkToken) {\n                        return collectRegex();\n                    }\n                } else {\n                    return scanPunctuator();\n                }\n                // checkToken determines whether the function is\n                // a declaration or an expression.\n                if (FnExprTokens.indexOf(checkToken.value) >= 0) {\n                    // It is an expression.\n                    return scanPunctuator();\n                }\n                // It is a declaration.\n                return collectRegex();\n            }\n            return collectRegex();\n        }\n        if (prevToken.type === 'Keyword' && prevToken.value !== 'this') {\n            return collectRegex();\n        }\n        return scanPunctuator();\n    }\n\n    function advance() {\n        var ch;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: index,\n                end: index\n            };\n        }\n\n        ch = source.charCodeAt(index);\n\n        if (isIdentifierStart(ch)) {\n            return scanIdentifier();\n        }\n\n        // Very common: ( and ) and ;\n        if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n            return scanPunctuator();\n        }\n\n        // String literal starts with single quote (U+0027) or double quote (U+0022).\n        if (ch === 0x27 || ch === 0x22) {\n            return scanStringLiteral();\n        }\n\n\n        // Dot (.) U+002E can also start a floating-point number, hence the need\n        // to check the next character.\n        if (ch === 0x2E) {\n            if (isDecimalDigit(source.charCodeAt(index + 1))) {\n                return scanNumericLiteral();\n            }\n            return scanPunctuator();\n        }\n\n        if (isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        // Slash (/) U+002F can also start a regex.\n        if (extra.tokenize && ch === 0x2F) {\n            return advanceSlash();\n        }\n\n        return scanPunctuator();\n    }\n\n    function collectToken() {\n        var loc, token, range, value;\n\n        skipComment();\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            value = source.slice(token.start, token.end);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: [token.start, token.end],\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function lex() {\n        var token;\n\n        token = lookahead;\n        index = token.end;\n        lineNumber = token.lineNumber;\n        lineStart = token.lineStart;\n\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\n\n        index = token.end;\n        lineNumber = token.lineNumber;\n        lineStart = token.lineStart;\n\n        return token;\n    }\n\n    function peek() {\n        var pos, line, start;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n    }\n\n    function Position(line, column) {\n        this.line = line;\n        this.column = column;\n    }\n\n    function SourceLocation(startLine, startColumn, line, column) {\n        this.start = new Position(startLine, startColumn);\n        this.end = new Position(line, column);\n    }\n\n    SyntaxTreeDelegate = {\n\n        name: 'SyntaxTree',\n\n        processComment: function (node) {\n            var lastChild, trailingComments;\n\n            if (node.type === Syntax.Program) {\n                if (node.body.length > 0) {\n                    return;\n                }\n            }\n\n            if (extra.trailingComments.length > 0) {\n                if (extra.trailingComments[0].range[0] >= node.range[1]) {\n                    trailingComments = extra.trailingComments;\n                    extra.trailingComments = [];\n                } else {\n                    extra.trailingComments.length = 0;\n                }\n            } else {\n                if (extra.bottomRightStack.length > 0 &&\n                        extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments &&\n                        extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments[0].range[0] >= node.range[1]) {\n                    trailingComments = extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;\n                    delete extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;\n                }\n            }\n\n            // Eating the stack.\n            while (extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].range[0] >= node.range[0]) {\n                lastChild = extra.bottomRightStack.pop();\n            }\n\n            if (lastChild) {\n                if (lastChild.leadingComments && lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= node.range[0]) {\n                    node.leadingComments = lastChild.leadingComments;\n                    delete lastChild.leadingComments;\n                }\n            } else if (extra.leadingComments.length > 0 && extra.leadingComments[extra.leadingComments.length - 1].range[1] <= node.range[0]) {\n                node.leadingComments = extra.leadingComments;\n                extra.leadingComments = [];\n            }\n\n\n            if (trailingComments) {\n                node.trailingComments = trailingComments;\n            }\n\n            extra.bottomRightStack.push(node);\n        },\n\n        markEnd: function (node, startToken) {\n            if (extra.range) {\n                node.range = [startToken.start, index];\n            }\n            if (extra.loc) {\n                node.loc = new SourceLocation(\n                    startToken.startLineNumber === undefined ?  startToken.lineNumber : startToken.startLineNumber,\n                    startToken.start - (startToken.startLineStart === undefined ?  startToken.lineStart : startToken.startLineStart),\n                    lineNumber,\n                    index - lineStart\n                );\n                this.postProcess(node);\n            }\n\n            if (extra.attachComment) {\n                this.processComment(node);\n            }\n            return node;\n        },\n\n        postProcess: function (node) {\n            if (extra.source) {\n                node.loc.source = extra.source;\n            }\n            return node;\n        },\n\n        createArrayExpression: function (elements) {\n            return {\n                type: Syntax.ArrayExpression,\n                elements: elements\n            };\n        },\n\n        createAssignmentExpression: function (operator, left, right) {\n            return {\n                type: Syntax.AssignmentExpression,\n                operator: operator,\n                left: left,\n                right: right\n            };\n        },\n\n        createBinaryExpression: function (operator, left, right) {\n            var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :\n                        Syntax.BinaryExpression;\n            return {\n                type: type,\n                operator: operator,\n                left: left,\n                right: right\n            };\n        },\n\n        createBlockStatement: function (body) {\n            return {\n                type: Syntax.BlockStatement,\n                body: body\n            };\n        },\n\n        createBreakStatement: function (label) {\n            return {\n                type: Syntax.BreakStatement,\n                label: label\n            };\n        },\n\n        createCallExpression: function (callee, args) {\n            return {\n                type: Syntax.CallExpression,\n                callee: callee,\n                'arguments': args\n            };\n        },\n\n        createCatchClause: function (param, body) {\n            return {\n                type: Syntax.CatchClause,\n                param: param,\n                body: body\n            };\n        },\n\n        createConditionalExpression: function (test, consequent, alternate) {\n            return {\n                type: Syntax.ConditionalExpression,\n                test: test,\n                consequent: consequent,\n                alternate: alternate\n            };\n        },\n\n        createContinueStatement: function (label) {\n            return {\n                type: Syntax.ContinueStatement,\n                label: label\n            };\n        },\n\n        createDebuggerStatement: function () {\n            return {\n                type: Syntax.DebuggerStatement\n            };\n        },\n\n        createDoWhileStatement: function (body, test) {\n            return {\n                type: Syntax.DoWhileStatement,\n                body: body,\n                test: test\n            };\n        },\n\n        createEmptyStatement: function () {\n            return {\n                type: Syntax.EmptyStatement\n            };\n        },\n\n        createExpressionStatement: function (expression) {\n            return {\n                type: Syntax.ExpressionStatement,\n                expression: expression\n            };\n        },\n\n        createForStatement: function (init, test, update, body) {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        },\n\n        createForInStatement: function (left, right, body) {\n            return {\n                type: Syntax.ForInStatement,\n                left: left,\n                right: right,\n                body: body,\n                each: false\n            };\n        },\n\n        createFunctionDeclaration: function (id, params, defaults, body) {\n            return {\n                type: Syntax.FunctionDeclaration,\n                id: id,\n                params: params,\n                defaults: defaults,\n                body: body,\n                rest: null,\n                generator: false,\n                expression: false\n            };\n        },\n\n        createFunctionExpression: function (id, params, defaults, body) {\n            return {\n                type: Syntax.FunctionExpression,\n                id: id,\n                params: params,\n                defaults: defaults,\n                body: body,\n                rest: null,\n                generator: false,\n                expression: false\n            };\n        },\n\n        createIdentifier: function (name) {\n            return {\n                type: Syntax.Identifier,\n                name: name\n            };\n        },\n\n        createIfStatement: function (test, consequent, alternate) {\n            return {\n                type: Syntax.IfStatement,\n                test: test,\n                consequent: consequent,\n                alternate: alternate\n            };\n        },\n\n        createLabeledStatement: function (label, body) {\n            return {\n                type: Syntax.LabeledStatement,\n                label: label,\n                body: body\n            };\n        },\n\n        createLiteral: function (token) {\n            return {\n                type: Syntax.Literal,\n                value: token.value,\n                raw: source.slice(token.start, token.end)\n            };\n        },\n\n        createMemberExpression: function (accessor, object, property) {\n            return {\n                type: Syntax.MemberExpression,\n                computed: accessor === '[',\n                object: object,\n                property: property\n            };\n        },\n\n        createNewExpression: function (callee, args) {\n            return {\n                type: Syntax.NewExpression,\n                callee: callee,\n                'arguments': args\n            };\n        },\n\n        createObjectExpression: function (properties) {\n            return {\n                type: Syntax.ObjectExpression,\n                properties: properties\n            };\n        },\n\n        createPostfixExpression: function (operator, argument) {\n            return {\n                type: Syntax.UpdateExpression,\n                operator: operator,\n                argument: argument,\n                prefix: false\n            };\n        },\n\n        createProgram: function (body) {\n            return {\n                type: Syntax.Program,\n                body: body\n            };\n        },\n\n        createProperty: function (kind, key, value) {\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: value,\n                kind: kind\n            };\n        },\n\n        createReturnStatement: function (argument) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: argument\n            };\n        },\n\n        createSequenceExpression: function (expressions) {\n            return {\n                type: Syntax.SequenceExpression,\n                expressions: expressions\n            };\n        },\n\n        createSwitchCase: function (test, consequent) {\n            return {\n                type: Syntax.SwitchCase,\n                test: test,\n                consequent: consequent\n            };\n        },\n\n        createSwitchStatement: function (discriminant, cases) {\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant,\n                cases: cases\n            };\n        },\n\n        createThisExpression: function () {\n            return {\n                type: Syntax.ThisExpression\n            };\n        },\n\n        createThrowStatement: function (argument) {\n            return {\n                type: Syntax.ThrowStatement,\n                argument: argument\n            };\n        },\n\n        createTryStatement: function (block, guardedHandlers, handlers, finalizer) {\n            return {\n                type: Syntax.TryStatement,\n                block: block,\n                guardedHandlers: guardedHandlers,\n                handlers: handlers,\n                finalizer: finalizer\n            };\n        },\n\n        createUnaryExpression: function (operator, argument) {\n            if (operator === '++' || operator === '--') {\n                return {\n                    type: Syntax.UpdateExpression,\n                    operator: operator,\n                    argument: argument,\n                    prefix: true\n                };\n            }\n            return {\n                type: Syntax.UnaryExpression,\n                operator: operator,\n                argument: argument,\n                prefix: true\n            };\n        },\n\n        createVariableDeclaration: function (declarations, kind) {\n            return {\n                type: Syntax.VariableDeclaration,\n                declarations: declarations,\n                kind: kind\n            };\n        },\n\n        createVariableDeclarator: function (id, init) {\n            return {\n                type: Syntax.VariableDeclarator,\n                id: id,\n                init: init\n            };\n        },\n\n        createWhileStatement: function (test, body) {\n            return {\n                type: Syntax.WhileStatement,\n                test: test,\n                body: body\n            };\n        },\n\n        createWithStatement: function (object, body) {\n            return {\n                type: Syntax.WithStatement,\n                object: object,\n                body: body\n            };\n        }\n    };\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    assert(index < args.length, 'Message reference must be in range');\n                    return args[index];\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.start;\n            error.lineNumber = token.lineNumber;\n            error.column = token.start - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        error.description = msg;\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictReservedWord);\n                return;\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        return lookahead.type === Token.Punctuator && lookahead.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        return lookahead.type === Token.Keyword && lookahead.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var op;\n\n        if (lookahead.type !== Token.Punctuator) {\n            return false;\n        }\n        op = lookahead.value;\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var line, oldIndex = index, oldLineNumber = lineNumber,\n            oldLineStart = lineStart, oldLookahead = lookahead;\n\n        // Catch the very common case first: immediately a semicolon (U+003B).\n        if (source.charCodeAt(index) === 0x3B || match(';')) {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            index = oldIndex;\n            lineNumber = oldLineNumber;\n            lineStart = oldLineStart;\n            lookahead = oldLookahead;\n            return;\n        }\n\n        if (lookahead.type !== Token.EOF && !match('}')) {\n            throwUnexpected(lookahead);\n        }\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [], startToken;\n\n        startToken = lookahead;\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        lex();\n\n        return delegate.markEnd(delegate.createArrayExpression(elements), startToken);\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body, startToken;\n\n        previousStrict = strict;\n        startToken = lookahead;\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwErrorTolerant(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n        return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body), startToken);\n    }\n\n    function parseObjectPropertyKey() {\n        var token, startToken;\n\n        startToken = lookahead;\n        token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return delegate.markEnd(delegate.createLiteral(token), startToken);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, value, param, startToken;\n\n        token = lookahead;\n        startToken = lookahead;\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                value = parsePropertyFunction([]);\n                return delegate.markEnd(delegate.createProperty('get', key, value), startToken);\n            }\n            if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead;\n                if (token.type !== Token.Identifier) {\n                    expect(')');\n                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);\n                    value = parsePropertyFunction([]);\n                } else {\n                    param = [ parseVariableIdentifier() ];\n                    expect(')');\n                    value = parsePropertyFunction(param, token);\n                }\n                return delegate.markEnd(delegate.createProperty('set', key, value), startToken);\n            }\n            expect(':');\n            value = parseAssignmentExpression();\n            return delegate.markEnd(delegate.createProperty('init', id, value), startToken);\n        }\n        if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            value = parseAssignmentExpression();\n            return delegate.markEnd(delegate.createProperty('init', key, value), startToken);\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, key, kind, map = {}, toString = String, startToken;\n\n        startToken = lookahead;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n\n            key = '$' + name;\n            if (Object.prototype.hasOwnProperty.call(map, key)) {\n                if (map[key] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    } else if (map[key] & kind) {\n                        throwErrorTolerant({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[key] |= kind;\n            } else {\n                map[key] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return delegate.markEnd(delegate.createObjectExpression(properties), startToken);\n    }\n\n    // 11.1.6 The Grouping Operator\n\n    function parseGroupExpression() {\n        var expr;\n\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        return expr;\n    }\n\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var type, token, expr, startToken;\n\n        if (match('(')) {\n            return parseGroupExpression();\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        type = lookahead.type;\n        startToken = lookahead;\n\n        if (type === Token.Identifier) {\n            expr =  delegate.createIdentifier(lex().value);\n        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && lookahead.octal) {\n                throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);\n            }\n            expr = delegate.createLiteral(lex());\n        } else if (type === Token.Keyword) {\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n            if (matchKeyword('this')) {\n                lex();\n                expr = delegate.createThisExpression();\n            } else {\n                throwUnexpected(lex());\n            }\n        } else if (type === Token.BooleanLiteral) {\n            token = lex();\n            token.value = (token.value === 'true');\n            expr = delegate.createLiteral(token);\n        } else if (type === Token.NullLiteral) {\n            token = lex();\n            token.value = null;\n            expr = delegate.createLiteral(token);\n        } else if (match('/') || match('/=')) {\n            if (typeof extra.tokens !== 'undefined') {\n                expr = delegate.createLiteral(collectRegex());\n            } else {\n                expr = delegate.createLiteral(scanRegExp());\n            }\n            peek();\n        } else {\n            throwUnexpected(lex());\n        }\n\n        return delegate.markEnd(expr, startToken);\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token, startToken;\n\n        startToken = lookahead;\n        token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);\n    }\n\n    function parseNonComputedMember() {\n        expect('.');\n\n        return parseNonComputedProperty();\n    }\n\n    function parseComputedMember() {\n        var expr;\n\n        expect('[');\n\n        expr = parseExpression();\n\n        expect(']');\n\n        return expr;\n    }\n\n    function parseNewExpression() {\n        var callee, args, startToken;\n\n        startToken = lookahead;\n        expectKeyword('new');\n        callee = parseLeftHandSideExpression();\n        args = match('(') ? parseArguments() : [];\n\n        return delegate.markEnd(delegate.createNewExpression(callee, args), startToken);\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var expr, args, property, startToken, previousAllowIn = state.allowIn;\n\n        startToken = lookahead;\n        state.allowIn = true;\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        for (;;) {\n            if (match('.')) {\n                property = parseNonComputedMember();\n                expr = delegate.createMemberExpression('.', expr, property);\n            } else if (match('(')) {\n                args = parseArguments();\n                expr = delegate.createCallExpression(expr, args);\n            } else if (match('[')) {\n                property = parseComputedMember();\n                expr = delegate.createMemberExpression('[', expr, property);\n            } else {\n                break;\n            }\n            delegate.markEnd(expr, startToken);\n        }\n        state.allowIn = previousAllowIn;\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpression() {\n        var expr, property, startToken;\n        assert(state.allowIn, 'callee of new expression always allow in keyword.');\n\n        startToken = lookahead;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                property = parseComputedMember();\n                expr = delegate.createMemberExpression('[', expr, property);\n            } else {\n                property = parseNonComputedMember();\n                expr = delegate.createMemberExpression('.', expr, property);\n            }\n            delegate.markEnd(expr, startToken);\n        }\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr, token, startToken = lookahead;\n\n        expr = parseLeftHandSideExpressionAllowCall();\n\n        if (lookahead.type === Token.Punctuator) {\n            if ((match('++') || match('--')) && !peekLineTerminator()) {\n                // 11.3.1, 11.3.2\n                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                    throwErrorTolerant({}, Messages.StrictLHSPostfix);\n                }\n\n                if (!isLeftHandSide(expr)) {\n                    throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n                }\n\n                token = lex();\n                expr = delegate.markEnd(delegate.createPostfixExpression(token.value, expr), startToken);\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr, startToken;\n\n        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {\n            expr = parsePostfixExpression();\n        } else if (match('++') || match('--')) {\n            startToken = lookahead;\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = delegate.createUnaryExpression(token.value, expr);\n            expr = delegate.markEnd(expr, startToken);\n        } else if (match('+') || match('-') || match('~') || match('!')) {\n            startToken = lookahead;\n            token = lex();\n            expr = parseUnaryExpression();\n            expr = delegate.createUnaryExpression(token.value, expr);\n            expr = delegate.markEnd(expr, startToken);\n        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            startToken = lookahead;\n            token = lex();\n            expr = parseUnaryExpression();\n            expr = delegate.createUnaryExpression(token.value, expr);\n            expr = delegate.markEnd(expr, startToken);\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n        } else {\n            expr = parsePostfixExpression();\n        }\n\n        return expr;\n    }\n\n    function binaryPrecedence(token, allowIn) {\n        var prec = 0;\n\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\n            return 0;\n        }\n\n        switch (token.value) {\n        case '||':\n            prec = 1;\n            break;\n\n        case '&&':\n            prec = 2;\n            break;\n\n        case '|':\n            prec = 3;\n            break;\n\n        case '^':\n            prec = 4;\n            break;\n\n        case '&':\n            prec = 5;\n            break;\n\n        case '==':\n        case '!=':\n        case '===':\n        case '!==':\n            prec = 6;\n            break;\n\n        case '<':\n        case '>':\n        case '<=':\n        case '>=':\n        case 'instanceof':\n            prec = 7;\n            break;\n\n        case 'in':\n            prec = allowIn ? 7 : 0;\n            break;\n\n        case '<<':\n        case '>>':\n        case '>>>':\n            prec = 8;\n            break;\n\n        case '+':\n        case '-':\n            prec = 9;\n            break;\n\n        case '*':\n        case '/':\n        case '%':\n            prec = 11;\n            break;\n\n        default:\n            break;\n        }\n\n        return prec;\n    }\n\n    // 11.5 Multiplicative Operators\n    // 11.6 Additive Operators\n    // 11.7 Bitwise Shift Operators\n    // 11.8 Relational Operators\n    // 11.9 Equality Operators\n    // 11.10 Binary Bitwise Operators\n    // 11.11 Binary Logical Operators\n\n    function parseBinaryExpression() {\n        var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n        marker = lookahead;\n        left = parseUnaryExpression();\n\n        token = lookahead;\n        prec = binaryPrecedence(token, state.allowIn);\n        if (prec === 0) {\n            return left;\n        }\n        token.prec = prec;\n        lex();\n\n        markers = [marker, lookahead];\n        right = parseUnaryExpression();\n\n        stack = [left, token, right];\n\n        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {\n\n            // Reduce: make a binary expression from the three topmost entries.\n            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n                right = stack.pop();\n                operator = stack.pop().value;\n                left = stack.pop();\n                expr = delegate.createBinaryExpression(operator, left, right);\n                markers.pop();\n                marker = markers[markers.length - 1];\n                delegate.markEnd(expr, marker);\n                stack.push(expr);\n            }\n\n            // Shift.\n            token = lex();\n            token.prec = prec;\n            stack.push(token);\n            markers.push(lookahead);\n            expr = parseUnaryExpression();\n            stack.push(expr);\n        }\n\n        // Final reduce to clean-up the stack.\n        i = stack.length - 1;\n        expr = stack[i];\n        markers.pop();\n        while (i > 1) {\n            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n            i -= 2;\n            marker = markers.pop();\n            delegate.markEnd(expr, marker);\n        }\n\n        return expr;\n    }\n\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent, alternate, startToken;\n\n        startToken = lookahead;\n\n        expr = parseBinaryExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n            alternate = parseAssignmentExpression();\n\n            expr = delegate.createConditionalExpression(expr, consequent, alternate);\n            delegate.markEnd(expr, startToken);\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var token, left, right, node, startToken;\n\n        token = lookahead;\n        startToken = lookahead;\n\n        node = left = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(left)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {\n                throwErrorTolerant(token, Messages.StrictLHSAssignment);\n            }\n\n            token = lex();\n            right = parseAssignmentExpression();\n            node = delegate.markEnd(delegate.createAssignmentExpression(token.value, left, right), startToken);\n        }\n\n        return node;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr, startToken = lookahead;\n\n        expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = delegate.createSequenceExpression([ expr ]);\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n            delegate.markEnd(expr, startToken);\n        }\n\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block, startToken;\n\n        startToken = lookahead;\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return delegate.markEnd(delegate.createBlockStatement(block), startToken);\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token, startToken;\n\n        startToken = lookahead;\n        token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);\n    }\n\n    function parseVariableDeclaration(kind) {\n        var init = null, id, startToken;\n\n        startToken = lookahead;\n        id = parseVariableIdentifier();\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return delegate.markEnd(delegate.createVariableDeclarator(id, init), startToken);\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        do {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        } while (index < length);\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return delegate.createVariableDeclaration(declarations, 'var');\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations, startToken;\n\n        startToken = lookahead;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind), startToken);\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n        return delegate.createEmptyStatement();\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n        consumeSemicolon();\n        return delegate.createExpressionStatement(expr);\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return delegate.createIfStatement(test, consequent, alternate);\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return delegate.createDoWhileStatement(body, test);\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return delegate.createWhileStatement(test, body);\n    }\n\n    function parseForVariableDeclaration() {\n        var token, declarations, startToken;\n\n        startToken = lookahead;\n        token = lex();\n        declarations = parseVariableDeclarationList();\n\n        return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value), startToken);\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration, previousAllowIn = state.allowIn;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = previousAllowIn;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = previousAllowIn;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return (typeof left === 'undefined') ?\n                delegate.createForStatement(init, test, update, body) :\n                delegate.createForInStatement(left, right, body);\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var label = null, key;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source.charCodeAt(index) === 0x3B) {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return delegate.createContinueStatement(null);\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return delegate.createContinueStatement(null);\n        }\n\n        if (lookahead.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            key = '$' + label.name;\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return delegate.createContinueStatement(label);\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var label = null, key;\n\n        expectKeyword('break');\n\n        // Catch the very common case first: immediately a semicolon (U+003B).\n        if (source.charCodeAt(index) === 0x3B) {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return delegate.createBreakStatement(null);\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return delegate.createBreakStatement(null);\n        }\n\n        if (lookahead.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            key = '$' + label.name;\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return delegate.createBreakStatement(label);\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source.charCodeAt(index) === 0x20) {\n            if (isIdentifierStart(source.charCodeAt(index + 1))) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return delegate.createReturnStatement(argument);\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return delegate.createReturnStatement(null);\n        }\n\n        if (!match(';')) {\n            if (!match('}') && lookahead.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return delegate.createReturnStatement(argument);\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            // TODO(ikarienator): Should we update the test cases instead?\n            skipComment();\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return delegate.createWithStatement(object, body);\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test, consequent = [], statement, startToken;\n\n        startToken = lookahead;\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            consequent.push(statement);\n        }\n\n        return delegate.markEnd(delegate.createSwitchCase(test, consequent), startToken);\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        cases = [];\n\n        if (match('}')) {\n            lex();\n            return delegate.createSwitchStatement(discriminant, cases);\n        }\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return delegate.createSwitchStatement(discriminant, cases);\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return delegate.createThrowStatement(argument);\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param, body, startToken;\n\n        startToken = lookahead;\n        expectKeyword('catch');\n\n        expect('(');\n        if (match(')')) {\n            throwUnexpected(lookahead);\n        }\n\n        param = parseVariableIdentifier();\n        // 12.14.1\n        if (strict && isRestrictedWord(param.name)) {\n            throwErrorTolerant({}, Messages.StrictCatchVariable);\n        }\n\n        expect(')');\n        body = parseBlock();\n        return delegate.markEnd(delegate.createCatchClause(param, body), startToken);\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return delegate.createTryStatement(block, [], handlers, finalizer);\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return delegate.createDebuggerStatement();\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var type = lookahead.type,\n            expr,\n            labeledBody,\n            key,\n            startToken;\n\n        if (type === Token.EOF) {\n            throwUnexpected(lookahead);\n        }\n\n        if (type === Token.Punctuator && lookahead.value === '{') {\n            return parseBlock();\n        }\n\n        startToken = lookahead;\n\n        if (type === Token.Punctuator) {\n            switch (lookahead.value) {\n            case ';':\n                return delegate.markEnd(parseEmptyStatement(), startToken);\n            case '(':\n                return delegate.markEnd(parseExpressionStatement(), startToken);\n            default:\n                break;\n            }\n        }\n\n        if (type === Token.Keyword) {\n            switch (lookahead.value) {\n            case 'break':\n                return delegate.markEnd(parseBreakStatement(), startToken);\n            case 'continue':\n                return delegate.markEnd(parseContinueStatement(), startToken);\n            case 'debugger':\n                return delegate.markEnd(parseDebuggerStatement(), startToken);\n            case 'do':\n                return delegate.markEnd(parseDoWhileStatement(), startToken);\n            case 'for':\n                return delegate.markEnd(parseForStatement(), startToken);\n            case 'function':\n                return delegate.markEnd(parseFunctionDeclaration(), startToken);\n            case 'if':\n                return delegate.markEnd(parseIfStatement(), startToken);\n            case 'return':\n                return delegate.markEnd(parseReturnStatement(), startToken);\n            case 'switch':\n                return delegate.markEnd(parseSwitchStatement(), startToken);\n            case 'throw':\n                return delegate.markEnd(parseThrowStatement(), startToken);\n            case 'try':\n                return delegate.markEnd(parseTryStatement(), startToken);\n            case 'var':\n                return delegate.markEnd(parseVariableStatement(), startToken);\n            case 'while':\n                return delegate.markEnd(parseWhileStatement(), startToken);\n            case 'with':\n                return delegate.markEnd(parseWithStatement(), startToken);\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            key = '$' + expr.name;\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[key] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[key];\n            return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody), startToken);\n        }\n\n        consumeSemicolon();\n\n        return delegate.markEnd(delegate.createExpressionStatement(expr), startToken);\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, startToken;\n\n        startToken = lookahead;\n        expect('{');\n\n        while (index < length) {\n            if (lookahead.type !== Token.StringLiteral) {\n                break;\n            }\n            token = lookahead;\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = source.slice(token.start + 1, token.end - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return delegate.markEnd(delegate.createBlockStatement(sourceElements), startToken);\n    }\n\n    function parseParams(firstRestricted) {\n        var param, params = [], token, stricted, paramSet, key, message;\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead;\n                param = parseVariableIdentifier();\n                key = '$' + token.value;\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, key)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[key] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return {\n            params: params,\n            stricted: stricted,\n            firstRestricted: firstRestricted,\n            message: message\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict, startToken;\n\n        startToken = lookahead;\n\n        expectKeyword('function');\n        token = lookahead;\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        tmp = parseParams(firstRestricted);\n        params = tmp.params;\n        stricted = tmp.stricted;\n        firstRestricted = tmp.firstRestricted;\n        if (tmp.message) {\n            message = tmp.message;\n        }\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body), startToken);\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict, startToken;\n\n        startToken = lookahead;\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead;\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwErrorTolerant(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        tmp = parseParams(firstRestricted);\n        params = tmp.params;\n        stricted = tmp.stricted;\n        firstRestricted = tmp.firstRestricted;\n        if (tmp.message) {\n            message = tmp.message;\n        }\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body), startToken);\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        if (lookahead.type === Token.Keyword) {\n            switch (lookahead.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(lookahead.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (lookahead.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead;\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = source.slice(token.start + 1, token.end - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            /* istanbul ignore if */\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var body, startToken;\n\n        skipComment();\n        peek();\n        startToken = lookahead;\n        strict = false;\n\n        body = parseSourceElements();\n        return delegate.markEnd(delegate.createProgram(body), startToken);\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function tokenize(code, options) {\n        var toString,\n            token,\n            tokens;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        delegate = SyntaxTreeDelegate;\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        lookahead = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            lastCommentStart: -1\n        };\n\n        extra = {};\n\n        // Options matching.\n        options = options || {};\n\n        // Of course we collect tokens here.\n        options.tokens = true;\n        extra.tokens = [];\n        extra.tokenize = true;\n        // The following two fields are necessary to compute the Regex tokens.\n        extra.openParenToken = -1;\n        extra.openCurlyToken = -1;\n\n        extra.range = (typeof options.range === 'boolean') && options.range;\n        extra.loc = (typeof options.loc === 'boolean') && options.loc;\n\n        if (typeof options.comment === 'boolean' && options.comment) {\n            extra.comments = [];\n        }\n        if (typeof options.tolerant === 'boolean' && options.tolerant) {\n            extra.errors = [];\n        }\n\n        try {\n            peek();\n            if (lookahead.type === Token.EOF) {\n                return extra.tokens;\n            }\n\n            token = lex();\n            while (lookahead.type !== Token.EOF) {\n                try {\n                    token = lex();\n                } catch (lexError) {\n                    token = lookahead;\n                    if (extra.errors) {\n                        extra.errors.push(lexError);\n                        // We have to break on the first error\n                        // to avoid infinite loops.\n                        break;\n                    } else {\n                        throw lexError;\n                    }\n                }\n            }\n\n            filterTokenLocation();\n            tokens = extra.tokens;\n            if (typeof extra.comments !== 'undefined') {\n                tokens.comments = extra.comments;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                tokens.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            extra = {};\n        }\n        return tokens;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        delegate = SyntaxTreeDelegate;\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        lookahead = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            lastCommentStart: -1\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;\n\n            if (extra.loc && options.source !== null && options.source !== undefined) {\n                extra.source = toString(options.source);\n            }\n\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n            if (extra.attachComment) {\n                extra.range = true;\n                extra.comments = [];\n                extra.bottomRightStack = [];\n                extra.trailingComments = [];\n                extra.leadingComments = [];\n            }\n        }\n\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with *.json manifests.\n    exports.version = '1.2.5';\n\n    exports.tokenize = tokenize;\n\n    exports.parse = parse;\n\n    // Deep copy.\n   /* istanbul ignore next */\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n","\"use strict\"\n\nvar esprima = require(\"esprima\")\nvar uniq = require(\"uniq\")\n\nvar PREFIX_COUNTER = 0\n\nfunction CompiledArgument(name, lvalue, rvalue) {\n  this.name = name\n  this.lvalue = lvalue\n  this.rvalue = rvalue\n  this.count = 0\n}\n\nfunction CompiledRoutine(body, args, thisVars, localVars) {\n  this.body = body\n  this.args = args\n  this.thisVars = thisVars\n  this.localVars = localVars\n}\n\nfunction isGlobal(identifier) {\n  if(identifier === \"eval\") {\n    throw new Error(\"cwise-parser: eval() not allowed\")\n  }\n  if(typeof window !== \"undefined\") {\n    return identifier in window\n  } else if(typeof global !== \"undefined\") {\n    return identifier in global\n  } else if(typeof self !== \"undefined\") {\n    return identifier in self\n  } else {\n    return false\n  }\n}\n\nfunction getArgNames(ast) {\n  var params = ast.body[0].expression.callee.params\n  var names = new Array(params.length)\n  for(var i=0; i<params.length; ++i) {\n    names[i] = params[i].name\n  }\n  return names\n}\n\nfunction preprocess(func) {\n  var src = [\"(\", func, \")()\"].join(\"\")\n  var ast = esprima.parse(src, { range: true })\n  \n  //Compute new prefix\n  var prefix = \"_inline_\" + (PREFIX_COUNTER++) + \"_\"\n  \n  //Parse out arguments\n  var argNames = getArgNames(ast)\n  var compiledArgs = new Array(argNames.length)\n  for(var i=0; i<argNames.length; ++i) {\n    compiledArgs[i] = new CompiledArgument([prefix, \"arg\", i, \"_\"].join(\"\"), false, false)\n  }\n  \n  //Create temporary data structure for source rewriting\n  var exploded = new Array(src.length)\n  for(var i=0, n=src.length; i<n; ++i) {\n    exploded[i] = src.charAt(i)\n  }\n  \n  //Local variables\n  var localVars = []\n  var thisVars = []\n  var computedThis = false\n  \n  //Retrieves a local variable\n  function createLocal(id) {\n    var nstr = prefix + id.replace(/\\_/g, \"__\")\n    localVars.push(nstr)\n    return nstr\n  }\n  \n  //Creates a this variable\n  function createThisVar(id) {\n    var nstr = \"this_\" + id.replace(/\\_/g, \"__\")\n    thisVars.push(nstr)\n    return nstr\n  }\n  \n  //Rewrites an ast node\n  function rewrite(node, nstr) {\n    var lo = node.range[0], hi = node.range[1]\n    for(var i=lo+1; i<hi; ++i) {\n      exploded[i] = \"\"\n    }\n    exploded[lo] = nstr\n  }\n  \n  //Remove any underscores\n  function escapeString(str) {\n    return \"'\"+(str.replace(/\\_/g, \"\\\\_\").replace(/\\'/g, \"\\'\"))+\"'\"\n  }\n  \n  //Returns the source of an identifier\n  function source(node) {\n    return exploded.slice(node.range[0], node.range[1]).join(\"\")\n  }\n  \n  //Computes the usage of a node\n  var LVALUE = 1\n  var RVALUE = 2\n  function getUsage(node) {\n    if(node.parent.type === \"AssignmentExpression\") {\n      if(node.parent.left === node) {\n        if(node.parent.operator === \"=\") {\n          return LVALUE\n        }\n        return LVALUE|RVALUE\n      }\n    }\n    if(node.parent.type === \"UpdateExpression\") {\n      return LVALUE|RVALUE\n    }\n    return RVALUE\n  }\n  \n  //Handle visiting a node\n  (function visit(node, parent) {\n    node.parent = parent\n    if(node.type === \"MemberExpression\") {\n      //Handle member expression\n      if(node.computed) {\n        visit(node.object, node)\n        visit(node.property, node)\n      } else if(node.object.type === \"ThisExpression\") {\n        rewrite(node, createThisVar(node.property.name))\n      } else {\n        visit(node.object, node)\n      }\n    } else if(node.type === \"ThisExpression\") {\n      throw new Error(\"cwise-parser: Computed this is not allowed\")\n    } else if(node.type === \"Identifier\") {\n      //Handle identifier\n      var name = node.name\n      var argNo = argNames.indexOf(name)\n      if(argNo >= 0) {\n        var carg = compiledArgs[argNo]\n        var usage = getUsage(node)\n        if(usage & LVALUE) {\n          carg.lvalue = true\n        }\n        if(usage & RVALUE) {\n          carg.rvalue = true\n        }\n        ++carg.count\n        rewrite(node, carg.name)\n      } else if(isGlobal(name)) {\n        //Don't rewrite globals\n      } else {\n        rewrite(node, createLocal(name))\n      }\n    } else if(node.type === \"Literal\") {\n      if(typeof node.value === \"string\") {\n        rewrite(node, escapeString(node.value))\n      }\n    } else if(node.type === \"WithStatement\") {\n      throw new Error(\"cwise-parser: with() statements not allowed\")\n    } else {\n      //Visit all children\n      var keys = Object.keys(node)\n      for(var i=0, n=keys.length; i<n; ++i) {\n        if(keys[i] === \"parent\") {\n          continue\n        }\n        var value = node[keys[i]]\n        if(value) {\n          if(value instanceof Array) {\n            for(var j=0; j<value.length; ++j) {\n              if(value[j] && typeof value[j].type === \"string\") {\n                visit(value[j], node)\n              }\n            }\n          } else if(typeof value.type === \"string\") {\n            visit(value, node)\n          }\n        }\n      }\n    }\n  })(ast.body[0].expression.callee.body, undefined)\n  \n  //Remove duplicate variables\n  uniq(localVars)\n  uniq(thisVars)\n  \n  //Return body\n  var routine = new CompiledRoutine(source(ast.body[0].expression.callee.body), compiledArgs, thisVars, localVars)\n  return routine\n}\n\nmodule.exports = preprocess","\"use strict\"\n\nvar parse   = require(\"cwise-parser\")\nvar compile = require(\"cwise-compiler\")\n\nvar REQUIRED_FIELDS = [ \"args\", \"body\" ]\nvar OPTIONAL_FIELDS = [ \"pre\", \"post\", \"printCode\", \"funcName\", \"blockSize\" ]\n\nfunction createCWise(user_args) {\n  //Check parameters\n  for(var id in user_args) {\n    if(REQUIRED_FIELDS.indexOf(id) < 0 &&\n       OPTIONAL_FIELDS.indexOf(id) < 0) {\n      console.warn(\"cwise: Unknown argument '\"+id+\"' passed to expression compiler\")\n    }\n  }\n  for(var i=0; i<REQUIRED_FIELDS.length; ++i) {\n    if(!user_args[REQUIRED_FIELDS[i]]) {\n      throw new Error(\"cwise: Missing argument: \" + REQUIRED_FIELDS[i])\n    }\n  }\n  \n  //Parse blocks\n  return compile({\n    args:       user_args.args,\n    pre:        parse(user_args.pre || function(){}),\n    body:       parse(user_args.body),\n    post:       parse(user_args.post || function(){}),\n    debug:      !!user_args.printCode,\n    funcName:   user_args.funcName || user_args.body.name || \"cwise\",\n    blockSize:  user_args.blockSize || 64\n  })\n}\n\nmodule.exports = createCWise\n","\"use strict\"\n\nvar cwise = require(\"cwise\")\n\nvar fill = cwise({\n  args: [\"index\", \"array\", \"scalar\"],\n  body: function(idx, out, f) {\n    out = f.apply(undefined, idx)\n  }\n})\n\nmodule.exports = function(array, f) {\n  fill(array, f)\n  return array\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nexports.has = function (obj, prop) {\n    return _hasOwnProperty.call(obj, prop);\n};\n/**\n * Default function to compare element order.\n * @function\n */\nfunction defaultCompare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a === b) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nexports.defaultCompare = defaultCompare;\n/**\n * Default function to test equality.\n * @function\n */\nfunction defaultEquals(a, b) {\n    return a === b;\n}\nexports.defaultEquals = defaultEquals;\n/**\n * Default function to convert an object to a string.\n * @function\n */\nfunction defaultToString(item) {\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\nexports.defaultToString = defaultToString;\n/**\n* Joins all the properies of the object using the provided join string\n*/\nfunction makeString(item, join) {\n    if (join === void 0) { join = ','; }\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return item.toString();\n    }\n    else {\n        var toret = '{';\n        var first = true;\n        for (var prop in item) {\n            if (exports.has(item, prop)) {\n                if (first) {\n                    first = false;\n                }\n                else {\n                    toret = toret + join;\n                }\n                toret = toret + prop + ':' + item[prop];\n            }\n        }\n        return toret + '}';\n    }\n}\nexports.makeString = makeString;\n/**\n * Checks if the given argument is a function.\n * @function\n */\nfunction isFunction(func) {\n    return (typeof func) === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Checks if the given argument is undefined.\n * @function\n */\nfunction isUndefined(obj) {\n    return (typeof obj) === 'undefined';\n}\nexports.isUndefined = isUndefined;\n/**\n * Checks if the given argument is a string.\n * @function\n */\nfunction isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\nexports.isString = isString;\n/**\n * Reverses a compare function.\n * @function\n */\nfunction reverseCompareFunction(compareFunction) {\n    if (isUndefined(compareFunction) || !isFunction(compareFunction)) {\n        return function (a, b) {\n            if (a < b) {\n                return 1;\n            }\n            else if (a === b) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        };\n    }\n    else {\n        return function (d, v) {\n            return compareFunction(d, v) * -1;\n        };\n    }\n}\nexports.reverseCompareFunction = reverseCompareFunction;\n/**\n * Returns an equal function given a compare function.\n * @function\n */\nfunction compareToEquals(compareFunction) {\n    return function (a, b) {\n        return compareFunction(a, b) === 0;\n    };\n}\nexports.compareToEquals = compareToEquals;\n//# sourceMappingURL=util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\n/**\n * Returns the position of the first occurrence of the specified item\n * within the specified array.4\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the first occurrence of the specified element\n * within the specified array, or -1 if not found.\n */\nfunction indexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.indexOf = indexOf;\n/**\n * Returns the position of the last occurrence of the specified element\n * within the specified array.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the last occurrence of the specified element\n * within the specified array or -1 if not found.\n */\nfunction lastIndexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = length - 1; i >= 0; i--) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.lastIndexOf = lastIndexOf;\n/**\n * Returns true if the specified array contains the specified element.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the specified array contains the specified element.\n */\nfunction contains(array, item, equalsFunction) {\n    return indexOf(array, item, equalsFunction) >= 0;\n}\nexports.contains = contains;\n/**\n * Removes the first ocurrence of the specified element from the specified array.\n * @param {*} array the array in which to search element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the array changed after this call.\n */\nfunction remove(array, item, equalsFunction) {\n    var index = indexOf(array, item, equalsFunction);\n    if (index < 0) {\n        return false;\n    }\n    array.splice(index, 1);\n    return true;\n}\nexports.remove = remove;\n/**\n * Returns the number of elements in the specified array equal\n * to the specified object.\n * @param {Array} array the array in which to determine the frequency of the element.\n * @param {Object} item the element whose frequency is to be determined.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the number of elements in the specified array\n * equal to the specified object.\n */\nfunction frequency(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    var freq = 0;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            freq++;\n        }\n    }\n    return freq;\n}\nexports.frequency = frequency;\n/**\n * Returns true if the two specified arrays are equal to one another.\n * Two arrays are considered equal if both arrays contain the same number\n * of elements, and all corresponding pairs of elements in the two\n * arrays are equal and are in the same order.\n * @param {Array} array1 one array to be tested for equality.\n * @param {Array} array2 the other array to be tested for equality.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between elemements in the arrays.\n * @return {boolean} true if the two arrays are equal\n */\nfunction equals(array1, array2, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    var length = array1.length;\n    for (var i = 0; i < length; i++) {\n        if (!equals(array1[i], array2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equals = equals;\n/**\n * Returns shallow a copy of the specified array.\n * @param {*} array the array to copy.\n * @return {Array} a copy of the specified array\n */\nfunction copy(array) {\n    return array.concat();\n}\nexports.copy = copy;\n/**\n * Swaps the elements at the specified positions in the specified array.\n * @param {Array} array The array in which to swap elements.\n * @param {number} i the index of one element to be swapped.\n * @param {number} j the index of the other element to be swapped.\n * @return {boolean} true if the array is defined and the indexes are valid.\n */\nfunction swap(array, i, j) {\n    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        return false;\n    }\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return true;\n}\nexports.swap = swap;\nfunction toString(array) {\n    return '[' + array.toString() + ']';\n}\nexports.toString = toString;\n/**\n * Executes the provided function once for each element present in this array\n * starting from index 0 to length - 1.\n * @param {Array} array The array in which to iterate.\n * @param {function(Object):*} callback function to execute, it is\n * invoked with one argument: the element value, to break the iteration you can\n * optionally return false.\n */\nfunction forEach(array, callback) {\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var ele = array_1[_i];\n        if (callback(ele) === false) {\n            return;\n        }\n    }\n}\nexports.forEach = forEach;\n//# sourceMappingURL=arrays.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary = /** @class */ (function () {\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function Dictionary(toStrFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStrFunction || util.defaultToString;\n    }\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    Dictionary.prototype.getValue = function (key) {\n        var pair = this.table['$' + this.toStr(key)];\n        if (util.isUndefined(pair)) {\n            return undefined;\n        }\n        return pair.value;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    Dictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var ret;\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (util.isUndefined(previousElement)) {\n            this.nElements++;\n            ret = undefined;\n        }\n        else {\n            ret = previousElement.value;\n        }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    Dictionary.prototype.remove = function (key) {\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (!util.isUndefined(previousElement)) {\n            delete this.table[k];\n            this.nElements--;\n            return previousElement.value;\n        }\n        return undefined;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    Dictionary.prototype.keys = function () {\n        var array = [];\n        for (var name_1 in this.table) {\n            if (util.has(this.table, name_1)) {\n                var pair = this.table[name_1];\n                array.push(pair.key);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    Dictionary.prototype.values = function () {\n        var array = [];\n        for (var name_2 in this.table) {\n            if (util.has(this.table, name_2)) {\n                var pair = this.table[name_2];\n                array.push(pair.value);\n            }\n        }\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this dictionary.\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    Dictionary.prototype.forEach = function (callback) {\n        for (var name_3 in this.table) {\n            if (util.has(this.table, name_3)) {\n                var pair = this.table[name_3];\n                var ret = callback(pair.key, pair.value);\n                if (ret === false) {\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Returns true if this dictionary contains a mapping for the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary contains a mapping for the\n     * specified key.\n     */\n    Dictionary.prototype.containsKey = function (key) {\n        return !util.isUndefined(this.getValue(key));\n    };\n    /**\n    * Removes all mappings from this dictionary.\n    * @this {collections.Dictionary}\n    */\n    Dictionary.prototype.clear = function () {\n        this.table = {};\n        this.nElements = 0;\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    Dictionary.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    Dictionary.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    Dictionary.prototype.toString = function () {\n        var toret = '{';\n        this.forEach(function (k, v) {\n            toret += \"\\n\\t\" + k + \" : \" + v;\n        });\n        return toret + '\\n}';\n    };\n    return Dictionary;\n}()); // End of dictionary\nexports.default = Dictionary;\n//# sourceMappingURL=Dictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar Set = /** @class */ (function () {\n    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Set(toStringFunction) {\n        this.dictionary = new Dictionary_1.default(toStringFunction);\n    }\n    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */\n    Set.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */\n    Set.prototype.add = function (element) {\n        if (this.contains(element) || util.isUndefined(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.setValue(element, element);\n            return true;\n        }\n    };\n    /**\n     * Performs an intersecion between this and another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.intersection = function (otherSet) {\n        var set = this;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                set.remove(element);\n            }\n            return true;\n        });\n    };\n    /**\n     * Performs a union between this and another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.union = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.add(element);\n            return true;\n        });\n    };\n    /**\n     * Performs a difference between this and another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.difference = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.remove(element);\n            return true;\n        });\n    };\n    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */\n    Set.prototype.isSubsetOf = function (otherSet) {\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n        var isSub = true;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                isSub = false;\n                return false;\n            }\n            return true;\n        });\n        return isSub;\n    };\n    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */\n    Set.prototype.remove = function (element) {\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.remove(element);\n            return true;\n        }\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Set.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            return callback(v);\n        });\n    };\n    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */\n    Set.prototype.toArray = function () {\n        return this.dictionary.values();\n    };\n    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */\n    Set.prototype.isEmpty = function () {\n        return this.dictionary.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */\n    Set.prototype.size = function () {\n        return this.dictionary.size();\n    };\n    /**\n     * Removes all of the elements from this set.\n     */\n    Set.prototype.clear = function () {\n        this.dictionary.clear();\n    };\n    /*\n    * Provides a string representation for display\n    */\n    Set.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    return Set;\n}()); // end of Set\nexports.default = Set;\n//# sourceMappingURL=Set.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar Set_1 = require(\"./Set\");\nvar Bag = /** @class */ (function () {\n    /**\n     * Creates an empty bag.\n     * @class <p>A bag is a special kind of set in which members are\n     * allowed to appear more than once.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to unique strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Bag(toStrFunction) {\n        this.toStrF = toStrFunction || util.defaultToString;\n        this.dictionary = new Dictionary_1.default(this.toStrF);\n        this.nElements = 0;\n    }\n    /**\n    * Adds nCopies of the specified object to this bag.\n    * @param {Object} element element to add.\n    * @param {number=} nCopies the number of copies to add, if this argument is\n    * undefined 1 copy is added.\n    * @return {boolean} true unless element is undefined.\n    */\n    Bag.prototype.add = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            var node = {\n                value: element,\n                copies: nCopies\n            };\n            this.dictionary.setValue(element, node);\n        }\n        else {\n            this.dictionary.getValue(element).copies += nCopies;\n        }\n        this.nElements += nCopies;\n        return true;\n    };\n    /**\n    * Counts the number of copies of the specified object in this bag.\n    * @param {Object} element the object to search for..\n    * @return {number} the number of copies of the object, 0 if not found\n    */\n    Bag.prototype.count = function (element) {\n        if (!this.contains(element)) {\n            return 0;\n        }\n        else {\n            return this.dictionary.getValue(element).copies;\n        }\n    };\n    /**\n     * Returns true if this bag contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this bag contains the specified element,\n     * false otherwise.\n     */\n    Bag.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n    * Removes nCopies of the specified object to this bag.\n    * If the number of copies to remove is greater than the actual number\n    * of copies in the Bag, all copies are removed.\n    * @param {Object} element element to remove.\n    * @param {number=} nCopies the number of copies to remove, if this argument is\n    * undefined 1 copy is removed.\n    * @return {boolean} true if at least 1 element was removed.\n    */\n    Bag.prototype.remove = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            var node = this.dictionary.getValue(element);\n            if (nCopies > node.copies) {\n                this.nElements -= node.copies;\n            }\n            else {\n                this.nElements -= nCopies;\n            }\n            node.copies -= nCopies;\n            if (node.copies <= 0) {\n                this.dictionary.remove(element);\n            }\n            return true;\n        }\n    };\n    /**\n     * Returns an array containing all of the elements in this big in arbitrary order,\n     * including multiple copies.\n     * @return {Array} an array containing all of the elements in this bag.\n     */\n    Bag.prototype.toArray = function () {\n        var a = [];\n        var values = this.dictionary.values();\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var node = values_1[_i];\n            var element = node.value;\n            var copies = node.copies;\n            for (var j = 0; j < copies; j++) {\n                a.push(element);\n            }\n        }\n        return a;\n    };\n    /**\n     * Returns a set of unique elements in this bag.\n     * @return {collections.Set<T>} a set of unique elements in this bag.\n     */\n    Bag.prototype.toSet = function () {\n        var toret = new Set_1.default(this.toStrF);\n        var elements = this.dictionary.values();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var ele = elements_1[_i];\n            var value = ele.value;\n            toret.add(value);\n        }\n        return toret;\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this bag, including multiple copies.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Bag.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            var value = v.value;\n            var copies = v.copies;\n            for (var i = 0; i < copies; i++) {\n                if (callback(value) === false) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    };\n    /**\n     * Returns the number of elements in this bag.\n     * @return {number} the number of elements in this bag.\n     */\n    Bag.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this bag contains no elements.\n     * @return {boolean} true if this bag contains no elements.\n     */\n    Bag.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Removes all of the elements from this bag.\n     */\n    Bag.prototype.clear = function () {\n        this.nElements = 0;\n        this.dictionary.clear();\n    };\n    return Bag;\n}()); // End of bag\nexports.default = Bag;\n//# sourceMappingURL=Bag.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar LinkedList = /** @class */ (function () {\n    /**\n    * Creates an empty Linked List.\n    * @class A linked list is a data structure consisting of a group of nodes\n    * which together represent a sequence.\n    * @constructor\n    */\n    function LinkedList() {\n        /**\n        * First node in the list\n        * @type {Object}\n        * @private\n        */\n        this.firstNode = null;\n        /**\n        * Last node in the list\n        * @type {Object}\n        * @private\n        */\n        this.lastNode = null;\n        /**\n        * Number of elements in the list\n        * @type {number}\n        * @private\n        */\n        this.nElements = 0;\n    }\n    /**\n    * Adds an element to this list.\n    * @param {Object} item element to be added.\n    * @param {number=} index optional index to add the element. If no index is specified\n    * the element is added to the end of this list.\n    * @return {boolean} true if the element was added or false if the index is invalid\n    * or if the element is undefined.\n    */\n    LinkedList.prototype.add = function (item, index) {\n        if (util.isUndefined(index)) {\n            index = this.nElements;\n        }\n        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n            return false;\n        }\n        var newNode = this.createNode(item);\n        if (this.nElements === 0 || this.lastNode === null) {\n            // First node in the list.\n            this.firstNode = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === this.nElements) {\n            // Insert at the end.\n            this.lastNode.next = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === 0) {\n            // Change first node.\n            newNode.next = this.firstNode;\n            this.firstNode = newNode;\n        }\n        else {\n            var prev = this.nodeAtIndex(index - 1);\n            if (prev == null) {\n                return false;\n            }\n            newNode.next = prev.next;\n            prev.next = newNode;\n        }\n        this.nElements++;\n        return true;\n    };\n    /**\n    * Returns the first element in this list.\n    * @return {*} the first element of the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.first = function () {\n        if (this.firstNode !== null) {\n            return this.firstNode.element;\n        }\n        return undefined;\n    };\n    /**\n    * Returns the last element in this list.\n    * @return {*} the last element in the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.last = function () {\n        if (this.lastNode !== null) {\n            return this.lastNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the element at the specified position in this list.\n     * @param {number} index desired index.\n     * @return {*} the element at the given index or undefined if the index is\n     * out of bounds.\n     */\n    LinkedList.prototype.elementAtIndex = function (index) {\n        var node = this.nodeAtIndex(index);\n        if (node === null) {\n            return undefined;\n        }\n        return node.element;\n    };\n    /**\n     * Returns the index in this list of the first occurrence of the\n     * specified element, or -1 if the List does not contain this element.\n     * <p>If the elements inside this list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {number} the index in this list of the first occurrence\n     * of the specified element, or -1 if this list does not contain the\n     * element.\n     */\n    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (util.isUndefined(item)) {\n            return -1;\n        }\n        var currentNode = this.firstNode;\n        var index = 0;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                return index;\n            }\n            index++;\n            currentNode = currentNode.next;\n        }\n        return -1;\n    };\n    /**\n       * Returns true if this list contains the specified element.\n       * <p>If the elements inside the list are\n       * not comparable with the === operator a custom equals function should be\n       * provided to perform searches, the function must receive two arguments and\n       * return true if they are equal, false otherwise. Example:</p>\n       *\n       * <pre>\n       * const petsAreEqualByName = function(pet1, pet2) {\n       *  return pet1.name === pet2.name;\n       * }\n       * </pre>\n       * @param {Object} item element to search for.\n       * @param {function(Object,Object):boolean=} equalsFunction Optional\n       * function used to check if two elements are equal.\n       * @return {boolean} true if this list contains the specified element, false\n       * otherwise.\n       */\n    LinkedList.prototype.contains = function (item, equalsFunction) {\n        return (this.indexOf(item, equalsFunction) >= 0);\n    };\n    /**\n     * Removes the first occurrence of the specified element in this list.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to be removed from this list, if present.\n     * @return {boolean} true if the list contained the specified element.\n     */\n    LinkedList.prototype.remove = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (this.nElements < 1 || util.isUndefined(item)) {\n            return false;\n        }\n        var previous = null;\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                if (previous == null) {\n                    this.firstNode = currentNode.next;\n                    if (currentNode === this.lastNode) {\n                        this.lastNode = null;\n                    }\n                }\n                else if (currentNode === this.lastNode) {\n                    this.lastNode = previous;\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                else {\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                this.nElements--;\n                return true;\n            }\n            previous = currentNode;\n            currentNode = currentNode.next;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this list.\n     */\n    LinkedList.prototype.clear = function () {\n        this.firstNode = null;\n        this.lastNode = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this list is equal to the given list.\n     * Two lists are equal if they have the same elements in the same order.\n     * @param {LinkedList} other the other list.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function used to check if two elements are equal. If the elements in the lists\n     * are custom objects you should provide a function, otherwise\n     * the === operator is used to check equality between elements.\n     * @return {boolean} true if this list is equal to the given list.\n     */\n    LinkedList.prototype.equals = function (other, equalsFunction) {\n        var eqF = equalsFunction || util.defaultEquals;\n        if (!(other instanceof LinkedList)) {\n            return false;\n        }\n        if (this.size() !== other.size()) {\n            return false;\n        }\n        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n    };\n    /**\n    * @private\n    */\n    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n        while (n1 !== null && n2 !== null) {\n            if (!eqF(n1.element, n2.element)) {\n                return false;\n            }\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return true;\n    };\n    /**\n     * Removes the element at the specified position in this list.\n     * @param {number} index given index.\n     * @return {*} removed element or undefined if the index is out of bounds.\n     */\n    LinkedList.prototype.removeElementAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements || this.firstNode === null || this.lastNode === null) {\n            return undefined;\n        }\n        var element;\n        if (this.nElements === 1) {\n            //First node in the list.\n            element = this.firstNode.element;\n            this.firstNode = null;\n            this.lastNode = null;\n        }\n        else {\n            var previous = this.nodeAtIndex(index - 1);\n            if (previous === null) {\n                element = this.firstNode.element;\n                this.firstNode = this.firstNode.next;\n            }\n            else if (previous.next === this.lastNode) {\n                element = this.lastNode.element;\n                this.lastNode = previous;\n            }\n            if (previous !== null && previous.next !== null) {\n                element = previous.next.element;\n                previous.next = previous.next.next;\n            }\n        }\n        this.nElements--;\n        return element;\n    };\n    /**\n     * Executes the provided function once for each element present in this list in order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    LinkedList.prototype.forEach = function (callback) {\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (callback(currentNode.element) === false) {\n                break;\n            }\n            currentNode = currentNode.next;\n        }\n    };\n    /**\n     * Reverses the order of the elements in this linked list (makes the last\n     * element first, and the first element last).\n     */\n    LinkedList.prototype.reverse = function () {\n        var previous = null;\n        var current = this.firstNode;\n        var temp = null;\n        while (current !== null) {\n            temp = current.next;\n            current.next = previous;\n            previous = current;\n            current = temp;\n        }\n        temp = this.firstNode;\n        this.firstNode = this.lastNode;\n        this.lastNode = temp;\n    };\n    /**\n     * Returns an array containing all of the elements in this list in proper\n     * sequence.\n     * @return {Array.<*>} an array containing all of the elements in this list,\n     * in proper sequence.\n     */\n    LinkedList.prototype.toArray = function () {\n        var array = [];\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            array.push(currentNode.element);\n            currentNode = currentNode.next;\n        }\n        return array;\n    };\n    /**\n     * Returns the number of elements in this list.\n     * @return {number} the number of elements in this list.\n     */\n    LinkedList.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this list contains no elements.\n     * @return {boolean} true if this list contains no elements.\n     */\n    LinkedList.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    LinkedList.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.nodeAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return null;\n        }\n        if (index === (this.nElements - 1)) {\n            return this.lastNode;\n        }\n        var node = this.firstNode;\n        for (var i = 0; i < index && node != null; i++) {\n            node = node.next;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.createNode = function (item) {\n        return {\n            element: item,\n            next: null\n        };\n    };\n    return LinkedList;\n}()); // End of linked list\nexports.default = LinkedList;\n//# sourceMappingURL=LinkedList.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LinkedList_1 = require(\"./LinkedList\");\nvar Queue = /** @class */ (function () {\n    /**\n     * Creates an empty queue.\n     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n     * element added to the queue will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Queue() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.enqueue = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.add = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Retrieves and removes the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.dequeue = function () {\n        if (this.list.size() !== 0) {\n            var el = this.list.first();\n            this.list.removeElementAtIndex(0);\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.peek = function () {\n        if (this.list.size() !== 0) {\n            return this.list.first();\n        }\n        return undefined;\n    };\n    /**\n     * Returns the number of elements in this queue.\n     * @return {number} the number of elements in this queue.\n     */\n    Queue.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this queue contains the specified element,\n     * false otherwise.\n     */\n    Queue.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this queue is empty.\n     * @return {boolean} true if and only if this queue contains no items; false\n     * otherwise.\n     */\n    Queue.prototype.isEmpty = function () {\n        return this.list.size() <= 0;\n    };\n    /**\n     * Removes all of the elements from this queue.\n     */\n    Queue.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * FIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Queue.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Queue;\n}()); // End of queue\nexports.default = Queue;\n//# sourceMappingURL=Queue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Queue_1 = require(\"./Queue\");\n/**\n * General binary search tree implementation.\n *\n * This interface allows one to search elements using a subset of their attributes (thus the\n * tree can be used as an index for complex objects).\n * The attributes required to define an ordering in the tree must be defined in the type K.\n * Any additional attribute must be defined in the type V.\n *\n * @see BSTree\n */\nvar BSTreeKV = /** @class */ (function () {\n    /**\n     * Creates an empty binary search tree.\n     * @class <p>A binary search tree is a binary tree in which each\n     * internal node stores an element such that the elements stored in the\n     * left subtree are less than it and the elements\n     * stored in the right subtree are greater.</p>\n     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n     * has the following properties:</p>\n     * <ul>\n     * <li>The left subtree of a node contains only nodes with elements less\n     * than the node's element</li>\n     * <li>The right subtree of a node contains only nodes with elements greater\n     * than the node's element</li>\n     * <li>Both the left and right subtrees must also be binary search trees.</li>\n     * </ul>\n     * <p>If the inserted elements are custom objects a compare function must\n     * be provided at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function BSTreeKV(compareFunction) {\n        this.root = null;\n        this.compare = compareFunction || util.defaultCompare;\n        this.nElements = 0;\n    }\n    /**\n     * Adds the specified element to this tree if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this tree did not already contain the specified element.\n     */\n    BSTreeKV.prototype.add = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        if (this.insertNode(this.createNode(element)) !== null) {\n            this.nElements++;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this tree.\n     */\n    BSTreeKV.prototype.clear = function () {\n        this.root = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this tree contains no elements.\n     * @return {boolean} true if this tree contains no elements.\n     */\n    BSTreeKV.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Returns the number of elements in this tree.\n     * @return {number} the number of elements in this tree.\n     */\n    BSTreeKV.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this tree contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this tree contains the specified element,\n     * false otherwise.\n     */\n    BSTreeKV.prototype.contains = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        return this.searchNode(this.root, element) !== null;\n    };\n    /**\n     * Looks for the value with the provided search key.\n     * @param {Object} element The key to look for\n     * @return {Object} The value found or undefined if it was not found.\n     */\n    BSTreeKV.prototype.search = function (element) {\n        var ret = this.searchNode(this.root, element);\n        if (ret === null) {\n            return undefined;\n        }\n        return ret.element;\n    };\n    /**\n     * Removes the specified element from this tree if it is present.\n     * @return {boolean} true if this tree contained the specified element.\n     */\n    BSTreeKV.prototype.remove = function (element) {\n        var node = this.searchNode(this.root, element);\n        if (node === null) {\n            return false;\n        }\n        this.removeNode(node);\n        this.nElements--;\n        return true;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * in-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.inorderTraversal = function (callback) {\n        this.inorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in pre-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.preorderTraversal = function (callback) {\n        this.preorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in post-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.postorderTraversal = function (callback) {\n        this.postorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * level-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.levelTraversal = function (callback) {\n        this.levelTraversalAux(this.root, callback);\n    };\n    /**\n     * Returns the minimum element of this tree.\n     * @return {*} the minimum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTreeKV.prototype.minimum = function () {\n        if (this.isEmpty() || this.root === null) {\n            return undefined;\n        }\n        return this.minimumAux(this.root).element;\n    };\n    /**\n     * Returns the maximum element of this tree.\n     * @return {*} the maximum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTreeKV.prototype.maximum = function () {\n        if (this.isEmpty() || this.root === null) {\n            return undefined;\n        }\n        return this.maximumAux(this.root).element;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in inorder.\n     * Equivalent to inorderTraversal.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    BSTreeKV.prototype.forEach = function (callback) {\n        this.inorderTraversal(callback);\n    };\n    /**\n     * Returns an array containing all of the elements in this tree in in-order.\n     * @return {Array} an array containing all of the elements in this tree in in-order.\n     */\n    BSTreeKV.prototype.toArray = function () {\n        var array = [];\n        this.inorderTraversal(function (element) {\n            array.push(element);\n            return true;\n        });\n        return array;\n    };\n    /**\n     * Returns the height of this tree.\n     * @return {number} the height of this tree or -1 if is empty.\n     */\n    BSTreeKV.prototype.height = function () {\n        return this.heightAux(this.root);\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.searchNode = function (node, element) {\n        var cmp = 1;\n        while (node !== null && cmp !== 0) {\n            cmp = this.compare(element, node.element);\n            if (cmp < 0) {\n                node = node.leftCh;\n            }\n            else if (cmp > 0) {\n                node = node.rightCh;\n            }\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.transplant = function (n1, n2) {\n        if (n1.parent === null) {\n            this.root = n2;\n        }\n        else if (n1 === n1.parent.leftCh) {\n            n1.parent.leftCh = n2;\n        }\n        else {\n            n1.parent.rightCh = n2;\n        }\n        if (n2 !== null) {\n            n2.parent = n1.parent;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.removeNode = function (node) {\n        if (node.leftCh === null) {\n            this.transplant(node, node.rightCh);\n        }\n        else if (node.rightCh === null) {\n            this.transplant(node, node.leftCh);\n        }\n        else {\n            var y = this.minimumAux(node.rightCh);\n            if (y.parent !== node) {\n                this.transplant(y, y.rightCh);\n                y.rightCh = node.rightCh;\n                y.rightCh.parent = y;\n            }\n            this.transplant(node, y);\n            y.leftCh = node.leftCh;\n            y.leftCh.parent = y;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.inorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.levelTraversalAux = function (node, callback) {\n        var queue = new Queue_1.default();\n        if (node !== null) {\n            queue.enqueue(node);\n        }\n        node = queue.dequeue() || null;\n        while (node != null) {\n            if (callback(node.element) === false) {\n                return;\n            }\n            if (node.leftCh !== null) {\n                queue.enqueue(node.leftCh);\n            }\n            if (node.rightCh !== null) {\n                queue.enqueue(node.rightCh);\n            }\n            node = queue.dequeue() || null;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.preorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.postorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.rightCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n    };\n    BSTreeKV.prototype.minimumAux = function (node) {\n        while (node != null && node.leftCh !== null) {\n            node = node.leftCh;\n        }\n        return node;\n    };\n    BSTreeKV.prototype.maximumAux = function (node) {\n        while (node != null && node.rightCh !== null) {\n            node = node.rightCh;\n        }\n        return node;\n    };\n    /**\n      * @private\n      */\n    BSTreeKV.prototype.heightAux = function (node) {\n        if (node === null) {\n            return -1;\n        }\n        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n    };\n    /*\n    * @private\n    */\n    BSTreeKV.prototype.insertNode = function (node) {\n        var parent = null;\n        var position = this.root;\n        while (position !== null) {\n            var cmp = this.compare(node.element, position.element);\n            if (cmp === 0) {\n                return null;\n            }\n            else if (cmp < 0) {\n                parent = position;\n                position = position.leftCh;\n            }\n            else {\n                parent = position;\n                position = position.rightCh;\n            }\n        }\n        node.parent = parent;\n        if (parent === null) {\n            // tree is empty\n            this.root = node;\n        }\n        else if (this.compare(node.element, parent.element) < 0) {\n            parent.leftCh = node;\n        }\n        else {\n            parent.rightCh = node;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.createNode = function (element) {\n        return {\n            element: element,\n            leftCh: null,\n            rightCh: null,\n            parent: null\n        };\n    };\n    return BSTreeKV;\n}());\nexports.default = BSTreeKV;\n//# sourceMappingURL=BSTreeKV.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BSTreeKV_1 = require(\"./BSTreeKV\");\n/**\n * Special-case of the binary search tree in which the search key is equal to the element type.\n * This definition is suitable when the element type can not be split between what defines its order\n * and what does not (eg. primitive types as opposed to indexed records).\n *\n * The table below shows some use-case examples for both interfaces:\n *\n *           element type              |  most suitable interface\n * ------------------------------------|----------------------------\n *    number                           |  BSTree<number>\n *    string                           |  BSTree<string>\n * { order: number, data: string }     |  BSTreeKV<{order: number}, {order: number, data: string}>\n *\n * @see BSTreeKV\n */\nvar BSTree = /** @class */ (function (_super) {\n    __extends(BSTree, _super);\n    function BSTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return BSTree;\n}(BSTreeKV_1.default));\nexports.default = BSTree;\n//# sourceMappingURL=BSTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar collections = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar Heap = /** @class */ (function () {\n    /**\n     * Creates an empty Heap.\n     * @class\n     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n     * each node is smaller than each of its children and therefore a MinHeap\n     * This implementation uses an array to store elements.</p>\n     * <p>If the inserted elements are custom objects a compare function must be provided,\n     *  at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     *\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n     * reverse compare function to accomplish that behavior. Example:</p>\n     *\n     * <pre>\n     * function reverseCompare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return 1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return -1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function Heap(compareFunction) {\n        /**\n         * Array used to store the elements of the heap.\n         * @type {Array.<Object>}\n         * @private\n         */\n        this.data = [];\n        this.compare = compareFunction || collections.defaultCompare;\n    }\n    /**\n     * Returns the index of the left child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the left child\n     * for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    Heap.prototype.leftChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 1;\n    };\n    /**\n     * Returns the index of the right child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the right child\n     * for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    Heap.prototype.rightChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 2;\n    };\n    /**\n     * Returns the index of the parent of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    Heap.prototype.parentIndex = function (nodeIndex) {\n        return Math.floor((nodeIndex - 1) / 2);\n    };\n    /**\n     * Returns the index of the smaller child node (if it exists).\n     * @param {number} leftChild left child index.\n     * @param {number} rightChild right child index.\n     * @return {number} the index with the minimum value or -1 if it doesn't\n     * exists.\n     * @private\n     */\n    Heap.prototype.minIndex = function (leftChild, rightChild) {\n        if (rightChild >= this.data.length) {\n            if (leftChild >= this.data.length) {\n                return -1;\n            }\n            else {\n                return leftChild;\n            }\n        }\n        else {\n            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n                return leftChild;\n            }\n            else {\n                return rightChild;\n            }\n        }\n    };\n    /**\n     * Moves the node at the given index up to its proper place in the heap.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    Heap.prototype.siftUp = function (index) {\n        var parent = this.parentIndex(index);\n        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n            arrays.swap(this.data, parent, index);\n            index = parent;\n            parent = this.parentIndex(index);\n        }\n    };\n    /**\n     * Moves the node at the given index down to its proper place in the heap.\n     * @param {number} nodeIndex The index of the node to move down.\n     * @private\n     */\n    Heap.prototype.siftDown = function (nodeIndex) {\n        //smaller child index\n        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n            arrays.swap(this.data, min, nodeIndex);\n            nodeIndex = min;\n            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        }\n    };\n    /**\n     * Retrieves but does not remove the root element of this heap.\n     * @return {*} The value at the root of the heap. Returns undefined if the\n     * heap is empty.\n     */\n    Heap.prototype.peek = function () {\n        if (this.data.length > 0) {\n            return this.data[0];\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Adds the given element into the heap.\n     * @param {*} element the element.\n     * @return true if the element was added or fals if it is undefined.\n     */\n    Heap.prototype.add = function (element) {\n        if (collections.isUndefined(element)) {\n            return false;\n        }\n        this.data.push(element);\n        this.siftUp(this.data.length - 1);\n        return true;\n    };\n    /**\n     * Retrieves and removes the root element of this heap.\n     * @return {*} The value removed from the root of the heap. Returns\n     * undefined if the heap is empty.\n     */\n    Heap.prototype.removeRoot = function () {\n        if (this.data.length > 0) {\n            var obj = this.data[0];\n            this.data[0] = this.data[this.data.length - 1];\n            this.data.splice(this.data.length - 1, 1);\n            if (this.data.length > 0) {\n                this.siftDown(0);\n            }\n            return obj;\n        }\n        return undefined;\n    };\n    /**\n     * Returns true if this heap contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this Heap contains the specified element, false\n     * otherwise.\n     */\n    Heap.prototype.contains = function (element) {\n        var equF = collections.compareToEquals(this.compare);\n        return arrays.contains(this.data, element, equF);\n    };\n    /**\n     * Returns the number of elements in this heap.\n     * @return {number} the number of elements in this heap.\n     */\n    Heap.prototype.size = function () {\n        return this.data.length;\n    };\n    /**\n     * Checks if this heap is empty.\n     * @return {boolean} true if and only if this heap contains no items; false\n     * otherwise.\n     */\n    Heap.prototype.isEmpty = function () {\n        return this.data.length <= 0;\n    };\n    /**\n     * Removes all of the elements from this heap.\n     */\n    Heap.prototype.clear = function () {\n        this.data.length = 0;\n    };\n    /**\n     * Executes the provided function once for each element present in this heap in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Heap.prototype.forEach = function (callback) {\n        arrays.forEach(this.data, callback);\n    };\n    return Heap;\n}());\nexports.default = Heap;\n//# sourceMappingURL=Heap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Dictionary_1 = require(\"./Dictionary\");\nvar util = require(\"./util\");\n/**\n * This class is used by the LinkedDictionary Internally\n * Has to be a class, not an interface, because it needs to have\n * the 'unlink' function defined.\n */\nvar LinkedDictionaryPair = /** @class */ (function () {\n    function LinkedDictionaryPair(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    LinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return LinkedDictionaryPair;\n}());\n/**\n * The head and tail elements of the list have null key and value properties but they\n * usually link to normal nodes.\n */\nvar HeadOrTailLinkedDictionaryPair = /** @class */ (function () {\n    function HeadOrTailLinkedDictionaryPair() {\n        this.key = null;\n        this.value = null;\n    }\n    HeadOrTailLinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return HeadOrTailLinkedDictionaryPair;\n}());\nfunction isHeadOrTailLinkedDictionaryPair(p) {\n    return p.next === null;\n}\nvar LinkedDictionary = /** @class */ (function (_super) {\n    __extends(LinkedDictionary, _super);\n    function LinkedDictionary(toStrFunction) {\n        var _this = _super.call(this, toStrFunction) || this;\n        _this.head = new HeadOrTailLinkedDictionaryPair();\n        _this.tail = new HeadOrTailLinkedDictionaryPair();\n        _this.head.next = _this.tail;\n        _this.tail.prev = _this.head;\n        return _this;\n    }\n    /**\n     * Inserts the new node to the 'tail' of the list, updating the\n     * neighbors, and moving 'this.tail' (the End of List indicator) that\n     * to the end.\n     */\n    LinkedDictionary.prototype.appendToTail = function (entry) {\n        var lastNode = this.tail.prev;\n        lastNode.next = entry;\n        entry.prev = lastNode;\n        entry.next = this.tail;\n        this.tail.prev = entry;\n    };\n    /**\n     * Retrieves a linked dictionary from the table internally\n     */\n    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n        if (util.isUndefined(key)) {\n            return undefined;\n        }\n        var k = '$' + this.toStr(key);\n        var pair = (this.table[k]);\n        return pair;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    LinkedDictionary.prototype.getValue = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * Also, if a value is present for this key, the entry is removed from the\n     * insertion ordering.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    LinkedDictionary.prototype.remove = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            _super.prototype.remove.call(this, key); // This will remove it from the table\n            pair.unlink(); // This will unlink it from the chain\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n    * Removes all mappings from this LinkedDictionary.\n    * @this {collections.LinkedDictionary}\n    */\n    LinkedDictionary.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    };\n    /**\n     * Internal function used when updating an existing KeyValue pair.\n     * It places the new value indexed by key into the table, but maintains\n     * its place in the linked ordering.\n     */\n    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n        var k = '$' + this.toStr(newPair.key);\n        // set the new Pair's links to existingPair's links\n        newPair.next = oldPair.next;\n        newPair.prev = oldPair.prev;\n        // Delete Existing Pair from the table, unlink it from chain.\n        // As a result, the nElements gets decremented by this operation\n        this.remove(oldPair.key);\n        // Link new Pair in place of where oldPair was,\n        // by pointing the old pair's neighbors to it.\n        newPair.prev.next = newPair;\n        newPair.next.prev = newPair;\n        this.table[k] = newPair;\n        // To make up for the fact that the number of elements was decremented,\n        // We need to increase it by one.\n        ++this.nElements;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * Updating of a key that already exists maintains its place in the\n     * insertion order into the map.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    LinkedDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var existingPair = this.getLinkedDictionaryPair(key);\n        var newPair = new LinkedDictionaryPair(key, value);\n        var k = '$' + this.toStr(key);\n        // If there is already an element for that key, we\n        // keep it's place in the LinkedList\n        if (!util.isUndefined(existingPair)) {\n            this.replace(existingPair, newPair);\n            return existingPair.value;\n        }\n        else {\n            this.appendToTail(newPair);\n            this.table[k] = newPair;\n            ++this.nElements;\n            return undefined;\n        }\n    };\n    /**\n     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n     * by insertion order.\n     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.keys = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(key);\n        });\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n     * insertion order.\n     * @return {Array} an array containing all of the values in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.values = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(value);\n        });\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this LinkedDictionary. It is done in the order of insertion\n    * into the LinkedDictionary\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    LinkedDictionary.prototype.forEach = function (callback) {\n        var crawlNode = this.head.next;\n        while (!isHeadOrTailLinkedDictionaryPair(crawlNode)) {\n            var ret = callback(crawlNode.key, crawlNode.value);\n            if (ret === false) {\n                return;\n            }\n            crawlNode = crawlNode.next;\n        }\n    };\n    return LinkedDictionary;\n}(Dictionary_1.default)); // End of LinkedDictionary\nexports.default = LinkedDictionary;\n// /**\n//  * Returns true if this dictionary is equal to the given dictionary.\n//  * Two dictionaries are equal if they contain the same mappings.\n//  * @param {collections.Dictionary} other the other dictionary.\n//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n//  * function used to check if two values are equal.\n//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n//  */\n// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n// \tif(!(other instanceof collections.Dictionary)){\n// \t\treturn false;\n// \t}\n// \tif(this.size() !== other.size()){\n// \t\treturn false;\n// \t}\n// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n// }\n//# sourceMappingURL=LinkedDictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar arrays = require(\"./arrays\");\nvar MultiDictionary = /** @class */ (function () {\n    /**\n     * Creates an empty multi dictionary.\n     * @class <p>A multi dictionary is a special kind of dictionary that holds\n     * multiple values against each key. Setting a value into the dictionary will\n     * add the value to an array at that key. Getting a key will return an array,\n     * holding all the values set to that key.\n     * You can configure to allow duplicates in the values.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to strings must be\n     * provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n       *  return pet.name;\n       * }\n     * </pre>\n     * <p>If the values are custom objects a function to check equality between values\n     * must be provided. Example:</p>\n     *\n     * <pre>\n     * function petsAreEqualByAge(pet1,pet2) {\n       *  return pet1.age===pet2.age;\n       * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n     * function to check if two values are equal.\n     *\n     * @param allowDuplicateValues\n     */\n    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n        this.dict = new Dictionary_1.default(toStrFunction);\n        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n        this.allowDuplicate = allowDuplicateValues;\n    }\n    /**\n    * Returns an array holding the values to which this dictionary maps\n    * the specified key.\n    * Returns an empty array if this dictionary contains no mappings for this key.\n    * @param {Object} key key whose associated values are to be returned.\n    * @return {Array} an array holding the values to which this dictionary maps\n    * the specified key.\n    */\n    MultiDictionary.prototype.getValue = function (key) {\n        var values = this.dict.getValue(key);\n        if (util.isUndefined(values)) {\n            return [];\n        }\n        return arrays.copy(values);\n    };\n    /**\n     * Adds the value to the array associated with the specified key, if\n     * it is not already present.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value the value to add to the array at the key\n     * @return {boolean} true if the value was not already associated with that key.\n     */\n    MultiDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return false;\n        }\n        var array = this.dict.getValue(key);\n        if (util.isUndefined(array)) {\n            this.dict.setValue(key, [value]);\n            return true;\n        }\n        if (!this.allowDuplicate) {\n            if (arrays.contains(array, value, this.equalsF)) {\n                return false;\n            }\n        }\n        array.push(value);\n        return true;\n    };\n    /**\n     * Removes the specified values from the array of values associated with the\n     * specified key. If a value isn't given, all values associated with the specified\n     * key are removed.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @param {Object=} value optional argument to specify the value to remove\n     * from the array associated with the specified key.\n     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n     * if the specified value isn't associated with the specified key.\n     */\n    MultiDictionary.prototype.remove = function (key, value) {\n        if (util.isUndefined(value)) {\n            var v = this.dict.remove(key);\n            return !util.isUndefined(v);\n        }\n        var array = this.dict.getValue(key);\n        if (!util.isUndefined(array) && arrays.remove(array, value, this.equalsF)) {\n            if (array.length === 0) {\n                this.dict.remove(key);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    MultiDictionary.prototype.keys = function () {\n        return this.dict.keys();\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    MultiDictionary.prototype.values = function () {\n        var values = this.dict.values();\n        var array = [];\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var v = values_1[_i];\n            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n                var w = v_1[_a];\n                array.push(w);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns true if this dictionary at least one value associatted the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary at least one value associatted\n     * the specified key.\n     */\n    MultiDictionary.prototype.containsKey = function (key) {\n        return this.dict.containsKey(key);\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     */\n    MultiDictionary.prototype.clear = function () {\n        this.dict.clear();\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    MultiDictionary.prototype.size = function () {\n        return this.dict.size();\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    MultiDictionary.prototype.isEmpty = function () {\n        return this.dict.isEmpty();\n    };\n    return MultiDictionary;\n}()); // end of multi dictionary\nexports.default = MultiDictionary;\n//# sourceMappingURL=MultiDictionary.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Dictionary_1 = require(\"./Dictionary\");\nvar util = require(\"./util\");\nvar FactoryDictionary = /** @class */ (function (_super) {\n    __extends(FactoryDictionary, _super);\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>The default factory function should return a new object of the provided\n     * type. Example:</p>\n     * <pre>\n     * function petFactory() {\n     *  return new Pet();\n     * }\n     * </pre>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function():V=} defaultFactoryFunction function used to create a\n     * default object.\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function FactoryDictionary(defaultFactoryFunction, toStrFunction) {\n        var _this = _super.call(this, toStrFunction) || this;\n        _this.defaultFactoryFunction = defaultFactoryFunction;\n        return _this;\n    }\n    /**\n     * Associates the specified default value with the specified key in this dictionary,\n     * if it didn't contain the key yet. If the key existed, the existing value will be used.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} defaultValue default value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or the default value,\n     * if the key didn't exist yet.\n     */\n    FactoryDictionary.prototype.setDefault = function (key, defaultValue) {\n        var currentValue = _super.prototype.getValue.call(this, key);\n        if (util.isUndefined(currentValue)) {\n            this.setValue(key, defaultValue);\n            return defaultValue;\n        }\n        return currentValue;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns a default value created by the factory passed in the constructor,\n     * if this dictionary contains no mapping for this key. The missing key will\n     * automatically be added to the dictionary.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * a default value if the map contains no mapping for this key.\n     */\n    FactoryDictionary.prototype.getValue = function (key) {\n        return this.setDefault(key, this.defaultFactoryFunction());\n    };\n    return FactoryDictionary;\n}(Dictionary_1.default));\nexports.default = FactoryDictionary;\n//# sourceMappingURL=FactoryDictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Heap_1 = require(\"./Heap\");\nvar PriorityQueue = /** @class */ (function () {\n    /**\n     * Creates an empty priority queue.\n     * @class <p>In a priority queue each element is associated with a \"priority\",\n     * elements are dequeued in highest-priority-first order (the elements with the\n     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n     * If the inserted elements are custom objects a compare function must be provided,\n     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two element priorities. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function PriorityQueue(compareFunction) {\n        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n    }\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.add = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Retrieves and removes the highest priority element of this queue.\n     * @return {*} the the highest priority element of this queue,\n     *  or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        if (this.heap.size() !== 0) {\n            var el = this.heap.peek();\n            this.heap.removeRoot();\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the highest priority element of this queue.\n     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.peek = function () {\n        return this.heap.peek();\n    };\n    /**\n     * Returns true if this priority queue contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this priority queue contains the specified element,\n     * false otherwise.\n     */\n    PriorityQueue.prototype.contains = function (element) {\n        return this.heap.contains(element);\n    };\n    /**\n     * Checks if this priority queue is empty.\n     * @return {boolean} true if and only if this priority queue contains no items; false\n     * otherwise.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.heap.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this priority queue.\n     * @return {number} the number of elements in this priority queue.\n     */\n    PriorityQueue.prototype.size = function () {\n        return this.heap.size();\n    };\n    /**\n     * Removes all of the elements from this priority queue.\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.heap.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    PriorityQueue.prototype.forEach = function (callback) {\n        this.heap.forEach(callback);\n    };\n    return PriorityQueue;\n}()); // end of priority queue\nexports.default = PriorityQueue;\n//# sourceMappingURL=PriorityQueue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LinkedList_1 = require(\"./LinkedList\");\nvar Stack = /** @class */ (function () {\n    /**\n     * Creates an empty Stack.\n     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n     * element added to the stack will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Stack() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.push = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.add = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Removes the object at the top of this stack and returns that object.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.pop = function () {\n        return this.list.removeElementAtIndex(0);\n    };\n    /**\n     * Looks at the object at the top of this stack without removing it from the\n     * stack.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.peek = function () {\n        return this.list.first();\n    };\n    /**\n     * Returns the number of elements in this stack.\n     * @return {number} the number of elements in this stack.\n     */\n    Stack.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this stack contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this stack contains the specified element,\n     * false otherwise.\n     */\n    Stack.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this stack is empty.\n     * @return {boolean} true if and only if this stack contains no items; false\n     * otherwise.\n     */\n    Stack.prototype.isEmpty = function () {\n        return this.list.isEmpty();\n    };\n    /**\n     * Removes all of the elements from this stack.\n     */\n    Stack.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this stack in\n     * LIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Stack.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Stack;\n}()); // End of stack\nexports.default = Stack;\n//# sourceMappingURL=Stack.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"BEFORE\"] = 0] = \"BEFORE\";\n    Direction[Direction[\"AFTER\"] = 1] = \"AFTER\";\n    Direction[Direction[\"INSIDE_AT_END\"] = 2] = \"INSIDE_AT_END\";\n    Direction[Direction[\"INSIDE_AT_START\"] = 3] = \"INSIDE_AT_START\";\n})(Direction || (Direction = {}));\nvar MultiRootTree = /** @class */ (function () {\n    function MultiRootTree(rootIds, nodes) {\n        if (rootIds === void 0) { rootIds = []; }\n        if (nodes === void 0) { nodes = {}; }\n        this.rootIds = rootIds;\n        this.nodes = nodes;\n        this.initRootIds();\n        this.initNodes();\n    }\n    MultiRootTree.prototype.initRootIds = function () {\n        for (var _i = 0, _a = this.rootIds; _i < _a.length; _i++) {\n            var rootId = _a[_i];\n            this.createEmptyNodeIfNotExist(rootId);\n        }\n    };\n    MultiRootTree.prototype.initNodes = function () {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var _i = 0, _a = this.nodes[nodeKey]; _i < _a.length; _i++) {\n                    var nodeListItem = _a[_i];\n                    this.createEmptyNodeIfNotExist(nodeListItem);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.createEmptyNodeIfNotExist = function (nodeKey) {\n        if (!this.nodes[nodeKey]) {\n            this.nodes[nodeKey] = [];\n        }\n    };\n    MultiRootTree.prototype.getRootIds = function () {\n        var clone = this.rootIds.slice();\n        return clone;\n    };\n    MultiRootTree.prototype.getNodes = function () {\n        var clone = {};\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                clone[nodeKey] = this.nodes[nodeKey].slice();\n            }\n        }\n        return clone;\n    };\n    MultiRootTree.prototype.getObject = function () {\n        return {\n            rootIds: this.getRootIds(),\n            nodes: this.getNodes(),\n        };\n    };\n    MultiRootTree.prototype.toObject = function () {\n        return this.getObject();\n    };\n    MultiRootTree.prototype.flatten = function () {\n        var _this = this;\n        var extraPropsObject = [];\n        for (var i = 0; i < this.rootIds.length; i++) {\n            var rootId = this.rootIds[i];\n            extraPropsObject.push({\n                id: rootId,\n                level: 0,\n                hasParent: false,\n                childrenCount: 0,\n            });\n            traverse(rootId, this.nodes, extraPropsObject, 0);\n        }\n        for (var _i = 0, extraPropsObject_1 = extraPropsObject; _i < extraPropsObject_1.length; _i++) {\n            var o = extraPropsObject_1[_i];\n            o.childrenCount = countChildren(o.id);\n        }\n        return extraPropsObject;\n        function countChildren(id) {\n            if (!_this.nodes[id]) {\n                return 0;\n            }\n            else {\n                var childrenCount = _this.nodes[id].length;\n                return childrenCount;\n            }\n        }\n        function traverse(startId, nodes, returnArray, level) {\n            if (level === void 0) { level = 0; }\n            if (!startId || !nodes || !returnArray || !nodes[startId]) {\n                return;\n            }\n            level++;\n            var idsList = nodes[startId];\n            for (var i = 0; i < idsList.length; i++) {\n                var id = idsList[i];\n                returnArray.push({ id: id, level: level, hasParent: true });\n                traverse(id, nodes, returnArray, level);\n            }\n            level--;\n        }\n    };\n    MultiRootTree.prototype.moveIdBeforeId = function (moveId, beforeId) {\n        return this.moveId(moveId, beforeId, Direction.BEFORE);\n    };\n    MultiRootTree.prototype.moveIdAfterId = function (moveId, afterId) {\n        return this.moveId(moveId, afterId, Direction.AFTER);\n    };\n    MultiRootTree.prototype.moveIdIntoId = function (moveId, insideId, atStart) {\n        if (atStart === void 0) { atStart = true; }\n        if (atStart) {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_START);\n        }\n        else {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_END);\n        }\n    };\n    MultiRootTree.prototype.swapRootIdWithRootId = function (rootId, withRootId) {\n        var leftIndex = this.findRootId(rootId);\n        var rightIndex = this.findRootId(withRootId);\n        this.swapRootPositionWithRootPosition(leftIndex, rightIndex);\n    };\n    MultiRootTree.prototype.swapRootPositionWithRootPosition = function (swapRootPosition, withRootPosition) {\n        var temp = this.rootIds[withRootPosition];\n        this.rootIds[withRootPosition] = this.rootIds[swapRootPosition];\n        this.rootIds[swapRootPosition] = temp;\n    };\n    MultiRootTree.prototype.deleteId = function (id) {\n        this.rootDeleteId(id);\n        this.nodeAndSubNodesDelete(id);\n        this.nodeRefrencesDelete(id);\n    };\n    MultiRootTree.prototype.insertIdBeforeId = function (beforeId, insertId) {\n        var foundRootIdIndex = this.findRootId(beforeId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdAfterId = function (belowId, insertId) {\n        var foundRootIdIndex = this.findRootId(belowId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex + 1);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, belowId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex + 1);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdIntoId = function (insideId, insertId) {\n        this.nodeInsertAtEnd(insideId, insertId);\n        this.nodes[insertId] = [];\n    };\n    MultiRootTree.prototype.insertIdIntoRoot = function (id, position) {\n        if (position === undefined) {\n            this.rootInsertAtEnd(id);\n        }\n        else {\n            if (position < 0) {\n                var length_1 = this.rootIds.length;\n                this.rootIds.splice((position + length_1 + 1), 0, id);\n            }\n            else {\n                this.rootIds.splice(position, 0, id);\n            }\n        }\n        this.nodes[id] = this.nodes[id] || [];\n    };\n    MultiRootTree.prototype.insertIdIntoNode = function (nodeKey, id, position) {\n        this.nodes[nodeKey] = this.nodes[nodeKey] || [];\n        this.nodes[id] = this.nodes[id] || [];\n        if (position === undefined) {\n            this.nodeInsertAtEnd(nodeKey, id);\n        }\n        else {\n            if (position < 0) {\n                var length_2 = this.nodes[nodeKey].length;\n                this.nodes[nodeKey].splice((position + length_2 + 1), 0, id);\n            }\n            else {\n                this.nodes[nodeKey].splice(position, 0, id);\n            }\n        }\n    };\n    MultiRootTree.prototype.moveId = function (moveId, beforeId, direction) {\n        var sourceId = moveId;\n        var sourceRootIndex = this.findRootId(sourceId);\n        var sourceNodeKey;\n        var sourceNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            sourceNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                sourceNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        var targetId = beforeId;\n        var targetRootIndex = this.findRootId(targetId);\n        var targetNodeKey;\n        var targetNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            targetNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                targetNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        if (sourceRootIndex > -1) {\n            if (targetRootIndex > -1) {\n                // moving root to root\n                // console.log(`Moving ROOT to ROOT`);\n                // console.log(`RootIds:`);\n                // console.log(this.rootIds);\n                // console.log(`TargetIndex=${targetRootIndex}, SourceIndex=${sourceRootIndex}`);\n                // console.log(`TargetId=${targetId}, SourceId=${sourceId}`);\n                this.rootDelete(sourceRootIndex); // indexes change now\n                if (targetRootIndex > sourceRootIndex) {\n                    targetRootIndex--;\n                }\n                else {\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving root (source) ABOVE node (target)\n                // will remove one entry from roots\n                this.rootDelete(sourceRootIndex);\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (targetRootIndex > -1) {\n                // moving node (source) ABOVE root (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            // this.nodeInsertId(nodeKey, sourceId, index);\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving node (source) ABOVE node (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.swapArrayElements = function (arr, indexA, indexB) {\n        var temp = arr[indexA];\n        arr[indexA] = arr[indexB];\n        arr[indexB] = temp;\n        return arr;\n    };\n    MultiRootTree.prototype.rootDeleteId = function (id) {\n        var index = this.findRootId(id);\n        if (index > -1) {\n            this.rootDelete(index);\n        }\n    };\n    MultiRootTree.prototype.nodeAndSubNodesDelete = function (nodeKey) {\n        var toDeleteLater = [];\n        for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n            var id = this.nodes[nodeKey][i];\n            this.nodeAndSubNodesDelete(id);\n            toDeleteLater.push(nodeKey);\n        }\n        this.nodeDelete(nodeKey);\n        for (var i = 0; i < toDeleteLater.length; i++) {\n            this.nodeDelete(toDeleteLater[i]);\n        }\n    };\n    MultiRootTree.prototype.nodeRefrencesDelete = function (id) {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n                    var targetId = this.nodes[nodeKey][i];\n                    if (targetId === id) {\n                        this.nodeDeleteAtIndex(nodeKey, i);\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.nodeDelete = function (nodeKey) {\n        delete this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.findRootId = function (id) {\n        return this.rootIds.indexOf(id);\n    };\n    MultiRootTree.prototype.findNodeId = function (nodeKey, id) {\n        return this.nodes[nodeKey].indexOf(id);\n    };\n    MultiRootTree.prototype.findNode = function (nodeKey) {\n        return this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.nodeInsertAtStart = function (nodeKey, id) {\n        this.nodes[nodeKey].unshift(id);\n    };\n    MultiRootTree.prototype.nodeInsertAtEnd = function (nodeKey, id) {\n        this.nodes[nodeKey].push(id);\n    };\n    MultiRootTree.prototype.rootDelete = function (index) {\n        this.rootIds.splice(index, 1);\n    };\n    MultiRootTree.prototype.nodeDeleteAtIndex = function (nodeKey, index) {\n        this.nodes[nodeKey].splice(index, 1);\n    };\n    MultiRootTree.prototype.rootInsertAtStart = function (id) {\n        this.rootIds.unshift(id);\n    };\n    MultiRootTree.prototype.rootInsertAtEnd = function (id) {\n        this.rootIds.push(id);\n    };\n    return MultiRootTree;\n}());\nexports.default = MultiRootTree;\n//# sourceMappingURL=MultiRootTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n//\n// Licensed under MIT open source license http://opensource.org/licenses/MIT\n//\n// Orginal javascript code was by Mauricio Santos\n//\nvar _arrays = require(\"./arrays\");\nexports.arrays = _arrays;\nvar Bag_1 = require(\"./Bag\");\nexports.Bag = Bag_1.default;\nvar BSTree_1 = require(\"./BSTree\");\nexports.BSTree = BSTree_1.default;\nvar BSTreeKV_1 = require(\"./BSTreeKV\");\nexports.BSTreeKV = BSTreeKV_1.default;\nvar Dictionary_1 = require(\"./Dictionary\");\nexports.Dictionary = Dictionary_1.default;\nvar Heap_1 = require(\"./Heap\");\nexports.Heap = Heap_1.default;\nvar LinkedDictionary_1 = require(\"./LinkedDictionary\");\nexports.LinkedDictionary = LinkedDictionary_1.default;\nvar LinkedList_1 = require(\"./LinkedList\");\nexports.LinkedList = LinkedList_1.default;\nvar MultiDictionary_1 = require(\"./MultiDictionary\");\nexports.MultiDictionary = MultiDictionary_1.default;\nvar FactoryDictionary_1 = require(\"./FactoryDictionary\");\nexports.FactoryDictionary = FactoryDictionary_1.default;\nvar FactoryDictionary_2 = require(\"./FactoryDictionary\");\nexports.DefaultDictionary = FactoryDictionary_2.default;\nvar Queue_1 = require(\"./Queue\");\nexports.Queue = Queue_1.default;\nvar PriorityQueue_1 = require(\"./PriorityQueue\");\nexports.PriorityQueue = PriorityQueue_1.default;\nvar Set_1 = require(\"./Set\");\nexports.Set = Set_1.default;\nvar Stack_1 = require(\"./Stack\");\nexports.Stack = Stack_1.default;\nvar MultiRootTree_1 = require(\"./MultiRootTree\");\nexports.MultiRootTree = MultiRootTree_1.default;\nvar _util = require(\"./util\");\nexports.util = _util;\n//# sourceMappingURL=index.js.map","!function(t,r){\"object\"==typeof exports&&\"undefined\"!=typeof module?r(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],r):r(t.ss={})}(this,function(t){\"use strict\";function r(t){if(0===t.length)return 0;for(var r,n=t[0],e=0,a=1;a<t.length;a++)r=n+t[a],Math.abs(n)>=Math.abs(t[a])?e+=n-r+t[a]:e+=t[a]-r+n,n=r;return n+e}function g(t){if(0===t.length)throw new Error(\"mean requires at least one data point\");return r(t)/t.length}function n(t,r){var n,e,a=g(t),o=0;if(2===r)for(e=0;e<t.length;e++)o+=(n=t[e]-a)*n;else for(e=0;e<t.length;e++)o+=Math.pow(t[e]-a,r);return o}function e(t){if(0===t.length)throw new Error(\"variance requires at least one data point\");return n(t,2)/t.length}function a(t){if(1===t.length)return 0;var r=e(t);return Math.sqrt(r)}function o(t){if(0===t.length)throw new Error(\"mode requires at least one data point\");if(1===t.length)return t[0];for(var r=t[0],n=NaN,e=0,a=1,o=1;o<t.length+1;o++)t[o]!==r?(e<a&&(e=a,n=r),a=1,r=t[o]):a++;return n}function f(t){return t.slice().sort(function(t,r){return t-r})}function u(t){if(0===t.length)throw new Error(\"min requires at least one data point\");for(var r=t[0],n=1;n<t.length;n++)t[n]<r&&(r=t[n]);return r}function h(t){if(0===t.length)throw new Error(\"max requires at least one data point\");for(var r=t[0],n=1;n<t.length;n++)t[n]>r&&(r=t[n]);return r}function i(t,r){var n=t.length*r;if(0===t.length)throw new Error(\"quantile requires at least one data point.\");if(r<0||1<r)throw new Error(\"quantiles must be between 0 and 1\");return 1===r?t[t.length-1]:0===r?t[0]:n%1!=0?t[Math.ceil(n)-1]:t.length%2==0?(t[n-1]+t[n])/2:t[n]}function c(t,r,n,e){for(n=n||0,e=e||t.length-1;n<e;){if(600<e-n){var a=e-n+1,o=r-n+1,i=Math.log(a),u=.5*Math.exp(2*i/3),h=.5*Math.sqrt(i*u*(a-u)/a);o-a/2<0&&(h*=-1),c(t,r,Math.max(n,Math.floor(r-o*u/a+h)),Math.min(e,Math.floor(r+(a-o)*u/a+h)))}var f=t[r],s=n,l=e;for(p(t,n,r),t[e]>f&&p(t,n,e);s<l;){for(p(t,s,l),s++,l--;t[s]<f;)s++;for(;t[l]>f;)l--}t[n]===f?p(t,n,l):p(t,++l,e),l<=r&&(n=l+1),r<=l&&(e=l-1)}}function p(t,r,n){var e=t[r];t[r]=t[n],t[n]=e}function s(t,r){var n=t.slice();if(Array.isArray(r)){!function(t,r){for(var n=[0],e=0;e<r.length;e++)n.push(w(t.length,r[e]));n.push(t.length-1),n.sort(v);var a=[0,n.length-1];for(;a.length;){var o=Math.ceil(a.pop()),i=Math.floor(a.pop());if(!(o-i<=1)){var u=Math.floor((i+o)/2);l(t,n[u],n[i],n[o]),a.push(i,u,u,o)}}}(n,r);for(var e=[],a=0;a<r.length;a++)e[a]=i(n,r[a]);return e}return l(n,w(n.length,r),0,n.length-1),i(n,r)}function l(t,r,n,e){r%1==0?c(t,r,n,e):(c(t,r=Math.floor(r),n,e),c(t,r+1,r+1,e))}function v(t,r){return t-r}function w(t,r){var n=t*r;return 1===r?t-1:0===r?0:n%1!=0?Math.ceil(n)-1:t%2==0?n-.5:n}function M(t,r){if(r<t[0])return 0;if(r>t[t.length-1])return 1;var n=function(t,r){var n=0,e=0,a=t.length;for(;e<a;)r<=t[n=e+a>>>1]?a=n:e=-~n;return e}(t,r);if(t[n]!==r)return n/t.length;n++;var e=function(t,r){var n=0,e=0,a=t.length;for(;e<a;)r>=t[n=e+a>>>1]?e=-~n:a=n;return e}(t,r);if(e===n)return n/t.length;var a=e-n+1;return a*(e+n)/2/a/t.length}function m(t){var r=s(t,.75),n=s(t,.25);if(\"number\"==typeof r&&\"number\"==typeof n)return r-n}function d(t){return+s(t,.5)}function b(t){for(var r=d(t),n=[],e=0;e<t.length;e++)n.push(Math.abs(t[e]-r));return d(n)}function q(t,r){r=r||Math.random;for(var n,e,a=t.length;0<a;)e=Math.floor(r()*a--),n=t[a],t[a]=t[e],t[e]=n;return t}function E(t,r){return q(t.slice().slice(),r)}function y(t){for(var r,n=0,e=0;e<t.length;e++)0!==e&&t[e]===r||(r=t[e],n++);return n}function S(t,r){for(var n=[],e=0;e<t;e++){for(var a=[],o=0;o<r;o++)a.push(0);n.push(a)}return n}function x(t,r,n,e){var a;if(0<t){var o=(n[r]-n[t-1])/(r-t+1);a=e[r]-e[t-1]-(r-t+1)*o*o}else a=e[r]-n[r]*n[r]/(r+1);return a<0?0:a}function P(t,r,n,e,a,o,i){if(!(r<t)){var u=Math.floor((t+r)/2);e[n][u]=e[n-1][u-1],a[n][u]=u;var h=n;n<t&&(h=Math.max(h,a[n][t-1]||0)),h=Math.max(h,a[n-1][u]||0);var f,s,l,c=u-1;r<e.length-1&&(c=Math.min(c,a[n][r+1]||0));for(var g=c;h<=g&&!((f=x(g,u,o,i))+e[n-1][h-1]>=e[n][u]);--g)(s=x(h,u,o,i)+e[n-1][h-1])<e[n][u]&&(e[n][u]=s,a[n][u]=h),h++,(l=f+e[n-1][g-1])<e[n][u]&&(e[n][u]=l,a[n][u]=g);P(t,u-1,n,e,a,o,i),P(u+1,r,n,e,a,o,i)}}function k(t,r){if(t.length!==r.length)throw new Error(\"sampleCovariance requires samples with equal lengths\");if(t.length<2)throw new Error(\"sampleCovariance requires at least two data points in each sample\");for(var n=g(t),e=g(r),a=0,o=0;o<t.length;o++)a+=(t[o]-n)*(r[o]-e);return a/(t.length-1)}function I(t){if(t.length<2)throw new Error(\"sampleVariance requires at least two data points\");return n(t,2)/(t.length-1)}function D(t){var r=I(t);return Math.sqrt(r)}function C(t,r,n,e){return(t*r+n*e)/(r+e)}function T(t){if(0===t.length)throw new Error(\"rootMeanSquare requires at least one data point\");for(var r=0,n=0;n<t.length;n++)r+=Math.pow(t[n],2);return Math.sqrt(r/t.length)}function _(){this.totalCount=0,this.data={}}function F(){this.weights=[],this.bias=0}_.prototype.train=function(t,r){for(var n in this.data[r]||(this.data[r]={}),t){var e=t[n];void 0===this.data[r][n]&&(this.data[r][n]={}),void 0===this.data[r][n][e]&&(this.data[r][n][e]=0),this.data[r][n][e]++}this.totalCount++},_.prototype.score=function(t){var r,n={};for(var e in t){var a=t[e];for(r in this.data)n[r]={},this.data[r][e]?n[r][e+\"_\"+a]=(this.data[r][e][a]||0)/this.totalCount:n[r][e+\"_\"+a]=0}var o={};for(r in n)for(var i in o[r]=0,n[r])o[r]+=n[r][i];return o},F.prototype.predict=function(t){if(t.length!==this.weights.length)return null;for(var r=0,n=0;n<this.weights.length;n++)r+=this.weights[n]*t[n];return 0<(r+=this.bias)?1:0},F.prototype.train=function(t,r){if(0!==r&&1!==r)return null;t.length!==this.weights.length&&(this.weights=t,this.bias=1);var n=this.predict(t);if(n!==r){for(var e=r-n,a=0;a<this.weights.length;a++)this.weights[a]+=e*t[a];this.bias+=e}return this};var N=1e-4;function R(t){if(t<0)throw new Error(\"factorial requires a non-negative value\");if(Math.floor(t)!==t)throw new Error(\"factorial requires an integer input\");for(var r=1,n=2;n<=t;n++)r*=n;return r}var A=[.9999999999999971,57.15623566586292,-59.59796035547549,14.136097974741746,-.4919138160976202,3399464998481189e-20,4652362892704858e-20,-9837447530487956e-20,.0001580887032249125,-.00021026444172410488,.00021743961811521265,-.0001643181065367639,8441822398385275e-20,-26190838401581408e-21,36899182659531625e-22],z=Math.log(Math.sqrt(2*Math.PI));var V={1:{.995:0,.99:0,.975:0,.95:0,.9:.02,.5:.45,.1:2.71,.05:3.84,.025:5.02,.01:6.63,.005:7.88},2:{.995:.01,.99:.02,.975:.05,.95:.1,.9:.21,.5:1.39,.1:4.61,.05:5.99,.025:7.38,.01:9.21,.005:10.6},3:{.995:.07,.99:.11,.975:.22,.95:.35,.9:.58,.5:2.37,.1:6.25,.05:7.81,.025:9.35,.01:11.34,.005:12.84},4:{.995:.21,.99:.3,.975:.48,.95:.71,.9:1.06,.5:3.36,.1:7.78,.05:9.49,.025:11.14,.01:13.28,.005:14.86},5:{.995:.41,.99:.55,.975:.83,.95:1.15,.9:1.61,.5:4.35,.1:9.24,.05:11.07,.025:12.83,.01:15.09,.005:16.75},6:{.995:.68,.99:.87,.975:1.24,.95:1.64,.9:2.2,.5:5.35,.1:10.65,.05:12.59,.025:14.45,.01:16.81,.005:18.55},7:{.995:.99,.99:1.25,.975:1.69,.95:2.17,.9:2.83,.5:6.35,.1:12.02,.05:14.07,.025:16.01,.01:18.48,.005:20.28},8:{.995:1.34,.99:1.65,.975:2.18,.95:2.73,.9:3.49,.5:7.34,.1:13.36,.05:15.51,.025:17.53,.01:20.09,.005:21.96},9:{.995:1.73,.99:2.09,.975:2.7,.95:3.33,.9:4.17,.5:8.34,.1:14.68,.05:16.92,.025:19.02,.01:21.67,.005:23.59},10:{.995:2.16,.99:2.56,.975:3.25,.95:3.94,.9:4.87,.5:9.34,.1:15.99,.05:18.31,.025:20.48,.01:23.21,.005:25.19},11:{.995:2.6,.99:3.05,.975:3.82,.95:4.57,.9:5.58,.5:10.34,.1:17.28,.05:19.68,.025:21.92,.01:24.72,.005:26.76},12:{.995:3.07,.99:3.57,.975:4.4,.95:5.23,.9:6.3,.5:11.34,.1:18.55,.05:21.03,.025:23.34,.01:26.22,.005:28.3},13:{.995:3.57,.99:4.11,.975:5.01,.95:5.89,.9:7.04,.5:12.34,.1:19.81,.05:22.36,.025:24.74,.01:27.69,.005:29.82},14:{.995:4.07,.99:4.66,.975:5.63,.95:6.57,.9:7.79,.5:13.34,.1:21.06,.05:23.68,.025:26.12,.01:29.14,.005:31.32},15:{.995:4.6,.99:5.23,.975:6.27,.95:7.26,.9:8.55,.5:14.34,.1:22.31,.05:25,.025:27.49,.01:30.58,.005:32.8},16:{.995:5.14,.99:5.81,.975:6.91,.95:7.96,.9:9.31,.5:15.34,.1:23.54,.05:26.3,.025:28.85,.01:32,.005:34.27},17:{.995:5.7,.99:6.41,.975:7.56,.95:8.67,.9:10.09,.5:16.34,.1:24.77,.05:27.59,.025:30.19,.01:33.41,.005:35.72},18:{.995:6.26,.99:7.01,.975:8.23,.95:9.39,.9:10.87,.5:17.34,.1:25.99,.05:28.87,.025:31.53,.01:34.81,.005:37.16},19:{.995:6.84,.99:7.63,.975:8.91,.95:10.12,.9:11.65,.5:18.34,.1:27.2,.05:30.14,.025:32.85,.01:36.19,.005:38.58},20:{.995:7.43,.99:8.26,.975:9.59,.95:10.85,.9:12.44,.5:19.34,.1:28.41,.05:31.41,.025:34.17,.01:37.57,.005:40},21:{.995:8.03,.99:8.9,.975:10.28,.95:11.59,.9:13.24,.5:20.34,.1:29.62,.05:32.67,.025:35.48,.01:38.93,.005:41.4},22:{.995:8.64,.99:9.54,.975:10.98,.95:12.34,.9:14.04,.5:21.34,.1:30.81,.05:33.92,.025:36.78,.01:40.29,.005:42.8},23:{.995:9.26,.99:10.2,.975:11.69,.95:13.09,.9:14.85,.5:22.34,.1:32.01,.05:35.17,.025:38.08,.01:41.64,.005:44.18},24:{.995:9.89,.99:10.86,.975:12.4,.95:13.85,.9:15.66,.5:23.34,.1:33.2,.05:36.42,.025:39.36,.01:42.98,.005:45.56},25:{.995:10.52,.99:11.52,.975:13.12,.95:14.61,.9:16.47,.5:24.34,.1:34.28,.05:37.65,.025:40.65,.01:44.31,.005:46.93},26:{.995:11.16,.99:12.2,.975:13.84,.95:15.38,.9:17.29,.5:25.34,.1:35.56,.05:38.89,.025:41.92,.01:45.64,.005:48.29},27:{.995:11.81,.99:12.88,.975:14.57,.95:16.15,.9:18.11,.5:26.34,.1:36.74,.05:40.11,.025:43.19,.01:46.96,.005:49.65},28:{.995:12.46,.99:13.57,.975:15.31,.95:16.93,.9:18.94,.5:27.34,.1:37.92,.05:41.34,.025:44.46,.01:48.28,.005:50.99},29:{.995:13.12,.99:14.26,.975:16.05,.95:17.71,.9:19.77,.5:28.34,.1:39.09,.05:42.56,.025:45.72,.01:49.59,.005:52.34},30:{.995:13.79,.99:14.95,.975:16.79,.95:18.49,.9:20.6,.5:29.34,.1:40.26,.05:43.77,.025:46.98,.01:50.89,.005:53.67},40:{.995:20.71,.99:22.16,.975:24.43,.95:26.51,.9:29.05,.5:39.34,.1:51.81,.05:55.76,.025:59.34,.01:63.69,.005:66.77},50:{.995:27.99,.99:29.71,.975:32.36,.95:34.76,.9:37.69,.5:49.33,.1:63.17,.05:67.5,.025:71.42,.01:76.15,.005:79.49},60:{.995:35.53,.99:37.48,.975:40.48,.95:43.19,.9:46.46,.5:59.33,.1:74.4,.05:79.08,.025:83.3,.01:88.38,.005:91.95},70:{.995:43.28,.99:45.44,.975:48.76,.95:51.74,.9:55.33,.5:69.33,.1:85.53,.05:90.53,.025:95.02,.01:100.42,.005:104.22},80:{.995:51.17,.99:53.54,.975:57.15,.95:60.39,.9:64.28,.5:79.33,.1:96.58,.05:101.88,.025:106.63,.01:112.33,.005:116.32},90:{.995:59.2,.99:61.75,.975:65.65,.95:69.13,.9:73.29,.5:89.33,.1:107.57,.05:113.14,.025:118.14,.01:124.12,.005:128.3},100:{.995:67.33,.99:70.06,.975:74.22,.95:77.93,.9:82.36,.5:99.33,.1:118.5,.05:124.34,.025:129.56,.01:135.81,.005:140.17}};var j=Math.sqrt(2*Math.PI),B={gaussian:function(t){return Math.exp(-.5*t*t)/j}},K={nrd:function(t){var r=D(t),n=m(t);return\"number\"==typeof n&&(r=Math.min(r,n/1.34)),1.06*r*Math.pow(t.length,-.2)}};function O(e,t,r){var a,o;if(void 0===t)a=B.gaussian;else if(\"string\"==typeof t){if(!B[t])throw new Error('Unknown kernel \"'+t+'\"');a=B[t]}else a=t;if(void 0===r)o=K.nrd(e);else if(\"string\"==typeof r){if(!K[r])throw new Error('Unknown bandwidth method \"'+r+'\"');o=K[r](e)}else o=r;return function(t){var r=0,n=0;for(r=0;r<e.length;r++)n+=a((t-e[r])/o);return n/o/e.length}}var U=Math.sqrt(2*Math.PI);function G(t){for(var r=t,n=t,e=1;e<15;e++)r+=n*=t*t/(2*e+1);return Math.round(1e4*(.5+r/U*Math.exp(-t*t/2)))/1e4}for(var H=[],L=0;L<=3.09;L+=.01)H.push(G(L));function W(t){var r=1/(1+.5*Math.abs(t)),n=r*Math.exp(-Math.pow(t,2)-1.26551223+1.00002368*r+.37409196*Math.pow(r,2)+.09678418*Math.pow(r,3)-.18628806*Math.pow(r,4)+.27886807*Math.pow(r,5)-1.13520398*Math.pow(r,6)+1.48851587*Math.pow(r,7)-.82215223*Math.pow(r,8)+.17087277*Math.pow(r,9));return 0<=t?1-n:n-1}function J(t){var r=8*(Math.PI-3)/(3*Math.PI*(4-Math.PI)),n=Math.sqrt(Math.sqrt(Math.pow(2/(Math.PI*r)+Math.log(1-t*t)/2,2)-Math.log(1-t*t)/r)-(2/(Math.PI*r)+Math.log(1-t*t)/2));return 0<=t?n:-n}function Q(t){if(\"number\"==typeof t)return t<0?-1:0===t?0:1;throw new TypeError(\"not a number\")}t.linearRegression=function(t){var r,n,e=t.length;if(1===e)n=t[r=0][1];else{for(var a,o,i,u=0,h=0,f=0,s=0,l=0;l<e;l++)u+=o=(a=t[l])[0],h+=i=a[1],f+=o*o,s+=o*i;n=h/e-(r=(e*s-u*h)/(e*f-u*u))*u/e}return{m:r,b:n}},t.linearRegressionLine=function(r){return function(t){return r.b+r.m*t}},t.standardDeviation=a,t.rSquared=function(t,r){if(t.length<2)return 1;for(var n,e=0,a=0;a<t.length;a++)e+=t[a][1];n=e/t.length;for(var o=0,i=0;i<t.length;i++)o+=Math.pow(n-t[i][1],2);for(var u=0,h=0;h<t.length;h++)u+=Math.pow(t[h][1]-r(t[h][0]),2);return 1-u/o},t.mode=function(t){return o(f(t))},t.modeFast=function(t){for(var r,n=new Map,e=0,a=0;a<t.length;a++){var o=n.get(t[a]);void 0===o?o=1:o++,e<o&&(r=t[a],e=o),n.set(t[a],o)}if(0===e)throw new Error(\"mode requires at last one data point\");return r},t.modeSorted=o,t.min=u,t.max=h,t.extent=function(t){if(0===t.length)throw new Error(\"extent requires at least one data point\");for(var r=t[0],n=t[0],e=1;e<t.length;e++)t[e]>n&&(n=t[e]),t[e]<r&&(r=t[e]);return[r,n]},t.minSorted=function(t){return t[0]},t.maxSorted=function(t){return t[t.length-1]},t.extentSorted=function(t){return[t[0],t[t.length-1]]},t.sum=r,t.sumSimple=function(t){for(var r=0,n=0;n<t.length;n++)r+=t[n];return r},t.product=function(t){for(var r=1,n=0;n<t.length;n++)r*=t[n];return r},t.quantile=s,t.quantileSorted=i,t.quantileRank=function(t,r){return M(f(t),r)},t.quantileRankSorted=M,t.interquartileRange=m,t.iqr=m,t.medianAbsoluteDeviation=b,t.mad=b,t.chunk=function(t,r){var n=[];if(r<1)throw new Error(\"chunk size must be a positive number\");if(Math.floor(r)!==r)throw new Error(\"chunk size must be an integer\");for(var e=0;e<t.length;e+=r)n.push(t.slice(e,e+r));return n},t.sampleWithReplacement=function(t,r,n){if(0===t.length)return[];n=n||Math.random;for(var e=t.length,a=[],o=0;o<r;o++){var i=Math.floor(n()*e);a.push(t[i])}return a},t.shuffle=E,t.shuffleInPlace=q,t.sample=function(t,r,n){return E(t,n).slice(0,r)},t.ckmeans=function(t,r){if(r>t.length)throw new Error(\"cannot generate more classes than there are data values\");var n=f(t);if(1===y(n))return[n];var e=S(r,n.length),a=S(r,n.length);!function(t,r,n){for(var e,a=r[0].length,o=t[Math.floor(a/2)],i=[],u=[],h=0;h<a;++h)e=t[h]-o,0===h?(i.push(e),u.push(e*e)):(i.push(i[h-1]+e),u.push(u[h-1]+e*e)),r[0][h]=x(0,h,i,u),n[0][h]=0;for(var f=1;f<r.length;++f)P(f<r.length-1?f:a-1,a-1,f,r,n,i,u)}(n,e,a);for(var o=[],i=a[0].length-1,u=a.length-1;0<=u;u--){var h=a[u][i];o[u]=n.slice(h,i+1),0<u&&(i=h-1)}return o},t.uniqueCountSorted=y,t.sumNthPowerDeviations=n,t.equalIntervalBreaks=function(t,r){if(t.length<2)return t;for(var n=u(t),e=h(t),a=[n],o=(e-n)/r,i=1;i<r;i++)a.push(a[0]+o*i);return a.push(e),a},t.sampleCovariance=k,t.sampleCorrelation=function(t,r){return k(t,r)/D(t)/D(r)},t.sampleVariance=I,t.sampleStandardDeviation=D,t.sampleSkewness=function(t){if(t.length<3)throw new Error(\"sampleSkewness requires at least three data points\");for(var r,n=g(t),e=0,a=0,o=0;o<t.length;o++)e+=(r=t[o]-n)*r,a+=r*r*r;var i=t.length-1,u=Math.sqrt(e/i),h=t.length;return h*a/((h-1)*(h-2)*Math.pow(u,3))},t.sampleKurtosis=function(t){var r=t.length;if(r<4)throw new Error(\"sampleKurtosis requires at least four data points\");for(var n,e=g(t),a=0,o=0,i=0;i<r;i++)a+=(n=t[i]-e)*n,o+=n*n*n*n;return(r-1)/((r-2)*(r-3))*(r*(r+1)*o/(a*a)-3*(r-1))},t.permutationsHeap=function(t){for(var r=new Array(t.length),n=[t.slice()],e=0;e<t.length;e++)r[e]=0;for(e=0;e<t.length;)if(r[e]<e){var a=0;e%2!=0&&(a=r[e]);var o=t[a];t[a]=t[e],t[e]=o,n.push(t.slice()),r[e]++,e=0}else r[e]=0,e++;return n},t.combinations=function t(r,n){var e,a,o,i,u=[];for(e=0;e<r.length;e++)if(1===n)u.push([r[e]]);else for(o=t(r.slice(e+1,r.length),n-1),a=0;a<o.length;a++)(i=o[a]).unshift(r[e]),u.push(i);return u},t.combinationsReplacement=function t(r,n){for(var e=[],a=0;a<r.length;a++)if(1===n)e.push([r[a]]);else for(var o=t(r.slice(a,r.length),n-1),i=0;i<o.length;i++)e.push([r[a]].concat(o[i]));return e},t.addToMean=function(t,r,n){return t+(n-t)/(r+1)},t.combineMeans=C,t.combineVariances=function(t,r,n,e,a,o){var i=C(r,n,a,o);return(n*(t+Math.pow(r-i,2))+o*(e+Math.pow(a-i,2)))/(n+o)},t.geometricMean=function(t){if(0===t.length)throw new Error(\"geometricMean requires at least one data point\");for(var r=1,n=0;n<t.length;n++){if(t[n]<=0)throw new Error(\"geometricMean requires only positive numbers as input\");r*=t[n]}return Math.pow(r,1/t.length)},t.harmonicMean=function(t){if(0===t.length)throw new Error(\"harmonicMean requires at least one data point\");for(var r=0,n=0;n<t.length;n++){if(t[n]<=0)throw new Error(\"harmonicMean requires only positive numbers as input\");r+=1/t[n]}return t.length/r},t.average=g,t.mean=g,t.median=d,t.medianSorted=function(t){return i(t,.5)},t.subtractFromMean=function(t,r,n){return(t*r-n)/(r-1)},t.rootMeanSquare=T,t.rms=T,t.variance=e,t.tTest=function(t,r){return(g(t)-r)/(a(t)/Math.sqrt(t.length))},t.tTestTwoSample=function(t,r,n){var e=t.length,a=r.length;if(!e||!a)return null;n||(n=0);var o=g(t),i=g(r),u=I(t),h=I(r);if(\"number\"==typeof o&&\"number\"==typeof i&&\"number\"==typeof u&&\"number\"==typeof h){var f=((e-1)*u+(a-1)*h)/(e+a-2);return(o-i-n)/Math.sqrt(f*(1/e+1/a))}},t.BayesianClassifier=_,t.bayesian=_,t.PerceptronModel=F,t.perceptron=F,t.epsilon=N,t.factorial=R,t.gamma=function t(r){if(\"number\"==typeof(n=r)&&isFinite(n)&&Math.floor(n)===n)return r<=0?NaN:R(r-1);var n;if(--r<0)return Math.PI/(Math.sin(Math.PI*-r)*t(-r));var e=r+.25;return Math.pow(r/Math.E,r)*Math.sqrt(2*Math.PI*(r+1/6))*(1+1/144/Math.pow(e,2)-1/12960/Math.pow(e,3)-257/207360/Math.pow(e,4)-52/2612736/Math.pow(e,5)+5741173/9405849600/Math.pow(e,6)+37529/18811699200/Math.pow(e,7))},t.gammaln=function(t){if(t<=0)return 1/0;t--;for(var r=A[0],n=1;n<15;n++)r+=A[n]/(t+n);var e=5.2421875+t;return z+Math.log(r)-e+(t+.5)*Math.log(e)},t.bernoulliDistribution=function(t){if(t<0||1<t)throw new Error(\"bernoulliDistribution requires probability to be between 0 and 1 inclusive\");return[1-t,t]},t.binomialDistribution=function(t,r){if(!(r<0||1<r||t<=0||t%1!=0)){for(var n=0,e=0,a=[],o=1;a[n]=o*Math.pow(r,n)*Math.pow(1-r,t-n),e+=a[n],o=o*(t-++n+1)/n,e<1-N;);return a}},t.poissonDistribution=function(t){if(!(t<=0)){for(var r=0,n=0,e=[],a=1;e[r]=Math.exp(-t)*Math.pow(t,r)/a,n+=e[r],a*=++r,n<1-N;);return e}},t.chiSquaredDistributionTable=V,t.chiSquaredGoodnessOfFit=function(t,r,n){for(var e,a,o=0,i=r(g(t)),u=[],h=[],f=0;f<t.length;f++)void 0===u[t[f]]&&(u[t[f]]=0),u[t[f]]++;for(f=0;f<u.length;f++)void 0===u[f]&&(u[f]=0);for(a in i)a in u&&(h[+a]=i[a]*t.length);for(a=h.length-1;0<=a;a--)h[a]<3&&(h[a-1]+=h[a],h.pop(),u[a-1]+=u[a],u.pop());for(a=0;a<u.length;a++)o+=Math.pow(u[a]-h[a],2)/h[a];return e=u.length-1-1,V[e][n]<o},t.kernelDensityEstimation=O,t.kde=O,t.zScore=function(t,r,n){return(t-r)/n},t.cumulativeStdNormalProbability=function(t){var r=Math.abs(t),n=Math.min(Math.round(100*r),H.length-1);return 0<=t?H[n]:+(1-H[n]).toFixed(4)},t.standardNormalTable=H,t.errorFunction=W,t.erf=W,t.inverseErrorFunction=J,t.probit=function(t){return 0===t?t=N:1<=t&&(t=1-N),Math.sqrt(2)*J(2*t-1)},t.permutationTest=function(t,r,n,e){if(void 0===e&&(e=1e4),void 0===n&&(n=\"two_side\"),\"two_side\"!==n&&\"greater\"!==n&&\"less\"!==n)throw new Error(\"`alternative` must be either 'two_side', 'greater', or 'less'\");for(var a=g(t)-g(r),o=new Array(e),i=t.concat(r),u=Math.floor(i.length/2),h=0;h<e;h++){q(i);var f=i.slice(0,u),s=i.slice(u,i.length),l=g(f)-g(s);o[h]=l}var c=0;if(\"two_side\"===n)for(h=0;h<=e;h++)Math.abs(o[h])>=Math.abs(a)&&(c+=1);else if(\"greater\"===n)for(h=0;h<=e;h++)o[h]>=a&&(c+=1);else for(h=0;h<=e;h++)o[h]<=a&&(c+=1);return c/e},t.bisect=function(t,r,n,e,a){if(\"function\"!=typeof t)throw new TypeError(\"func must be a function\");for(var o=0;o<e;o++){var i=(r+n)/2;if(0===t(i)||Math.abs((n-r)/2)<a)return i;Q(t(i))===Q(t(r))?r=i:n=i}throw new Error(\"maximum number of iterations exceeded\")},t.quickselect=c,t.sign=Q,t.numericSort=f,Object.defineProperty(t,\"__esModule\",{value:!0})});\n//# sourceMappingURL=simple-statistics.min.js.map\n","import ndarray from 'ndarray';\nimport Alea from 'alea';\nimport SimplexNoise from 'simplex-noise';\nimport fill from 'ndarray-fill';\nimport ops from 'ndarray-ops';\nimport { IWorldgenOptions, IWorldgenWorkerOutput, EWorldShape } from './simulation';\nimport {\n  ETerrainType,\n  EDirection,\n  EBiome,\n  moistureZoneRanges,\n  temperatureZoneRanges,\n  biomeRanges\n} from './world';\nimport * as Collections from 'typescript-collections';\nimport * as Stats from 'simple-statistics';\nimport { groupBy, mapValues } from 'lodash';\n\n\n/**\n * Priority Flood algorithm from:\n * https://arxiv.org/pdf/1511.04463v1.pdf\n */\n\nfunction ndarrayStats(ndarray: ndarray) {\n  const data = Array.from(ndarray.data);\n  const quantiles = {};\n  for (let q = 0; q <= 100; q += 1) {\n    quantiles[q] = Stats.quantile(data, q / 100);\n  }\n  return {\n    array: ndarray,\n    avg: ops.sum(ndarray) / (ndarray.shape[0] * ndarray.shape[0]),\n    max: ops.sup(ndarray),\n    min: ops.inf(ndarray),\n    quantiles\n  };\n}\n\nfunction countUnique(ndarray: ndarray) {\n  const data = Array.from(ndarray.data);\n  return mapValues(groupBy(data, i => i), i => i.length);\n}\n\nconst getNeighbors = (x: number, y: number): number[][] => [\n  [x - 1, y],\n  [x + 1, y],\n  [x, y - 1],\n  [x, y + 1],\n]\n\nconst getNeighborsLabelled = (x: number, y: number): number[][] => [\n  [x - 1, y, EDirection.LEFT],\n  [x + 1, y, EDirection.RIGHT],\n  [x, y - 1, EDirection.UP],\n  [x, y + 1, EDirection.DOWN],\n]\n\nconst neighborForDirection = {\n  [EDirection.UP]: (x: number, y: number) => [x, y - 1],\n  [EDirection.DOWN]: (x: number, y: number) => [x, y + 1],\n  [EDirection.LEFT]: (x: number, y: number) => [x - 1, y],\n  [EDirection.RIGHT]: (x: number, y: number) =>  [x + 1, y],\n}\n\nconst oppositeDirections = {\n  [EDirection.NONE]: EDirection.NONE,\n  [EDirection.UP]: EDirection.DOWN,\n  [EDirection.DOWN]: EDirection.UP,\n  [EDirection.LEFT]: EDirection.RIGHT,\n  [EDirection.RIGHT]: EDirection.LEFT,\n}\n\nfunction isValidCell(x: number, y: number, width: number, height: number): boolean {\n  return x >= 0 && y >= 0 && x < width && y < height;\n}\n\n\nfunction loopGridCircle(x, y, radius) {\n  let cells = [];\n  for (let cx = x - radius; cx < x + radius; cx++) {\n    for (let cy = y - radius; cy < y + radius; cy++) {\n      const distance = Math.sqrt(Math.pow(x - cx, 2) + Math.pow(y - cy, 2));\n      if (distance <= radius) {\n        cells.push([cx, cy]);\n      }\n    }\n  }\n  return cells;\n}\n\nfunction isOceanic(cell) {\n  return (\n    cell === ETerrainType.OCEAN ||\n    cell === ETerrainType.COAST\n  );\n}\n\nfunction isContinental(cell) {\n  return (\n    cell === ETerrainType.LAND ||\n    cell === ETerrainType.LAKE ||\n    cell === ETerrainType.RIVER ||\n    cell === ETerrainType.MOUNTAIN\n  );\n}\n\n//////\n\nfunction generateHeightmap(options: IWorldgenOptions) {\n  const { seed, size: { width, height }, worldShape, worldShapePower } = options;\n\n  const heightmap = ndarray(new Uint8ClampedArray(width * height), [width, height]);\n  const rng = new Alea(seed);\n  const simplex = new SimplexNoise(rng);\n  const noise = (nx, ny) => simplex.noise2D(nx, ny);\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const maxDistanceToCenter = Math.min(width / 2, height / 2);\n\n  fill(heightmap, (x, y) => {\n    // use simplex noise to create random terrain\n    const nx = x / width - 0.5;\n    const ny = y / height - 0.5;\n    let value = (\n      0.35 * noise(2.50 * nx, 2.50 * ny) +\n      0.30 * noise(5.00 * nx, 5.00 * ny) +\n      0.20 * noise(10.0 * nx, 10.0 * ny) +\n      0.10 * noise(20.0 * nx, 20.0 * ny) +\n      0.05 * noise(40.0 * nx, 40.0 * ny)\n    );\n    value = (value + 1) / 2;\n\n    // decrease the height of cells farther away from the center to create an island\n    if (worldShape === EWorldShape.CIRCLE) {\n      const distanceToCenter = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));\n      const distanceRatio = distanceToCenter / maxDistanceToCenter;\n      value = value * (1 - Math.pow(distanceRatio, worldShapePower));\n    } else if (worldShape === EWorldShape.RECTANGLE) {\n      const distanceRatio = Math.max(\n        Math.abs(x - centerX) / (width / 2),\n        Math.abs(y - centerY) / (height / 2),\n      );\n      value = value * (1 - Math.pow(distanceRatio, worldShapePower));\n    }\n    return value * 255;\n  });\n\n  return heightmap;\n}\n\nfunction removeDepressions(options: IWorldgenOptions, heightmap: ndarray) {\n  const { size: { width, height } } = options;\n\n  // copy heightmap into waterheight\n  const waterheight = ndarray(new Uint8ClampedArray(width * height), [width, height]);\n  ops.assign(waterheight, heightmap);\n\n  // priority flood to fill lakes\n  const open = new Collections.PriorityQueue((a, b) => {\n    if (a[2] < b[2]) {\n      return 1;\n    } else if (a[2] > b[2]) {\n      return -1;\n    }\n    return 0;\n  });\n  const pit = new Collections.Queue();\n\n  const closed = ndarray(new Uint8ClampedArray(width * height), [width, height]);\n  fill(closed, () => 0);\n\n  // add all edges to the open queue\n  // set them as \"closed\"\n  // calculate all cell neighbors\n  const cellNeighbors = []\n  for (let x = 0; x < width; x++) {\n    cellNeighbors[x] = [];\n    for (let y = 0; y < height; y++) {\n      const neighbors = getNeighborsLabelled(x, y).filter(([nx, ny]) => nx >= 0 && ny >= 0 && nx < width && ny < height);\n      cellNeighbors[x][y] = neighbors;\n      const isEdge = neighbors.length != 4;\n      if (isEdge) {\n        open.add([x, y, heightmap.get(x, y)]);\n        closed.set(x, y, 1);\n      }\n    }\n  }\n  let lakeCount = 0;\n  while(!open.isEmpty() || !pit.isEmpty()) {\n    let cell;\n    if (!pit.isEmpty()) {\n      cell = pit.dequeue();\n    } else {\n      cell = open.dequeue();\n    }\n    const [cx, cy] = cell;\n\n    for (const [nx, ny] of cellNeighbors[cx][cy]) {\n      if (closed.get(nx, ny) === 1) continue;\n      closed.set(nx, ny, 1);\n      if (waterheight.get(nx, ny) <= waterheight.get(cx, cy)) {\n        lakeCount++;\n        waterheight.set(nx, ny, waterheight.get(cx, cy));\n        pit.add([nx, ny, waterheight.get(nx, ny)]);\n      } else {\n        open.add([nx, ny, waterheight.get(nx, ny)]);\n      }\n    }\n  }\n  // console.log('lakeCount', lakeCount);\n\n  return { waterheight, cellNeighbors };\n}\n\nfunction determineFlowDirections(options: IWorldgenOptions, waterheight: ndarray<number>) {\n  const { size: { width, height } } = options;\n\n  const flowDirections = ndarray(new Uint8ClampedArray(width * height), [width, height]);\n  fill(flowDirections, () => EDirection.NONE);\n\n  const open = new Collections.PriorityQueue<number[]>((a, b) => {\n    if (a[2] < b[2]) {\n      return 1;\n    } else if (a[2] > b[2]) {\n      return -1;\n    }\n    return 0;\n  });\n  const closed = ndarray(new Uint8ClampedArray(width * height), [width, height]);\n  fill(closed, () => 0);\n\n  const cellNeighbors = [];\n  for (let x = 0; x < width; x++) {\n    cellNeighbors[x] = [];\n    for (let y = 0; y < height; y++) {\n      const allNeighbors = getNeighborsLabelled(x, y);\n      const validNeighbors = allNeighbors.filter(([nx, ny]) => isValidCell(nx, ny, width, height));\n      const invalidNeighbors = allNeighbors.filter(([nx, ny]) => !isValidCell(nx, ny, width, height));\n      cellNeighbors[x][y] = validNeighbors;\n      if (invalidNeighbors.length > 0) { // on the edge of the map\n        open.add([x, y, waterheight.get(x, y)]);\n        closed.set(x, y, 1);\n        flowDirections.set(x, y, invalidNeighbors[0][2]);\n      }\n    }\n  }\n\n  while(!open.isEmpty()) {\n    const cell = open.dequeue();\n    const [cx, cy] = cell;\n    for (const [nx, ny, ndir] of cellNeighbors[cx][cy]) {\n      if (closed.get(nx, ny) === 1) continue;\n      flowDirections.set(nx, ny, oppositeDirections[ndir]);\n      closed.set(nx, ny, 1);\n      open.add([nx, ny, waterheight.get(nx, ny)]);\n    }\n  }\n\n  return flowDirections;\n}\n\nfunction decideTerrainTypes(\n  options: IWorldgenOptions,\n  sealevel: number,\n  heightmap: ndarray,\n  waterheight: ndarray,\n  flowDirections: ndarray,\n  cellNeighbors: [number, number, number][][][],\n) {\n  const { size: { width, height }, riverThreshold } = options;\n\n  // calculate ocean cells by flood fill from the top-left of the map\n  // cells which are below sea level and touch the edge of the map are ocean cells\n  const seenCells = ndarray(new Int16Array(width * height), [width, height]);\n  fill(seenCells, () => 0);\n\n  // inland ocean cells should be considered lakes\n  // NOTE: assumes top-left cell of the map is an ocean cell\n  const isOcean = ndarray(new Int16Array(width * height), [width, height]);\n  fill(isOcean, () => 0);\n  const q = new Collections.Queue<[number, number]>();\n  isOcean.set(0, 0, 1);\n  q.add([0, 0]);\n  while (!q.isEmpty()) {\n    const [cx, cy] = q.dequeue();\n    isOcean.set(cx, cy, 1);\n\n    for (const [nx, ny] of cellNeighbors[cx][cy]) {\n      if (heightmap.get(nx, ny) <= sealevel && seenCells.get(nx, ny) === 0) {\n        seenCells.set(nx, ny, 1);\n        q.add([nx, ny]);\n      }\n    }\n  }\n\n  const isLake = ndarray(new Int16Array(width * height), [width, height]);\n  fill(isLake, (x, y) => waterheight.get(x, y) > heightmap.get(x, y));\n\n  const isRiver = ndarray(new Int16Array(width * height), [width, height]);\n  fill(isRiver, () => 0);\n\n  const upstreamCells = ndarray(new Int16Array(width * height), [width, height]);\n  fill(upstreamCells, () => 0);\n\n  // determine coastal cells by finding all land cells with at least one ocean neighbor\n  const coastalCells = [];\n  const isCoastalCell = ndarray(new Int16Array(width * height), [width, height]);\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      // cell is coastal if it's a land cell next to lake or ocean\n      const isCoastal = (\n        (isOcean.get(x, y) === 0 && isLake.get(x, y) === 0) &&\n        (cellNeighbors[x][y].some(([nx, ny]) => isOcean.get(nx, ny) === 1) ||\n         cellNeighbors[x][y].some(([nx, ny]) => isLake.get(nx, ny) === 1))\n      );\n      if (isCoastal) {\n        coastalCells.push([x, y]);\n        isCoastalCell.set(x, y, 1);\n      } else {\n        isCoastalCell.set(x, y, 0);\n      }\n    }\n  }\n  // console.log('coastalCells', coastalCells);\n\n  // determine upstream cell count\n  function findUpstreamCount(x, y) {\n    let count = 0;\n    for (const [nx, ny, ndir] of cellNeighbors[x][y]) {\n      const neighborFlowDir: EDirection = flowDirections.get(nx, ny);\n      const isUpstream = oppositeDirections[neighborFlowDir] === ndir;\n      if (isUpstream) {\n        count += 1 + findUpstreamCount(nx, ny);\n      }\n    }\n    upstreamCells.set(x, y, upstreamCells.get(x, y) + count);\n    return count;\n  }\n\n  for (const [x, y] of coastalCells) {\n    findUpstreamCount(x, y);\n  }\n\n  const data = Array.from(upstreamCells.data).filter(i => i > 0);\n  // const upstreamCellsMax = ops.sup(upstreamCells);\n  const riverThresholdAmount = Stats.quantile(data, riverThreshold);\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const upstreamCount = upstreamCells.get(x, y);\n      if (upstreamCount > riverThresholdAmount) {\n        isRiver.set(x, y, 1);\n      }\n    }\n  }\n\n  const terrainTypes = ndarray(new Int16Array(width * height), [width, height]);\n  let oceanCellCount = 0;\n  fill(terrainTypes, (x, y) => {\n    if (isOcean.get(x, y)) {\n      const waterDepth = sealevel - waterheight.get(x, y);\n      oceanCellCount++;\n      if (waterDepth < 10) {\n        return ETerrainType.COAST;\n      }\n      return ETerrainType.OCEAN;\n    }\n    if (isLake.get(x, y) === 1) {\n      return ETerrainType.LAKE;\n    }\n    if (isRiver.get(x, y) === 1) {\n      return ETerrainType.RIVER;\n    }\n    return ETerrainType.LAND;\n  });\n  // console.log('Ocean percent', oceanCellCount / (width * height));\n  return { terrainTypes, upstreamCells };\n}\n\nfunction decideDrainageBasins(\n  options: IWorldgenOptions,\n  cellNeighbors: [number, number, number][][][],\n  waterheight: ndarray,\n  terrainTypes: ndarray,\n) {\n  const { seed, size: { width, height } } = options;\n\n  const rng = new Alea(seed);\n  const open = new Collections.PriorityQueue<number[]>((a, b) => {\n    if (a[2] < b[2]) {\n      return 1;\n    } else if (a[2] > b[2]) {\n      return -1;\n    }\n    return 0;\n  });\n  const pit = new Collections.Queue();\n  const labels = [];\n\n  let currentLabel = 1;\n\n  for (let x = 0; x < width; x++) {\n    labels[x] = [];\n    for (let y = 0; y < height; y++) {\n      labels[x][y] = undefined; // candidate\n      const isEdge = getNeighborsLabelled(x, y)\n        .some(([nx, ny]) => !isValidCell(nx, ny, width, height));\n      if (isEdge) {\n        open.add([x, y, waterheight.get(x, y)]);\n        labels[x][y] = null; // queued\n      }\n    }\n  }\n\n  while(!open.isEmpty() || !pit.isEmpty()) {\n    let cell;\n    if (!pit.isEmpty()) {\n      cell = pit.dequeue();\n    } else {\n      cell = open.dequeue();\n    }\n    const [cx, cy, z] = cell;\n    if (labels[cx][cy] === null) {\n      labels[cx][cy] = currentLabel;\n      currentLabel++;\n    }\n\n    for (const [nx, ny] of cellNeighbors[cx][cy]) {\n      if (labels[nx][ny] !== undefined) continue;\n      labels[nx][ny] = labels[cx][cy];\n      if (waterheight.get(nx, ny) <= z) {\n        pit.add([nx, ny, z]);\n      } else {\n        open.add([nx, ny, waterheight.get(nx, ny)]);\n      }\n    }\n  }\n\n  const drainageBasins: {\n    [id: number]: {\n      color: number,\n      cells: [number, number][],\n    }\n  } = {};\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      if (isOceanic(terrainTypes.get(x, y))) continue;\n      const id: number = labels[x][y];\n      if (!(id in drainageBasins)) {\n        const red: number = Math.round(rng() * 255);\n        const green: number = Math.round(rng() * 255);\n        const blue: number = Math.round(rng() * 255);\n        drainageBasins[id] = {\n          color: (red << 16) + (green << 8) + blue,\n          cells: [],\n        };\n      }\n      drainageBasins[id].cells.push([x, y]);\n    }\n  }\n\n  return drainageBasins;\n}\n\n/**\n * Decide temperature of each cell\n *\n * Considerations:\n *    - warmer near the equator\n *    - colder near the poles\n *    - colder at higher elevations\n *    - warmer near shallow waters\n */\nfunction decideTemperature(\n  options: IWorldgenOptions,\n  sealevel: number,\n  waterheight: ndarray\n): ndarray {\n  const { size: { width, height }, temperature, elevationCoolingAmount } = options;\n\n  const latitudeRatio = ndarray(new Float32Array(width * height), [width, height]);\n  fill(latitudeRatio, (x, y) => {\n    let ratio = y / height;\n    if (ratio < 0.5) {\n      ratio /= 0.5;\n    } else {\n      ratio = (1 - ratio) / 0.5;\n    }\n    return ratio;\n  });\n\n  const temperatureMap = ndarray(new Int16Array(width * height), [width, height]);\n  const maxAltitude = 255 - sealevel;\n  fill(temperatureMap, (x, y) => {\n    const ratio = latitudeRatio.get(x, y);\n    // radiation is a function of latitude only\n    const radiation = (Math.abs(temperature.min) + (temperature.max - 10)) * ratio + temperature.min;\n    // includes heights\n    let part2 = 0;\n    const altitude = waterheight.get(x, y) - sealevel;\n    if (altitude < 0) { // ocean\n      // shallow seas are warmer than deep oceans\n      part2 = (1 - (Math.abs(altitude) / sealevel)) * 10;\n    } else {\n      // higher is colder\n      // lower is warmer\n      part2 = 10 + (altitude / maxAltitude) * -elevationCoolingAmount;\n    }\n    return radiation + part2;\n  });\n\n  return temperatureMap;\n}\n\nfunction generateMoisture(\n  options: IWorldgenOptions,\n  heightmap: ndarray,\n  sealevel: number,\n  terrainTypes: ndarray\n): ndarray {\n  const { seed, size: { width, height } } = options;\n  const rng = new Alea(seed);\n  const moistureMap = ndarray(new Int16Array(width * height), [width, height]);\n  const simplex = new SimplexNoise(rng);\n  fill(moistureMap, (x, y) => {\n    if (isContinental(terrainTypes.get(x, y))) {\n      const nx = x / width - 0.5;\n      const ny = y / height - 0.5;\n      const moisture = ((simplex.noise2D(3 * nx, 3 * ny) + 1) / 2);\n      const inlandRatio = (heightmap.get(x, y) - sealevel) / (255 - sealevel);\n      return (moisture * (1 - inlandRatio)) * 500;\n    }\n    return 0;\n  });\n  let cells = [];\n  const scale = Math.max(width, height) / 250;\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      if (terrainTypes.get(x, y) === ETerrainType.RIVER) {\n        const inlandRatio = (heightmap.get(x, y) - sealevel) / (255 - sealevel);\n        const riverAdd = (1 - inlandRatio) * 15;\n        let size = scale * 15 + Math.round(rng() * 10); // 15 to 25\n        cells = loopGridCircle(x, y, size);\n        for (const [cx, cy] of cells) {\n          moistureMap.set(cx, cy, moistureMap.get(cx, cy) + riverAdd);\n        }\n\n        size = scale * 5 + Math.round(rng() * 10); // 5 to 15\n        cells = loopGridCircle(x, y, size);\n        for (const [cx, cy] of cells) {\n          moistureMap.set(cx, cy, moistureMap.get(cx, cy) + (riverAdd * 2));\n        }\n\n        size = scale * 5 + Math.round(rng() * 5); // 5 to 10\n        cells = loopGridCircle(x, y, size);\n        for (const [cx, cy] of cells) {\n          moistureMap.set(cx, cy, moistureMap.get(cx, cy) + (riverAdd * 3));\n        }\n      }\n    }\n  }\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      if (isOceanic(terrainTypes.get(x, y))) {\n        moistureMap.set(x, y, 0);\n      }\n    }\n  }\n\n  return moistureMap;\n}\n\nfunction generateBiomes(\n  options: IWorldgenOptions,\n  temperatures: ndarray,\n  moistureMap: ndarray,\n  terrainTypes: ndarray,\n): ndarray {\n  const { size: { width, height } } = options;\n  const biomes = ndarray(new Int16Array(width * height), [width, height]);\n  fill(biomes, (x, y) => {\n    if (\n      terrainTypes.get(x, y,) === ETerrainType.OCEAN ||\n      terrainTypes.get(x, y,) === ETerrainType.COAST ||\n      terrainTypes.get(x, y,) === ETerrainType.LAKE\n    ) {\n      return EBiome.NONE;\n    }\n    const moisture = moistureMap.get(x, y) / 10;\n    const temperature = temperatures.get(x, y);\n    let moistureZone = null;\n    for (const [zone, { start, end }] of Object.entries(moistureZoneRanges)) {\n      if (moisture >= start && moisture < end) {\n        moistureZone = zone;\n      }\n    }\n    let temperatureZone = null;\n    for (const [zone, { start, end }] of Object.entries(temperatureZoneRanges)) {\n      if (temperature >= start && temperature < end) {\n        temperatureZone = zone;\n      }\n    }\n    if (moistureZone === null) {\n      throw new Error(`Failed to find biome for moisture: ${moisture}`);\n    }\n    if (temperatureZone === null) {\n      throw new Error(`Failed to find biome for temperature: ${temperature}`);\n    }\n    return biomeRanges[moistureZone][temperatureZone];\n  });\n\n  return biomes;\n}\n\nfunction decideMountains(\n  options: IWorldgenOptions,\n  terrainTypes: ndarray,\n  waterheight: ndarray,\n  sealevel: number\n) {\n  const { size: { width, height } } = options;\n  const maxHeight = ops.sup(waterheight);\n  const maxAltitude = maxHeight - sealevel;\n  const data = Array.from(waterheight.data).map(value => value - sealevel);\n  const mountainThreshold = Stats.quantile(data, .99);\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const altitude = waterheight.get(x, y) - sealevel;\n      if (altitude >= mountainThreshold) {\n        terrainTypes.set(x, y, ETerrainType.MOUNTAIN);\n      }\n    }\n  }\n}\n\nonmessage = function (event: MessageEvent) {\n  const options: IWorldgenOptions = event.data;\n  const sealevel = options.sealevel;\n  console.time('Worldgen');\n\n  console.time('step: generateHeightmap');\n  const heightmap = generateHeightmap(options);\n  console.timeEnd('step: generateHeightmap');\n\n  console.time('step: removeDepressions');\n  const { waterheight, cellNeighbors } = removeDepressions(options, heightmap);\n  console.timeEnd('step: removeDepressions');\n\n  console.time('step: determineFlowDirections');\n  const flowDirections = determineFlowDirections(options, waterheight);\n  console.timeEnd('step: determineFlowDirections');\n\n  console.time('step: decideTerrainTypes');\n  let { terrainTypes, upstreamCells } = decideTerrainTypes(options, sealevel, heightmap, waterheight, flowDirections, cellNeighbors);\n  console.timeEnd('step: decideTerrainTypes');\n\n  console.time('step: decideMountains');\n  decideMountains(options, terrainTypes, waterheight, sealevel);\n  console.timeEnd('step: decideMountains');\n\n  console.time('step: decideDrainageBasins');\n  const drainageBasins = decideDrainageBasins(options, cellNeighbors, waterheight, terrainTypes);\n  console.timeEnd('step: decideDrainageBasins');\n\n  console.time('step: decideTemperature');\n  const temperatures = decideTemperature(options, sealevel, waterheight);\n  console.timeEnd('step: decideTemperature');\n\n  console.time('step: generateMoisture');\n  const moistureMap = generateMoisture(options, heightmap, sealevel, terrainTypes);\n  console.timeEnd('step: generateMoisture');\n\n  console.time('step: generateBiomes');\n  const biomes = generateBiomes(options, temperatures, moistureMap, terrainTypes);\n  console.timeEnd('step: generateBiomes');\n\n\n  // console.log('upstreamCells', ndarrayStats(upstreamCells));\n  // console.log('moistureMap', ndarrayStats(moistureMap));\n  // console.log('temperatures', ndarrayStats(temperatures));\n  // console.log('biomes', countUnique(biomes));\n  console.timeEnd('Worldgen');\n\n  const output: IWorldgenWorkerOutput = {\n    options,\n    sealevel,\n    heightmap: heightmap.data,\n    flowDirections: flowDirections.data,\n    terrainTypes: terrainTypes.data,\n    drainageBasins,\n    upstreamCells: upstreamCells.data,\n    temperatures: temperatures.data,\n    moistureMap: moistureMap.data,\n    biomes: biomes.data,\n  };\n  (postMessage as any)(output);\n}\n"]}